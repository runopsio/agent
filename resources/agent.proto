syntax = "proto3";
package io.grpc;

message SubscriberRequest {
  string tags = 1;
  string version = 2;
  string revision = 3;
  string hostname = 4;
  string machine_id = 5;
  bool boot = 6;
  bool feature_keep_alive = 7;
}

message EventRequest {
  map<string, string> runtime_data = 1;
}

message ConnectionConfig {
  int32 backoff_http_poll = 1;
  int32 backoff_grpc_connect_subscribe = 2;
  int32 grpc_connect_channel_timeout = 3;
}

message RuntimeConfigurationResponse {
  string id = 1;
  string org = 2;
  string hc_dataset = 3;
  string hc_api_key = 4;
  string sentry_dsn = 5;
  string sentry_env = 6;
  ConnectionConfig connection_config = 7;
  string dlp_auth_b64 = 8;
  repeated string dlp_fields = 9;
}

message TaskResponse {
  int32 id = 1;
  string type = 2;
  string script = 3;
  string secret_provider = 4;
  string secret_path = 5;
  string secret_mapping = 6;
  string config = 7;
  string x_b3_trace_id = 8;
  string x_b3_parent_span_id = 9;
  string custom_command = 10;
  string token = 11;
  bool keep_alive_task = 12;
  string redact = 13;
  string pre_signed_url = 14;
}

message LogsRequest {
  int32 id = 1;
  string status = 2;
  string logs = 3;
  bool redacted = 4;
}

message LogsResponse {
  string message = 1;
}

message HealthRequest{}

service Agent {
  rpc Event(EventRequest) returns (RuntimeConfigurationResponse);
  rpc Subscribe (SubscriberRequest) returns (stream TaskResponse);
  rpc Webhook (LogsRequest) returns (LogsResponse);
  rpc Health (HealthRequest) returns (HealthRequest);
}
