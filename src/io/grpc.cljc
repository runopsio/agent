;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; Message Implementation of package io.grpc
;;;----------------------------------------------------------------------------------
(ns io.grpc
  (:require [protojure.protobuf.protocol :as pb]
            [protojure.protobuf.serdes.core :as serdes.core]
            [protojure.protobuf.serdes.complex :as serdes.complex]
            [protojure.protobuf.serdes.utils :refer [tag-map]]
            [protojure.protobuf.serdes.stream :as serdes.stream]
            [clojure.set :as set]
            [clojure.spec.alpha :as s]))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Forward declarations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(declare cis->Message)
(declare ecis->Message)
(declare new-Message)
(declare cis->EventRequest)
(declare ecis->EventRequest)
(declare new-EventRequest)
(declare cis->EventRequest-RuntimeDataEntry)
(declare ecis->EventRequest-RuntimeDataEntry)
(declare new-EventRequest-RuntimeDataEntry)
(declare cis->ConnectionConfig)
(declare ecis->ConnectionConfig)
(declare new-ConnectionConfig)
(declare cis->RuntimeConfigurationResponse)
(declare ecis->RuntimeConfigurationResponse)
(declare new-RuntimeConfigurationResponse)


;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Message Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; Message
;-----------------------------------------------------------------------------
(defrecord Message-record [type body]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:type this) os)
    (serdes.core/write-String 2  {:optimize true} (:body this) os))
  pb/TypeReflection
  (gettype [this]
    "io.grpc.Message"))

(s/def :io.grpc.Message/type string?)
(s/def :io.grpc.Message/body string?)
(s/def ::Message-spec (s/keys :opt-un [:io.grpc.Message/type :io.grpc.Message/body ]))
(def Message-defaults {:type "" :body "" })

(defn cis->Message
  "CodedInputStream to Message"
  [is]
  (->> (tag-map Message-defaults
         (fn [tag index]
             (case index
               1 [:type (serdes.core/cis->String is)]
               2 [:body (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Message-record)))

(defn ecis->Message
  "Embedded CodedInputStream to Message"
  [is]
  (serdes.core/cis->embedded cis->Message is))

(defn new-Message
  "Creates a new instance from a map, similar to map->Message except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Message-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Message-spec init))))]}
  (-> (merge Message-defaults init)
      (map->Message-record)))

(defn pb->Message
  "Protobuf to Message"
  [input]
  (cis->Message (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Message-meta {:type "io.grpc.Message" :decoder pb->Message})

;-----------------------------------------------------------------------------
; EventRequest
;-----------------------------------------------------------------------------
(defrecord EventRequest-record [runtime-data]
  pb/Writer
  (serialize [this os]
    (serdes.complex/write-map new-EventRequest-RuntimeDataEntry 1 (:runtime-data this) os))
  pb/TypeReflection
  (gettype [this]
    "io.grpc.EventRequest"))

(s/def ::EventRequest-spec (s/keys :opt-un []))
(def EventRequest-defaults {:runtime-data [] })

(defn cis->EventRequest
  "CodedInputStream to EventRequest"
  [is]
  (->> (tag-map EventRequest-defaults
         (fn [tag index]
             (case index
               1 [:runtime-data (serdes.complex/cis->map ecis->EventRequest-RuntimeDataEntry is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->EventRequest-record)))

(defn ecis->EventRequest
  "Embedded CodedInputStream to EventRequest"
  [is]
  (serdes.core/cis->embedded cis->EventRequest is))

(defn new-EventRequest
  "Creates a new instance from a map, similar to map->EventRequest except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::EventRequest-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::EventRequest-spec init))))]}
  (-> (merge EventRequest-defaults init)
      (map->EventRequest-record)))

(defn pb->EventRequest
  "Protobuf to EventRequest"
  [input]
  (cis->EventRequest (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record EventRequest-meta {:type "io.grpc.EventRequest" :decoder pb->EventRequest})

;-----------------------------------------------------------------------------
; EventRequest-RuntimeDataEntry
;-----------------------------------------------------------------------------
(defrecord EventRequest-RuntimeDataEntry-record [key value]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:key this) os)
    (serdes.core/write-String 2  {:optimize true} (:value this) os))
  pb/TypeReflection
  (gettype [this]
    "io.grpc.EventRequest-RuntimeDataEntry"))

(s/def :io.grpc.EventRequest-RuntimeDataEntry/key string?)
(s/def :io.grpc.EventRequest-RuntimeDataEntry/value string?)
(s/def ::EventRequest-RuntimeDataEntry-spec (s/keys :opt-un [:io.grpc.EventRequest-RuntimeDataEntry/key :io.grpc.EventRequest-RuntimeDataEntry/value ]))
(def EventRequest-RuntimeDataEntry-defaults {:key "" :value "" })

(defn cis->EventRequest-RuntimeDataEntry
  "CodedInputStream to EventRequest-RuntimeDataEntry"
  [is]
  (->> (tag-map EventRequest-RuntimeDataEntry-defaults
         (fn [tag index]
             (case index
               1 [:key (serdes.core/cis->String is)]
               2 [:value (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->EventRequest-RuntimeDataEntry-record)))

(defn ecis->EventRequest-RuntimeDataEntry
  "Embedded CodedInputStream to EventRequest-RuntimeDataEntry"
  [is]
  (serdes.core/cis->embedded cis->EventRequest-RuntimeDataEntry is))

(defn new-EventRequest-RuntimeDataEntry
  "Creates a new instance from a map, similar to map->EventRequest-RuntimeDataEntry except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::EventRequest-RuntimeDataEntry-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::EventRequest-RuntimeDataEntry-spec init))))]}
  (-> (merge EventRequest-RuntimeDataEntry-defaults init)
      (map->EventRequest-RuntimeDataEntry-record)))

(defn pb->EventRequest-RuntimeDataEntry
  "Protobuf to EventRequest-RuntimeDataEntry"
  [input]
  (cis->EventRequest-RuntimeDataEntry (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record EventRequest-RuntimeDataEntry-meta {:type "io.grpc.EventRequest-RuntimeDataEntry" :decoder pb->EventRequest-RuntimeDataEntry})

;-----------------------------------------------------------------------------
; ConnectionConfig
;-----------------------------------------------------------------------------
(defrecord ConnectionConfig-record [backoff-http-poll backoff-grpc-connect-subscribe grpc-connect-channel-timeout]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Int32 1  {:optimize true} (:backoff-http-poll this) os)
    (serdes.core/write-Int32 2  {:optimize true} (:backoff-grpc-connect-subscribe this) os)
    (serdes.core/write-Int32 3  {:optimize true} (:grpc-connect-channel-timeout this) os))
  pb/TypeReflection
  (gettype [this]
    "io.grpc.ConnectionConfig"))

(s/def :io.grpc.ConnectionConfig/backoff-http-poll int?)
(s/def :io.grpc.ConnectionConfig/backoff-grpc-connect-subscribe int?)
(s/def :io.grpc.ConnectionConfig/grpc-connect-channel-timeout int?)
(s/def ::ConnectionConfig-spec (s/keys :opt-un [:io.grpc.ConnectionConfig/backoff-http-poll :io.grpc.ConnectionConfig/backoff-grpc-connect-subscribe :io.grpc.ConnectionConfig/grpc-connect-channel-timeout ]))
(def ConnectionConfig-defaults {:backoff-http-poll 0 :backoff-grpc-connect-subscribe 0 :grpc-connect-channel-timeout 0 })

(defn cis->ConnectionConfig
  "CodedInputStream to ConnectionConfig"
  [is]
  (->> (tag-map ConnectionConfig-defaults
         (fn [tag index]
             (case index
               1 [:backoff-http-poll (serdes.core/cis->Int32 is)]
               2 [:backoff-grpc-connect-subscribe (serdes.core/cis->Int32 is)]
               3 [:grpc-connect-channel-timeout (serdes.core/cis->Int32 is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->ConnectionConfig-record)))

(defn ecis->ConnectionConfig
  "Embedded CodedInputStream to ConnectionConfig"
  [is]
  (serdes.core/cis->embedded cis->ConnectionConfig is))

(defn new-ConnectionConfig
  "Creates a new instance from a map, similar to map->ConnectionConfig except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::ConnectionConfig-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::ConnectionConfig-spec init))))]}
  (-> (merge ConnectionConfig-defaults init)
      (map->ConnectionConfig-record)))

(defn pb->ConnectionConfig
  "Protobuf to ConnectionConfig"
  [input]
  (cis->ConnectionConfig (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record ConnectionConfig-meta {:type "io.grpc.ConnectionConfig" :decoder pb->ConnectionConfig})

;-----------------------------------------------------------------------------
; RuntimeConfigurationResponse
;-----------------------------------------------------------------------------
(defrecord RuntimeConfigurationResponse-record [hc-dataset org hc-api-key id sentry-env sentry-dsn dlp-auth-b64 dlp-fields connection-config]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 3  {:optimize true} (:hc-dataset this) os)
    (serdes.core/write-String 2  {:optimize true} (:org this) os)
    (serdes.core/write-String 4  {:optimize true} (:hc-api-key this) os)
    (serdes.core/write-String 1  {:optimize true} (:id this) os)
    (serdes.core/write-String 6  {:optimize true} (:sentry-env this) os)
    (serdes.core/write-String 5  {:optimize true} (:sentry-dsn this) os)
    (serdes.core/write-String 8  {:optimize true} (:dlp-auth-b64 this) os)
    (serdes.complex/write-repeated serdes.core/write-String 9 (:dlp-fields this) os)
    (serdes.core/write-embedded 7 (:connection-config this) os))
  pb/TypeReflection
  (gettype [this]
    "io.grpc.RuntimeConfigurationResponse"))

(s/def :io.grpc.RuntimeConfigurationResponse/hc-dataset string?)
(s/def :io.grpc.RuntimeConfigurationResponse/org string?)
(s/def :io.grpc.RuntimeConfigurationResponse/hc-api-key string?)
(s/def :io.grpc.RuntimeConfigurationResponse/id string?)
(s/def :io.grpc.RuntimeConfigurationResponse/sentry-env string?)
(s/def :io.grpc.RuntimeConfigurationResponse/sentry-dsn string?)
(s/def :io.grpc.RuntimeConfigurationResponse/dlp-auth-b64 string?)
(s/def :io.grpc.RuntimeConfigurationResponse/dlp-fields (s/every string?))

(s/def ::RuntimeConfigurationResponse-spec (s/keys :opt-un [:io.grpc.RuntimeConfigurationResponse/hc-dataset :io.grpc.RuntimeConfigurationResponse/org :io.grpc.RuntimeConfigurationResponse/hc-api-key :io.grpc.RuntimeConfigurationResponse/id :io.grpc.RuntimeConfigurationResponse/sentry-env :io.grpc.RuntimeConfigurationResponse/sentry-dsn :io.grpc.RuntimeConfigurationResponse/dlp-auth-b64 :io.grpc.RuntimeConfigurationResponse/dlp-fields ]))
(def RuntimeConfigurationResponse-defaults {:hc-dataset "" :org "" :hc-api-key "" :id "" :sentry-env "" :sentry-dsn "" :dlp-auth-b64 "" :dlp-fields [] })

(defn cis->RuntimeConfigurationResponse
  "CodedInputStream to RuntimeConfigurationResponse"
  [is]
  (->> (tag-map RuntimeConfigurationResponse-defaults
         (fn [tag index]
             (case index
               3 [:hc-dataset (serdes.core/cis->String is)]
               2 [:org (serdes.core/cis->String is)]
               4 [:hc-api-key (serdes.core/cis->String is)]
               1 [:id (serdes.core/cis->String is)]
               6 [:sentry-env (serdes.core/cis->String is)]
               5 [:sentry-dsn (serdes.core/cis->String is)]
               8 [:dlp-auth-b64 (serdes.core/cis->String is)]
               9 [:dlp-fields (serdes.complex/cis->repeated serdes.core/cis->String is)]
               7 [:connection-config (ecis->ConnectionConfig is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->RuntimeConfigurationResponse-record)))

(defn ecis->RuntimeConfigurationResponse
  "Embedded CodedInputStream to RuntimeConfigurationResponse"
  [is]
  (serdes.core/cis->embedded cis->RuntimeConfigurationResponse is))

(defn new-RuntimeConfigurationResponse
  "Creates a new instance from a map, similar to map->RuntimeConfigurationResponse except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::RuntimeConfigurationResponse-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::RuntimeConfigurationResponse-spec init))))]}
  (-> (merge RuntimeConfigurationResponse-defaults init)
      (cond-> (some? (get init :connection-config)) (update :connection-config new-ConnectionConfig))
      (map->RuntimeConfigurationResponse-record)))

(defn pb->RuntimeConfigurationResponse
  "Protobuf to RuntimeConfigurationResponse"
  [input]
  (cis->RuntimeConfigurationResponse (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record RuntimeConfigurationResponse-meta {:type "io.grpc.RuntimeConfigurationResponse" :decoder pb->RuntimeConfigurationResponse})

