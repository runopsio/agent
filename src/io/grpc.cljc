;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; Message Implementation of package io.grpc
;;;----------------------------------------------------------------------------------
(ns io.grpc
  (:require [protojure.protobuf.protocol :as pb]
            [protojure.protobuf.serdes.core :as serdes.core]
            [protojure.protobuf.serdes.complex :as serdes.complex]
            [protojure.protobuf.serdes.utils :refer [tag-map]]
            [protojure.protobuf.serdes.stream :as serdes.stream]
            [clojure.set :as set]
            [clojure.spec.alpha :as s]))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Forward declarations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(declare cis->SubscriberRequest)
(declare ecis->SubscriberRequest)
(declare new-SubscriberRequest)
(declare cis->TaskResponse)
(declare ecis->TaskResponse)
(declare new-TaskResponse)
(declare cis->LogsRequest)
(declare ecis->LogsRequest)
(declare new-LogsRequest)
(declare cis->LogsResponse)
(declare ecis->LogsResponse)
(declare new-LogsResponse)
(declare cis->HealthRequest)
(declare ecis->HealthRequest)
(declare new-HealthRequest)


;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Message Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; SubscriberRequest
;-----------------------------------------------------------------------------
(defrecord SubscriberRequest-record [tags]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:tags this) os))
  pb/TypeReflection
  (gettype [this]
    "io.grpc.SubscriberRequest"))

(s/def :io.grpc.SubscriberRequest/tags string?)
(s/def ::SubscriberRequest-spec (s/keys :opt-un [:io.grpc.SubscriberRequest/tags]))
(def SubscriberRequest-defaults {:tags ""})

(defn cis->SubscriberRequest
  "CodedInputStream to SubscriberRequest"
  [is]
  (->> (tag-map SubscriberRequest-defaults
                (fn [tag index]
                  (case index
                    1 [:tags (serdes.core/cis->String is)]

                    [index (serdes.core/cis->undefined tag is)]))
                is)
       (map->SubscriberRequest-record)))

(defn ecis->SubscriberRequest
  "Embedded CodedInputStream to SubscriberRequest"
  [is]
  (serdes.core/cis->embedded cis->SubscriberRequest is))

(defn new-SubscriberRequest
  "Creates a new instance from a map, similar to map->SubscriberRequest except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::SubscriberRequest-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::SubscriberRequest-spec init))))]}
  (-> (merge SubscriberRequest-defaults init)
      (map->SubscriberRequest-record)))

(defn pb->SubscriberRequest
  "Protobuf to SubscriberRequest"
  [input]
  (cis->SubscriberRequest (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record SubscriberRequest-meta {:type "io.grpc.SubscriberRequest" :decoder pb->SubscriberRequest})

;-----------------------------------------------------------------------------
; TaskResponse
;-----------------------------------------------------------------------------
(defrecord TaskResponse-record [config x-b3-parent-span-id id secret-provider script secret-path type secret-mapping x-b3-trace-id]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 7  {:optimize true} (:config this) os)
    (serdes.core/write-String 9  {:optimize true} (:x-b3-parent-span-id this) os)
    (serdes.core/write-Int32 1  {:optimize true} (:id this) os)
    (serdes.core/write-String 4  {:optimize true} (:secret-provider this) os)
    (serdes.core/write-String 3  {:optimize true} (:script this) os)
    (serdes.core/write-String 5  {:optimize true} (:secret-path this) os)
    (serdes.core/write-String 2  {:optimize true} (:type this) os)
    (serdes.core/write-String 6  {:optimize true} (:secret-mapping this) os)
    (serdes.core/write-String 8  {:optimize true} (:x-b3-trace-id this) os))
  pb/TypeReflection
  (gettype [this]
    "io.grpc.TaskResponse"))

(s/def :io.grpc.TaskResponse/config string?)
(s/def :io.grpc.TaskResponse/x-b3-parent-span-id string?)
(s/def :io.grpc.TaskResponse/id int?)
(s/def :io.grpc.TaskResponse/secret-provider string?)
(s/def :io.grpc.TaskResponse/script string?)
(s/def :io.grpc.TaskResponse/secret-path string?)
(s/def :io.grpc.TaskResponse/type string?)
(s/def :io.grpc.TaskResponse/secret-mapping string?)
(s/def :io.grpc.TaskResponse/x-b3-trace-id string?)
(s/def ::TaskResponse-spec (s/keys :opt-un [:io.grpc.TaskResponse/config :io.grpc.TaskResponse/x-b3-parent-span-id :io.grpc.TaskResponse/id :io.grpc.TaskResponse/secret-provider :io.grpc.TaskResponse/script :io.grpc.TaskResponse/secret-path :io.grpc.TaskResponse/type :io.grpc.TaskResponse/secret-mapping :io.grpc.TaskResponse/x-b3-trace-id]))
(def TaskResponse-defaults {:config "" :x-b3-parent-span-id "" :id 0 :secret-provider "" :script "" :secret-path "" :type "" :secret-mapping "" :x-b3-trace-id ""})

(defn cis->TaskResponse
  "CodedInputStream to TaskResponse"
  [is]
  (->> (tag-map TaskResponse-defaults
                (fn [tag index]
                  (case index
                    7 [:config (serdes.core/cis->String is)]
                    9 [:x-b3-parent-span-id (serdes.core/cis->String is)]
                    1 [:id (serdes.core/cis->Int32 is)]
                    4 [:secret-provider (serdes.core/cis->String is)]
                    3 [:script (serdes.core/cis->String is)]
                    5 [:secret-path (serdes.core/cis->String is)]
                    2 [:type (serdes.core/cis->String is)]
                    6 [:secret-mapping (serdes.core/cis->String is)]
                    8 [:x-b3-trace-id (serdes.core/cis->String is)]

                    [index (serdes.core/cis->undefined tag is)]))
                is)
       (map->TaskResponse-record)))

(defn ecis->TaskResponse
  "Embedded CodedInputStream to TaskResponse"
  [is]
  (serdes.core/cis->embedded cis->TaskResponse is))

(defn new-TaskResponse
  "Creates a new instance from a map, similar to map->TaskResponse except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::TaskResponse-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::TaskResponse-spec init))))]}
  (-> (merge TaskResponse-defaults init)
      (map->TaskResponse-record)))

(defn pb->TaskResponse
  "Protobuf to TaskResponse"
  [input]
  (cis->TaskResponse (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record TaskResponse-meta {:type "io.grpc.TaskResponse" :decoder pb->TaskResponse})

;-----------------------------------------------------------------------------
; LogsRequest
;-----------------------------------------------------------------------------
(defrecord LogsRequest-record [id status logs]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-Int32 1  {:optimize true} (:id this) os)
    (serdes.core/write-String 2  {:optimize true} (:status this) os)
    (serdes.core/write-String 3  {:optimize true} (:logs this) os))
  pb/TypeReflection
  (gettype [this]
    "io.grpc.LogsRequest"))

(s/def :io.grpc.LogsRequest/id int?)
(s/def :io.grpc.LogsRequest/status string?)
(s/def :io.grpc.LogsRequest/logs string?)
(s/def ::LogsRequest-spec (s/keys :opt-un [:io.grpc.LogsRequest/id :io.grpc.LogsRequest/status :io.grpc.LogsRequest/logs]))
(def LogsRequest-defaults {:id 0 :status "" :logs ""})

(defn cis->LogsRequest
  "CodedInputStream to LogsRequest"
  [is]
  (->> (tag-map LogsRequest-defaults
                (fn [tag index]
                  (case index
                    1 [:id (serdes.core/cis->Int32 is)]
                    2 [:status (serdes.core/cis->String is)]
                    3 [:logs (serdes.core/cis->String is)]

                    [index (serdes.core/cis->undefined tag is)]))
                is)
       (map->LogsRequest-record)))

(defn ecis->LogsRequest
  "Embedded CodedInputStream to LogsRequest"
  [is]
  (serdes.core/cis->embedded cis->LogsRequest is))

(defn new-LogsRequest
  "Creates a new instance from a map, similar to map->LogsRequest except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::LogsRequest-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::LogsRequest-spec init))))]}
  (-> (merge LogsRequest-defaults init)
      (map->LogsRequest-record)))

(defn pb->LogsRequest
  "Protobuf to LogsRequest"
  [input]
  (cis->LogsRequest (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record LogsRequest-meta {:type "io.grpc.LogsRequest" :decoder pb->LogsRequest})

;-----------------------------------------------------------------------------
; LogsResponse
;-----------------------------------------------------------------------------
(defrecord LogsResponse-record [message]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:message this) os))
  pb/TypeReflection
  (gettype [this]
    "io.grpc.LogsResponse"))

(s/def :io.grpc.LogsResponse/message string?)
(s/def ::LogsResponse-spec (s/keys :opt-un [:io.grpc.LogsResponse/message]))
(def LogsResponse-defaults {:message ""})

(defn cis->LogsResponse
  "CodedInputStream to LogsResponse"
  [is]
  (->> (tag-map LogsResponse-defaults
                (fn [tag index]
                  (case index
                    1 [:message (serdes.core/cis->String is)]

                    [index (serdes.core/cis->undefined tag is)]))
                is)
       (map->LogsResponse-record)))

(defn ecis->LogsResponse
  "Embedded CodedInputStream to LogsResponse"
  [is]
  (serdes.core/cis->embedded cis->LogsResponse is))

(defn new-LogsResponse
  "Creates a new instance from a map, similar to map->LogsResponse except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::LogsResponse-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::LogsResponse-spec init))))]}
  (-> (merge LogsResponse-defaults init)
      (map->LogsResponse-record)))

(defn pb->LogsResponse
  "Protobuf to LogsResponse"
  [input]
  (cis->LogsResponse (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record LogsResponse-meta {:type "io.grpc.LogsResponse" :decoder pb->LogsResponse})

;-----------------------------------------------------------------------------
; HealthRequest
;-----------------------------------------------------------------------------
(defrecord HealthRequest-record []
  pb/Writer
  (serialize [this os])
  pb/TypeReflection
  (gettype [this]
    "io.grpc.HealthRequest"))

(s/def ::HealthRequest-spec (s/keys :opt-un []))
(def HealthRequest-defaults {})

(defn cis->HealthRequest
  "CodedInputStream to HealthRequest"
  [is]
  (->> (tag-map HealthRequest-defaults
                (fn [tag index]
                  (case index
                    [index (serdes.core/cis->undefined tag is)]))
                is)
       (map->HealthRequest-record)))

(defn ecis->HealthRequest
  "Embedded CodedInputStream to HealthRequest"
  [is]
  (serdes.core/cis->embedded cis->HealthRequest is))

(defn new-HealthRequest
  "Creates a new instance from a map, similar to map->HealthRequest except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::HealthRequest-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::HealthRequest-spec init))))]}
  (-> (merge HealthRequest-defaults init)
      (map->HealthRequest-record)))

(defn pb->HealthRequest
  "Protobuf to HealthRequest"
  [input]
  (cis->HealthRequest (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record HealthRequest-meta {:type "io.grpc.HealthRequest" :decoder pb->HealthRequest})

