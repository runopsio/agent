{"version":3,"sources":["day8/re_frame_10x/panels/app_db/events.cljs"],"mappings":"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","names":["day8.re-frame-10x.panels.app-db.events/paths-interceptors","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.path","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/trim-v","day8.re_frame_10x.fx.local_storage.save","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_db","paths","_","cljs.core.assoc","js/Date.now","p__64925","vec__64926","cljs.core.nth","path-id","path-str","path","day8.re-frame-10x.tools.reader.edn/read-string-maybe","cljs.core/assoc-in","cljs.core/sequential?","clojure.string/blank?","p__64936","vec__64937","map__64940","cljs.core/--destructure-map","cljs.core.get","valid-path?","cljs.core.pr_str","p__64941","vec__64946","open?","p__64950","vec__64951","diff?","cljs.core.get_in","p__64954","vec__64955","cljs.core.dissoc","p__64958","vec__64959","p__64962","vec__64963","search-string","p__64966","vec__64967","p__64970","vec__64971","cljs.core/contains?","cljs.core.disj","cljs.core.conj","re-frame.interop/reagent-id","re-frame.db/app-db"],"sourcesContent":["(ns day8.re-frame-10x.panels.app-db.events\n  (:require\n    [re-frame.db]\n    [re-frame.interop]\n    [clojure.string                                               :as string]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n    [day8.re-frame-10x.fx.local-storage                           :as local-storage]\n    [day8.re-frame-10x.tools.reader.edn                           :as reader.edn]))\n\n(def paths-interceptors\n  [(rf/path [:app-db :paths])\n   rf/trim-v\n   (local-storage/save \"app-db-paths\")])\n\n;; The core idea with :app-db/update-path and :app-db/update-path-blur\n;; is that we need to separate the users text input (`path-str`) with the\n;; parsing of that string (`path`). We let the user type any string that\n;; they like, and check it for validity on each change. If it is valid\n;; then we update `path` and mark the pod as valid. If it isn't valid then\n;; we don't update `path` and mark the pod as invalid.\n;;\n;; On blur of the input, we reset path-str to the last valid path, if\n;; the pod isn't currently valid.\n\n(rf/reg-event-db\n  ::create-path\n  paths-interceptors\n  (fn [paths _]\n    (assoc paths\n      (js/Date.now)\n      {:diff?       false\n       :open?       false\n       :path        nil\n       :path-str    \"\"\n       :valid-path? true})))\n\n(rf/reg-event-db\n  ::update-path\n  paths-interceptors\n  (fn [paths [path-id path-str]]\n    (let [path  (reader.edn/read-string-maybe path-str)\n          paths (assoc-in paths [path-id :path-str] path-str)]\n      (if (or (and (some? path)\n                   (sequential? path))\n              (string/blank? path-str))\n        (-> paths\n            (assoc-in [path-id :path] path)\n            (assoc-in [path-id :valid-path?] true))\n        (assoc-in paths [path-id :valid-path?] false)))))\n\n\n(rf/reg-event-db\n  ::update-path-blur\n  paths-interceptors\n  (fn [paths [path-id]]\n    (let [{:keys [valid-path? path]} (get paths path-id)]\n      (if valid-path?\n        paths\n        (-> (assoc-in paths [path-id :path-str] (pr-str path))\n            (assoc-in [path-id :valid-path?] true))))))\n\n(rf/reg-event-db\n  ::set-path-visibility\n  paths-interceptors\n  (fn [paths [path-id open?]]\n    (assoc-in paths [path-id :open?] open?)))\n\n(rf/reg-event-db\n  ::set-diff-visibility\n  paths-interceptors\n  (fn [paths [path-id diff?]]\n    (let [open? (if diff?\n                  true\n                  (get-in paths [path-id :open?]))]\n      (-> paths\n          (assoc-in [path-id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n          (assoc-in [path-id :open?] open?)))))\n\n(rf/reg-event-db\n  ::remove-path\n  paths-interceptors\n  (fn [paths [path-id]]\n    (dissoc paths path-id)))\n\n(rf/reg-event-db\n  ::paths\n  paths-interceptors\n  (fn [_ [paths]]\n    paths))\n\n;; [IJ] TODO: This doesn't appear to be used anywhere:\n(rf/reg-event-db\n  ::set-search-string\n  [(rf/path [:app-db :search-string]) rf/trim-v]\n  (fn [_ [search-string]]\n    search-string))\n\n(rf/reg-event-db\n  ::set-json-ml-paths\n  [(rf/path [:app-db :json-ml-expansions]) rf/trim-v (local-storage/save \"app-db-json-ml-expansions\")]\n  (fn [_ [paths]]\n    paths))\n\n(rf/reg-event-db\n  ::toggle-expansion\n  [(rf/path [:app-db :json-ml-expansions]) rf/trim-v (local-storage/save \"app-db-json-ml-expansions\")]\n  (fn [paths [path]]\n    (if (contains? paths path)\n      (disj paths path)\n      (conj paths path))))\n\n(rf/reg-event-db\n  ::reagent-id\n  [(rf/path [:app-db :reagent-id])]\n  (fn [_ _]\n    (re-frame.interop/reagent-id re-frame.db/app-db)))\n\n"]}