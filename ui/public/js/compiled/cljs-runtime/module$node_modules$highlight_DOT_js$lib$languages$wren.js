shadow$provide.module$node_modules$highlight_DOT_js$lib$languages$wren=function(global,require,module,exports){function concat(...args){return args.map(x=>x?"string"===typeof x?x:x.source:null).join("")}function stripOptionsFromArgs(args){const opts=args[args.length-1];return"object"===typeof opts&&opts.constructor===Object?(args.splice(args.length-1,1),opts):{}}function either(...args){return"("+(stripOptionsFromArgs(args).capture?"":"?:")+args.map(x=>x?"string"===typeof x?x:x.source:null).join("|")+
")"}module.exports=function(hljs){var IDENT_RE=/[a-zA-Z]\w*/;const KEYWORDS="as break class construct continue else for foreign if import in is return static var while".split(" "),LITERALS=["true","false","null"],LANGUAGE_VARS=["this","super"];var OPERATORS=["-","~",/\*/,"%",/\.\.\./,/\.\./,/\+/,"\x3c\x3c","\x3e\x3e","\x3e\x3d","\x3c\x3d","\x3c","\x3e",/\^/,/!=/,/!/,/\bis\b/,"\x3d\x3d","\x26\x26","\x26",/\|\|/,/\|/,/\?:/,"\x3d"];const FUNCTION={relevance:0,match:concat(/\b(?!(if|while|for|else|super)\b)/,
IDENT_RE,/(?=\s*[({])/),className:"title.function"},FUNCTION_DEFINITION={match:concat(either(concat(/\b(?!(if|while|for|else|super)\b)/,IDENT_RE),either(...OPERATORS)),/(?=\s*\([^)]+\)\s*\{)/),className:"title.function",starts:{contains:[{begin:/\(/,end:/\)/,contains:[{relevance:0,scope:"params",match:IDENT_RE}]}]}},CLASS_DEFINITION={variants:[{match:[/class\s+/,IDENT_RE,/\s+is\s+/,IDENT_RE]},{match:[/class\s+/,IDENT_RE]}],scope:{2:"title.class",4:"title.class.inherited"},keywords:KEYWORDS};OPERATORS=
{relevance:0,match:either(...OPERATORS),className:"operator"};const PROPERTY={className:"property",begin:concat(/\./,concat("(?\x3d",IDENT_RE,")")),end:IDENT_RE,excludeBegin:!0,relevance:0},FIELD={relevance:0,match:concat(/\b_/,IDENT_RE),scope:"variable"},CLASS_REFERENCE={relevance:0,match:/\b[A-Z]+[a-z]+([A-Z]+[a-z]+)*/,scope:"title.class",keywords:{_:"Bool Class Fiber Fn List Map Null Num Object Range Sequence String System".split(" ")}},NUMBER=hljs.C_NUMBER_MODE;IDENT_RE={match:[IDENT_RE,/\s*/,
/=/,/\s*/,/\(/,IDENT_RE,/\)\s*\{/],scope:{1:"title.function",3:"operator",6:"params"}};const COMMENT_DOCS=hljs.COMMENT(/\/\*\*/,/\*\//,{contains:[{match:/@[a-z]+/,scope:"doctag"},"self"]});var SUBST={scope:"subst",begin:/%\(/,end:/\)/,contains:[NUMBER,CLASS_REFERENCE,FUNCTION,FIELD,OPERATORS]};const STRING={scope:"string",begin:/"/,end:/"/,contains:[SUBST,{scope:"char.escape",variants:[{match:/\\\\|\\["0%abefnrtv]/},{match:/\\x[0-9A-F]{2}/},{match:/\\u[0-9A-F]{4}/},{match:/\\U[0-9A-F]{8}/}]}]};SUBST.contains.push(STRING);
SUBST=[...KEYWORDS,...LANGUAGE_VARS,...LITERALS];SUBST={relevance:0,match:concat("\\b(?!",SUBST.join("|"),"\\b)",/[a-zA-Z_]\w*(?:[?!]|\b)/),className:"variable"};return{name:"Wren",keywords:{keyword:KEYWORDS,"variable.language":LANGUAGE_VARS,literal:LITERALS},contains:[{scope:"comment",variants:[{begin:[/#!?/,/[A-Za-z_]+(?=\()/],beginScope:{},keywords:{literal:LITERALS},contains:[],end:/\)/},{begin:[/#!?/,/[A-Za-z_]+/],beginScope:{},end:/$/}]},NUMBER,STRING,{className:"string",begin:/"""/,end:/"""/},
COMMENT_DOCS,hljs.C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE,CLASS_REFERENCE,CLASS_DEFINITION,IDENT_RE,FUNCTION_DEFINITION,FUNCTION,OPERATORS,FIELD,PROPERTY,SUBST]}}}
//# sourceMappingURL=module$node_modules$highlight_DOT_js$lib$languages$wren.js.map
