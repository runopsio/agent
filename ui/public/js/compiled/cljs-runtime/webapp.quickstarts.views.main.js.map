{"version":3,"sources":["webapp/quickstarts/views/main.cljs"],"mappings":"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","names":["webapp.quickstarts.views.main/get-config-keys","key","cljs.core.get","webapp.targets.constants/target-configs-required","webapp.quickstarts.views.main/select-area","target-type","configs","disabled?","p1__36257#","cljs.core/deref","change-target-type","value","cljs.core/reset!","cljs.core.keyword","webapp.components.forms/select","webapp.targets.constants/targets-types-list","p__36261","map__36262","cljs.core/--destructure-map","webapp.quickstarts.views.main/config->inputs","index","config","key-val","reagent.core.atom","value-val","save","k","v","cljs.core.swap_BANG_","cljs.core/assoc-in","p1__36260#","webapp.components.forms/input","webapp.quickstarts.views.main/config-inputs-for","cljs.core.doall","iter__4652__auto__","s__36266","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__36268","cljs.core/chunk-buffer","i__36267","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36265","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.range","webapp.quickstarts.views.main/config->json-stringify","cljs.core.println","cljs.core.filter","p__36271","map__36272","clojure.string/blank?","cljs.core.map","p__36269","map__36270","cljs.core.reduce","cljs.core/into","cljs.core/clj->js","js/JSON","p__36274","map__36275","webapp.quickstarts.views.main/manage->main-area","current-step","config-atom","fx-change-step","target-name-atom","target-type-atom","fx-request-agent-list","secret-path-env-atom","agent-tag-atom","fx-get-current-step-infos","agent-token","secrets-host-atom","G__36276","cljs.core/Keyword","js/Error","webapp.quickstarts.views.environment-step/main","webapp.quickstarts.views.task-step/main","js/webapp","js/webapp.quickstarts","js/webapp.quickstarts.views","js/webapp.quickstarts.views.main","js/webapp.quickstarts.views.main.show-snackbar","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","fexpr__36278","cljs.core/MultiFn","cljs.core.symbol","webapp.quickstarts.views.main/show-snackbar","cljs.core/identity","_","re-frame.core/dispatch","webapp.quickstarts.views.main/main","steppers","target-name","secret-path-env","agent-tag","selects-disabled?","secrets-host","agent-filtered","current-agent","agents","cljs.core.nth","p1__36280#","cljs.core._EQ_","get-current-step-infos","G__36283","fexpr__36282","get-index","clojure.string.index_of","cljs.core/keys","get-step","direction","G__36284","go-next-step","go-back-step","change-step","step","new-status","cljs.core/update-in","cljs.core/assoc","create-target-request","webapp.http.runops-api/request","cljs.core.merge","G__36285","request-agent-list","res","agent","webapp.components.headings/h2","webapp.components.divider/main","webapp.components.headings/h3","webapp.components.stepper/main","webapp.components.button/secondary","and__4251__auto__","webapp.components.button/primary","cljs.core.not_EQ_","cljs.core/chunk-first"],"sourcesContent":["(ns webapp.quickstarts.views.main\n  (:require [re-frame.core :as rf]\n            [reagent.core :as r]\n            [clojure.string :as s]\n            [webapp.components.button :as button]\n            [webapp.components.divider :as divider]\n            [webapp.components.forms :as forms]\n            [webapp.components.headings :as headings]\n            [webapp.components.stepper :as stepper]\n            [webapp.quickstarts.views.environment-step :as environment-step]\n            [webapp.quickstarts.views.task-step :as task-step]\n            [webapp.targets.constants :as constants]\n            [webapp.http.runops-api :as runops-api]))\n\n(defn get-config-keys\n  [key]\n  (get constants/target-configs-required key))\n\n(defn select-area\n  [target-type configs disabled?]\n  (let [change-target-type (fn [value]\n                             (reset! target-type value)\n                             (reset! configs (get-config-keys (keyword value))))]\n    [:div {:class \"grid grid-cols-4 gap-regular\"}\n     [forms/select {:label \"What you would like to connect?\"\n                    :on-change #(change-target-type (-> % .-target .-value))\n                    :selected @target-type\n                    :disabled disabled?\n                    :options constants/targets-types-list}]]))\n\n(defn config->inputs\n  [{:keys [key value]} index config]\n  (let [key-val (r/atom key)\n        value-val (r/atom value)\n        save (fn [k v] (swap! config assoc-in [index k] v))]\n    (fn []\n      [:<>\n       [forms/input {:classes \"whitespace-pre overflow-x\"\n                     :disabled true\n                     :value @key-val}]\n       [forms/input {:classes \"whitespace-pre overflow-x\"\n                     :on-change #(reset! value-val (-> % .-target .-value))\n                     :on-blur #(save :value @value-val)\n                     :type \"password\"\n                     :value @value-val}]])))\n\n(defn config-inputs-for\n  [config]\n  (fn []\n    (doall\n     (for [index (range (count @config))]\n       ^{:key (get @config index)} [config->inputs (get @config index) index config]))))\n\n(defn config->json-stringify\n  [configs]\n  (println configs)\n  (->> configs\n       (filter (fn [{:keys [key value]}]\n                 (not (or (s/blank? key) (s/blank? value)))))\n       (map (fn [{:keys [key value]}] {key value}))\n       (reduce into {})\n       (clj->js)\n       (.stringify js/JSON)))\n\n(defn manage->main-area\n  [{:keys [current-step\n           config-atom\n           fx-change-step\n           target-name-atom\n           target-type-atom\n           fx-request-agent-list\n           secret-path-env-atom\n           agent-tag-atom\n           fx-get-current-step-infos\n           agent-token\n           secrets-host-atom]}]\n  (case current-step\n    :agent [environment-step/main (config-inputs-for config-atom) fx-request-agent-list {:config-values @config-atom\n                                                                                         :secret-path-env secret-path-env-atom\n                                                                                         :agent-tag agent-tag-atom\n                                                                                         :target-name target-name-atom\n                                                                                         :target-type target-type-atom\n                                                                                         :fx-get-current-step-infos fx-get-current-step-infos\n                                                                                         :agent-token agent-token\n                                                                                         :secrets-host secrets-host-atom}]\n    :task [task-step/main fx-change-step @target-name-atom]))\n\n(defmulti show-snackbar identity)\n(defmethod show-snackbar :verified [_]\n  (rf/dispatch [:show-snackbar {:level :success :text \"Agent verified and target successfully created!\"}]))\n(defmethod show-snackbar :not-up [_]\n  (rf/dispatch [:show-snackbar {:level :error :text \"Agent is not working! Please verify your configurations.\"}]))\n(defmethod show-snackbar :not-exist [_]\n  (rf/dispatch [:show-snackbar {:level :error :text \"Agent not found! Please verify your configurations.\"}]))\n(defmethod show-snackbar :agent-failure [_]\n  (rf/dispatch [:show-snackbar {:level :error :text \"Agent not verified! Please try again in a few minutes.\"}]))\n(defmethod show-snackbar :target-failure [_]\n  (rf/dispatch [:show-snackbar {:level :error :text \"Target not created! Please try again in a few minutes.\"}]))\n\n(defn main\n  []\n  (let [steppers (r/atom {:agent {:status \"current\"\n                                  :title \"Environment's configuration\"\n                                  :text \"It will set up your environment with your connection.\"}\n                          :task {:status \"upcoming\"\n                                 :title \"Task\"\n                                 :text \"It will test your environment with a task\"}})\n        current-step (r/atom :agent)\n        target-type (r/atom \"\")\n        target-name (r/atom \"\")\n        secret-path-env (r/atom \"ENV_CONFIG\")\n        configs (r/atom (get-config-keys (keyword @target-type)))\n        agent-tag (r/atom \"\")\n        selects-disabled? (r/atom false)\n        agent-token (r/atom \"\")\n        secrets-host (r/atom \"runops\")\n\n        agent-filtered (fn [current-agent agents] (nth (filter #(= (:tags %) current-agent) agents) 0 false))\n\n        get-current-step-infos #(@current-step @steppers)\n        get-index #(s/index-of (keys @steppers) @current-step)\n        get-step (fn [direction] (nth (keys @steppers) (case direction\n                                                         \"next\" (+ (get-index) 1)\n                                                         \"back\" (- (get-index) 1)) false))\n\n        go-next-step #(reset! current-step (if (get-step \"next\") (get-step \"next\") @current-step))\n        go-back-step #(reset! current-step (if (get-step \"back\") (get-step \"back\") @current-step))\n\n        change-step (fn [step new-status] (swap! steppers update-in [step] assoc :status new-status))\n        create-target-request #(runops-api/request {:method \"POST\"\n                                                    :uri \"/v1/targets\"\n                                                    :body (merge {:name @target-name\n                                                                  :type @target-type\n                                                                  :groups nil}\n                                                                 (case @secrets-host\n                                                                   \"runops\" {:secret_provider \"runops\"\n                                                                             :tags \"test\"\n                                                                             :config (config->json-stringify @configs)}\n                                                                   \"self\" {:secret_provider \"env-var\"\n                                                                           :tags @agent-tag\n                                                                           :secret_path  @secret-path-env\n                                                                           :config nil}))\n                                                    :on-failure (fn [_]\n                                                                  (show-snackbar :target-failure))\n                                                    :on-success (fn [_]\n                                                                  (change-step :agent \"complete\")\n                                                                  (change-step :task \"current\")\n                                                                  (reset! selects-disabled? true)\n                                                                  (show-snackbar :verified))})\n\n        request-agent-list #(runops-api/request {:method \"GET\"\n                                                 :uri \"/v1/agents\"\n                                                 :on-failure (fn [_]\n                                                               (show-snackbar :agent-failure))\n                                                 :on-success (fn [res]\n                                                               (let [agent (agent-filtered @agent-tag res)]\n                                                                 (println (false? agent))\n                                                                 (cond\n                                                                   (false? agent) (show-snackbar :not-exist)\n                                                                   (= (:status agent) \"DOWN\") (show-snackbar :not-up)\n                                                                   (= (:status agent) \"UP\") (create-target-request))))})]\n\n    (fn []\n      (runops-api/request {:method \"GET\"\n                           :uri \"/v1/orgs\"\n                           :on-failure (fn [_]\n                                         (reset! agent-token \"\"))\n                           :on-success (fn [res]\n                                         (reset! agent-token (:agents_token res)))})\n      [:<>\n       [:div {:class \"grid grid-cols-4 items-center mb-large\"}\n        [headings/h2 \"Quickstarts\"]]\n       [select-area target-type configs @selects-disabled?]\n       (divider/main)\n       [:div {:class \"py-6\"}\n        (if (s/blank? @target-type)\n          [:div {:class \"flex justify-center items-center h-96\"}\n           [headings/h3\n            \"Choose one target type to start.\"]]\n          [:div {:class \"max-w-7xl px-8 grid grid-cols-12 gap-16\"}\n           [:div {:class \"col-span-4\"}\n            [:nav {:class \"sticky top-6 divide-y divide-gray-300\"}\n             (stepper/main @steppers)]]\n\n           [:main {:class \"col-span-8\"}\n            [manage->main-area {:current-step @current-step\n                                :config-atom configs\n                                :fx-change-step change-step\n                                :target-name-atom target-name\n                                :target-type-atom target-type\n                                :fx-request-agent-list request-agent-list\n                                :secret-path-env-atom secret-path-env\n                                :agent-tag-atom agent-tag\n                                :fx-get-current-step-infos get-current-step-infos\n                                :agent-token @agent-token\n                                :secrets-host-atom secrets-host}]\n            (divider/main)\n            [:div {:class \"grid grid-cols-2 gap-x-x-large\"}\n             (if (get-step \"back\")\n               (button/secondary {:text \"Back\"\n                                  :outlined true\n                                  :on-click #(go-back-step)})\n               [:div {:class \"col-span-1\"}])\n             (if (and (get-step \"next\") (= (:status (get-current-step-infos)) \"complete\"))\n               (button/primary {:text \"Next\"\n                                :disabled (not= (:status (get-current-step-infos)) \"complete\")\n                                :on-click #(go-next-step)})\n               [:div {:class \"col-span-1\"}])]]])]])))\n"]}