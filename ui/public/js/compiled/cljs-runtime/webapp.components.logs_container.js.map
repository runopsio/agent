{"version":3,"sources":["webapp/components/logs_container.cljs"],"mappings":";;AAOA,kDAAA,lDAAMA,4GAAgBC;AAAtB,AAAA,0FAAA,8XAAA,2CAAA,oHAAA,mFAAA,yDAAA,mFAAA,mDAAA,2CAAA,oDAAA,/YAE2BA;;AAI3B,GAAA,QAAAC,mCAAAC,8CAAAC,6DAAAC;AAAA;AAAA,AAAA,6CAAA,iBAAAC,6BAAA,AAAAC,6CAAA,xIAAUS;IAAVR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,iBAAAC,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,mCAAA,gCAAA,4DAAAJ,wBAAAL,2BAAAE,2BAAAC,2BAAAC,xLAAoBO;;;AACpB,AAAAD,uFAAA,2DAAA,WAA+BE,EAAEC;AAAjC,AAAuCA;;AACvC,AAAAH,uFAAA,2DAAA,WAA+BE,EAAEA;AAAjC,AAAA,0FAAA,gFAAA,mFAAA,qDAAA,kBAAA,mFAAA,iEAAA,mFAAA,8EAAA,2CAAA,oDAAA;;AAKA,AAAAF,uFAAA,0DAAA,WAA+BE,EAAEA;AAAjC,AAAA;;AACA,AAAAF,uFAAA,4DAAA,WAA+BE,EAAEA;AAAjC,AAAA;;AAEA;;;;;6CAAA,7CAAME,kGAIHC,OAAOC;AAJV,AAKE,IAAMC,YAAU,kDAAA,7CAAKC;AAArB,AACE,aAAA,UAAA,vBAAKD;AAAL,AAA0B,8BAAA,mFAAA,uEAAA,2CAAA,uDAAA,2DAAA,sDAAA,pYAACE;;;AAD7B,0FAAA,mDAAA,2CAAA,wDAAA,sSAAA,mFAAA,2DAAA,2CAAA,2XAAA,mFAAA,mDAAA,2CAAA,kDAAA,YAAA,zjCAGG,yBAAA,AAAA,uHAAA,2CAAA,wDAAA,6BAAA,9PAAMH,0FAAOI,8BAAKJ,6XAET,CAAA,yCAAA,0CAAA,0CAGR,iIAAA,KAAA,pHAAU,AAAA,sGAAiBD,cAAQ,gDAAA,hDAACrB,sWAG3B,wQAAA,3NAAK,mHAAA,iGAAA,lMAAM,AAAA,wFAASqB,SAAQ,AAAA,yFAAUA,iEAEjC,+HAAA,KAAA,AAAA,lHAAU,AAAA,oGAAgBA,6CACvC,AAACL,yEAAU,AAAA,wFAASK,QAAQ,AAAA,mFAAOA","names":["webapp.components.logs-container/copy-clipboard","data-clipboard-target","js/webapp","js/webapp.components","js/webapp.components.logs-container","js/webapp.components.logs-container.logs-area","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__31261","cljs.core/MultiFn","cljs.core.symbol","webapp.components.logs-container/logs-area","cljs.core/identity","_","logs","webapp.components.logs-container/container","config","title","clipboard","js/module$node_modules$clipboard$dist$clipboard","re-frame.core/dispatch","webapp.components.headings/h3"],"sourcesContent":["(ns webapp.components.logs-container\n  (:require\n   [re-frame.core :as rf]\n   [\"clipboard\" :as clipboardjs]\n   [webapp.components.headings :as h]))\n\n;; TODO: move it to another component\n(defn copy-clipboard [data-clipboard-target]\n  [:div.copy-to-clipboard.absolute.w-6.h-6.rounded-lg.p-x-small.top-2.right-2.bg-gray-200.cursor-pointer.shadow.box-border.opacity-0.group-hover:opacity-100.transition.z-20\n   {:data-clipboard-target data-clipboard-target}\n   [:figure\n    [:img {:src \"/icons/icon-copy.svg\"}]]])\n\n(defmulti logs-area identity)\n(defmethod logs-area :success [_ logs] logs)\n(defmethod logs-area :loading [_ _]\n  [:div.flex.gap-small\n   [:span \"loading\"]\n   [:figure.w-4\n    [:img.animate-spin {:src \"/icons/icon-loader-circle.svg\"}]]])\n(defmethod logs-area :failure [_ _] \"There was an error to get the logs for this task\")\n(defmethod logs-area :default [_ _] \"No logs to show\")\n\n(defn container\n  \"config is a map with the following fields:\n  :status -> possible values are :success :loading :failure. Anything different will be default to an generic error message\n  :logs -> the actual string with the logs\"\n  [config title]\n  (let [clipboard (new clipboardjs \".copy-to-clipboard\")]\n    (.on clipboard \"success\" #(rf/dispatch [:show-snackbar {:level :success :text \"Text copied to clipboard\"}]))\n    [:div {:class \"h-5/6\"}\n     (when title [h/h3 title {:class \"mb-regular\"}])\n     [:section\n      {:class (str \"relative rounded-lg bg-gray-100 h-full\"\n                   \" font-mono p-regular text-xs mb-regular\"\n                   \" whitespace-pre group\")}\n      (when-not (:not-clipboard? config) (copy-clipboard \"#task-logs\"))\n      [:div\n       {:id \"task-logs\"\n        :class (str (when (:classe config) (:classes config))\n                    \" pb-regular overflow-auto whitespace-pre h-full\"\n                    (when-not (:fixed-height? config) \" max-h-80\"))}\n       (logs-area (:status config) (:logs config))]]]))\n\n"]}