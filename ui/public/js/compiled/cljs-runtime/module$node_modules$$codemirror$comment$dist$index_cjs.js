shadow$provide.module$node_modules$$codemirror$comment$dist$index_cjs=function(global,require,module,exports){function command(f,option){return({state,dispatch})=>{let tr=f(option,state.selection.ranges,state);if(!tr)return!1;dispatch(state.update(tr));return!0}}function getConfig(state,pos=state.selection.main.head){state=state.languageDataAt("commentTokens",pos);return state.length?state[0]:{}}function findBlockComment(state,{open,close},from,to){var textBefore=state.sliceDoc(from-50,from),textAfter=
state.sliceDoc(to,to+50),spaceBefore=/\s*$/.exec(textBefore)[0].length,spaceAfter=/^\s*/.exec(textAfter)[0].length;let beforeOff=textBefore.length-spaceBefore;if(textBefore.slice(beforeOff-open.length,beforeOff)==open&&textAfter.slice(spaceAfter,spaceAfter+close.length)==close)return{open:{pos:from-spaceBefore,margin:spaceBefore&&1},close:{pos:to+spaceAfter,margin:spaceAfter&&1}};100>=to-from?textBefore=state=state.sliceDoc(from,to):(textBefore=state.sliceDoc(from,from+50),state=state.sliceDoc(to-
50,to));textAfter=/^\s*/.exec(textBefore)[0].length;spaceBefore=/\s*$/.exec(state)[0].length;spaceAfter=state.length-spaceBefore-close.length;return textBefore.slice(textAfter,textAfter+open.length)==open&&state.slice(spaceAfter,spaceAfter+close.length)==close?{open:{pos:from+textAfter+open.length,margin:/\s/.test(textBefore.charAt(textAfter+open.length))?1:0},close:{pos:to-spaceBefore-close.length,margin:/\s/.test(state.charAt(spaceAfter-1))?1:0}}:null}function changeBlockComment(option,ranges,state$1){let tokens=
ranges.map(r=>getConfig(state$1,r.from).block);if(!tokens.every(c=>c))return null;let comments=ranges.map((r,i)=>findBlockComment(state$1,tokens[i],r.from,r.to));if(2!=option&&!comments.every(c=>c)){let index=0;return state$1.changeByRange(range=>{let {open,close}=tokens[index++];if(comments[index])return{range};let shift=open.length+1;return{changes:[{from:range.from,insert:open+" "},{from:range.to,insert:" "+close}],range:state$jscomp$0.EditorSelection.range(range.anchor+shift,range.head+shift)}})}if(1!=
option&&comments.some(c=>c)){option=[];for(let i=0,comment;i<comments.length;i++)if(comment=comments[i]){ranges=tokens[i];let {open,close}=comment;option.push({from:open.pos-ranges.open.length,to:open.pos+open.margin},{from:close.pos-close.margin,to:close.pos+ranges.close.length})}return{changes:option}}return null}function changeLineComment(option,ranges,state){var lines=[];let prevLine=-1;for(let {from,to}of ranges){ranges=lines.length;let minIndent=1E9;for(var pos=from;pos<=to;){var line$jscomp$0=
state.doc.lineAt(pos);if(line$jscomp$0.from>prevLine&&(from==to||to>line$jscomp$0.from)){prevLine=line$jscomp$0.from;let token=getConfig(state,pos).line;if(!token)continue;pos=/^\s*/.exec(line$jscomp$0.text)[0].length;let empty=pos==line$jscomp$0.length,comment=line$jscomp$0.text.slice(pos,pos+token.length)==token?pos:-1;pos<line$jscomp$0.text.length&&pos<minIndent&&(minIndent=pos);lines.push({line:line$jscomp$0,comment,token,indent:pos,empty,single:!1})}pos=line$jscomp$0.to+1}if(1E9>minIndent)for(line$jscomp$0=
ranges;line$jscomp$0<lines.length;line$jscomp$0++)lines[line$jscomp$0].indent<lines[line$jscomp$0].line.text.length&&(lines[line$jscomp$0].indent=minIndent);lines.length==ranges+1&&(lines[ranges].single=!0)}if(2!=option&&lines.some(l=>0>l.comment&&(!l.empty||l.single))){option=[];for(let {line,token,indent,empty,single}of lines)!single&&empty||option.push({from:line.from+indent,insert:token+" "});lines=state.changes(option);return{changes:lines,selection:state.selection.map(lines,1)}}if(1!=option&&
lines.some(l=>0<=l.comment)){state=[];for(let {line,comment,token}of lines)0<=comment&&(lines=line.from+comment,option=lines+token.length," "==line.text[option-line.from]&&option++,state.push({from:lines,to:option}));return{changes:state}}return null}Object.defineProperty(exports,"__esModule",{value:!0});var state$jscomp$0=require("module$node_modules$$codemirror$state$dist$index_cjs");global=target=>{let config=getConfig(target.state);return config.line?toggleLineComment(target):config.block?toggleBlockComment(target):
!1};const toggleLineComment=command(changeLineComment,0);require=command(changeLineComment,1);module=command(changeLineComment,2);const toggleBlockComment=command(changeBlockComment,0),blockComment=command(changeBlockComment,1),blockUncomment=command(changeBlockComment,2),commentKeymap=[{key:"Mod-/",run:global},{key:"Alt-A",run:toggleBlockComment}];exports.blockComment=blockComment;exports.blockUncomment=blockUncomment;exports.commentKeymap=commentKeymap;exports.lineComment=require;exports.lineUncomment=
module;exports.toggleBlockComment=toggleBlockComment;exports.toggleComment=global;exports.toggleLineComment=toggleLineComment}
//# sourceMappingURL=module$node_modules$$codemirror$comment$dist$index_cjs.js.map
