shadow$provide.module$node_modules$$sentry$browser$dist$parsers=function(global,require,module,exports){function exceptionFromStacktrace(stacktrace){var frames=prepareFramesForEvent(stacktrace.stack);stacktrace={type:stacktrace.name,value:stacktrace.message};frames&&frames.length&&(stacktrace.stacktrace={frames});void 0===stacktrace.type&&""===stacktrace.value&&(stacktrace.value="Unrecoverable error caught");return stacktrace}function prepareFramesForEvent(stack){if(!stack||!stack.length)return[];
var localStack=stack;stack=localStack[0].func||"";var lastFrameFunction=localStack[localStack.length-1].func||"";if(-1!==stack.indexOf("captureMessage")||-1!==stack.indexOf("captureException"))localStack=localStack.slice(1);-1!==lastFrameFunction.indexOf("sentryWrapped")&&(localStack=localStack.slice(0,-1));return localStack.slice(0,50).map(function(frame){return{colno:null===frame.column?void 0:frame.column,filename:frame.url||localStack[0].url,function:frame.func||"?",in_app:!0,lineno:null===frame.line?
void 0:frame.line}}).reverse()}Object.defineProperty(exports,"__esModule",{value:!0});var utils_1=require("module$node_modules$$sentry$utils$dist$index"),tracekit_1=require("module$node_modules$$sentry$browser$dist$tracekit");exports.exceptionFromStacktrace=exceptionFromStacktrace;exports.eventFromPlainObject=function(exception,syntheticException,rejection){exception={exception:{values:[{type:utils_1.isEvent(exception)?exception.constructor.name:rejection?"UnhandledRejection":"Error",value:"Non-Error "+
(rejection?"promise rejection":"exception")+" captured with keys: "+utils_1.extractExceptionKeysForMessage(exception)}]},extra:{__serialized__:utils_1.normalizeToSize(exception)}};syntheticException&&(syntheticException=tracekit_1.computeStackTrace(syntheticException),syntheticException=prepareFramesForEvent(syntheticException.stack),exception.stacktrace={frames:syntheticException});return exception};exports.eventFromStacktrace=function(stacktrace){return{exception:{values:[exceptionFromStacktrace(stacktrace)]}}};
exports.prepareFramesForEvent=prepareFramesForEvent}
//# sourceMappingURL=module$node_modules$$sentry$browser$dist$parsers.js.map
