{"version":3,"sources":["webapp/formatters.cljs"],"mappings":";AAGA;;;yCAAA,zCAAMA,0FAEHC;AAFH,AAGE,GAAI,AAACC,uBAAOD;AAAZ;;AACI,qGAAA,9FAACE,mDACA,6BAAA,SAAA,tCAACC,uBAAeH;;;AAGvB;;;yCAAA,zCAAMI,0FAEHJ;AAFH,AAGE,yDAAA,lDAACK,uDAAiBL;;AAEpB,iDAAA,jDAAMM,0GACHC;AADH,AAEE,qCAAA,KAAA,nCAACJ,uBAAeI;;AAElB,mCAAA,nCAAMC,8EACHC;AADH,AAEE,gEAAA,zDAACP,mDAAaO;;AAEhB;;;;;;;;;6BAAA,7BAAMC,kEAQHC;AARH,AASE,YAAA,mFAAA,2CAAA,qDAAA,SAAA,wDAAA,KAAA,gEAAA,YAAA,2CAAA,qDAAA,SAAA,wDAAA,OAAA,gEAAA,aAAA,2CAAA,qDAAA,OAAA,wDAAA,QAAA,gEAAA,eAAA,2CAAA,qDAAA,MAAA,wDAAA,SAAA,gEAAA,gBAAA,2CAAA,qDAAA,OAAA,wDAAA,UAAA,gEAAA,iBAAA,2CAAA,qDAAA,QAAA,wDAAA,WAAA,gEAAA,kBAAA,2CAAA,qDAAA,OAAA,wDAAA,iBAAA,gEAAA,txDAAMC;IAOAC,KAAG,mFAAA,lFAAG,AAAQC,WAAQ,mDAAA,NAAKH;IAC3BI,MAAI,0BAAA,zBAAG,AAAU,KAAKD;IACtBE,OAAK,CAAGD,MAAIF;AATlB,AAUE,GAAI,QAAA,PAAGG;AAAP;;AAEE,IAAMC,OAAK,AAACC,gBAAM,mDAAA,WAAAC,9DAACC;AAAD,AAAa,SAAI,CAAIJ,QAAK,AAAA,sFAAAG,wBACT,AAACE,cAAI,AAAA,sFAAAF;GACVP;AAF9B,AAMM,OAAA,WAAAW;AAAA,AAAE,oDAAAA,kBAAA,gLAAA,hIAAW,AAAA,mFAAON,OAAM,4BAAA,AAAA,IAAA,9BAAM,CAAAM,mBAAA;eAHhC,CAAGP,OAAK,AAAA,8FAAYC,jHACpBK,DAEA,CAAA,2HAAA","names":["webapp.formatters/comma-string-to-list","roles","cljs.core/empty?","clojure.string.split","clojure.string/replace","webapp.formatters/list-to-comma-string","clojure.string.join","webapp.formatters/replace-empty-space->dash","string","webapp.formatters/split-by-colon","value","webapp.formatters/time-ago","time","units","ts","js/Date","now","diff","unit","cljs.core/first","p1__33387#","cljs.core.drop_while","cljs.core/not","Math/floor","p1__33388#"],"sourcesContent":["(ns webapp.formatters\n  (:require [clojure.string :as string]))\n\n(defn comma-string-to-list\n  \"Transform a comma separated string to list\"\n  [roles]\n  (if (empty? roles) []\n      (string/split\n       (string/replace roles #\", | , \" \",\")\n       #\",\")))\n\n(defn list-to-comma-string\n  \"Transform a list into a comma separated string\"\n  [roles]\n  (string/join \", \" roles))\n\n(defn replace-empty-space->dash\n  [string]\n  (string/replace string #\"\\s\" \"-\"))\n\n(defn split-by-colon\n  [value]\n  (string/split value #\":\"))\n\n(defn time-ago\n  \"It receives our Runops API date format, a simple string containing YYYY/MM/DD HH:MM\n  and parses to a readable string containing `x time ago`, for instance:\n  - 10 minutes ago\n  - 1 hour ago\n\n  Important: `time` parameters will always be assumed as UTC timezone, so make sure you're passing a UTC timezone date formatted as `YYYY/MM/DD HH:MM` in here.\n  \"\n  [time]\n  (let [units [{:name \"second\" :limit 60 :in-second 1}\n               {:name \"minute\" :limit 3600 :in-second 60}\n               {:name \"hour\" :limit 86400 :in-second 3600}\n               {:name \"day\" :limit 604800 :in-second 86400}\n               {:name \"week\" :limit 2629743 :in-second 604800}\n               {:name \"month\" :limit 31556926 :in-second 2629743}\n               {:name \"year\" :limit 99999999999999 :in-second 31556926}]\n        ts (/ (.parse js/Date (str time \" UTC\")) 1000)\n        now (/ (.getTime (new js/Date)) 1000)\n        diff (- now ts)]\n    (if (< diff 30)\n      \"just now\"\n      (let [unit (first (drop-while #(or (>= diff (:limit %))\n                                         (not (:limit %)))\n                                    units))]\n        (-> (/ diff (:in-second unit))\n            Math/floor\n            int\n            (#(str % \" \" (:name unit) (when (> % 1) \"s\") \" ago\")))))))\n"]}