{
"version":3,
"file":"module$node_modules$$sentry$core$dist$api.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@sentry/core/dist/api.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$core$dist$api\"] = function(global,require,module,exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"@sentry/utils\");\nvar SENTRY_API_VERSION = '7';\n/**\n * Helper class to provide urls, headers and metadata that can be used to form\n * different types of requests to Sentry endpoints.\n * Supports both envelopes and regular event requests.\n **/\nvar API = /** @class */ (function () {\n    /** Create a new instance of API */\n    function API(dsn, metadata, tunnel) {\n        if (metadata === void 0) { metadata = {}; }\n        this.dsn = dsn;\n        this._dsnObject = new utils_1.Dsn(dsn);\n        this.metadata = metadata;\n        this._tunnel = tunnel;\n    }\n    /** Returns the Dsn object. */\n    API.prototype.getDsn = function () {\n        return this._dsnObject;\n    };\n    /** Does this transport force envelopes? */\n    API.prototype.forceEnvelope = function () {\n        return !!this._tunnel;\n    };\n    /** Returns the prefix to construct Sentry ingestion API endpoints. */\n    API.prototype.getBaseApiEndpoint = function () {\n        var dsn = this.getDsn();\n        var protocol = dsn.protocol ? dsn.protocol + \":\" : '';\n        var port = dsn.port ? \":\" + dsn.port : '';\n        return protocol + \"//\" + dsn.host + port + (dsn.path ? \"/\" + dsn.path : '') + \"/api/\";\n    };\n    /** Returns the store endpoint URL. */\n    API.prototype.getStoreEndpoint = function () {\n        return this._getIngestEndpoint('store');\n    };\n    /**\n     * Returns the store endpoint URL with auth in the query string.\n     *\n     * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n     */\n    API.prototype.getStoreEndpointWithUrlEncodedAuth = function () {\n        return this.getStoreEndpoint() + \"?\" + this._encodedAuth();\n    };\n    /**\n     * Returns the envelope endpoint URL with auth in the query string.\n     *\n     * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n     */\n    API.prototype.getEnvelopeEndpointWithUrlEncodedAuth = function () {\n        if (this.forceEnvelope()) {\n            return this._tunnel;\n        }\n        return this._getEnvelopeEndpoint() + \"?\" + this._encodedAuth();\n    };\n    /** Returns only the path component for the store endpoint. */\n    API.prototype.getStoreEndpointPath = function () {\n        var dsn = this.getDsn();\n        return (dsn.path ? \"/\" + dsn.path : '') + \"/api/\" + dsn.projectId + \"/store/\";\n    };\n    /**\n     * Returns an object that can be used in request headers.\n     * This is needed for node and the old /store endpoint in sentry\n     */\n    API.prototype.getRequestHeaders = function (clientName, clientVersion) {\n        // CHANGE THIS to use metadata but keep clientName and clientVersion compatible\n        var dsn = this.getDsn();\n        var header = [\"Sentry sentry_version=\" + SENTRY_API_VERSION];\n        header.push(\"sentry_client=\" + clientName + \"/\" + clientVersion);\n        header.push(\"sentry_key=\" + dsn.publicKey);\n        if (dsn.pass) {\n            header.push(\"sentry_secret=\" + dsn.pass);\n        }\n        return {\n            'Content-Type': 'application/json',\n            'X-Sentry-Auth': header.join(', '),\n        };\n    };\n    /** Returns the url to the report dialog endpoint. */\n    API.prototype.getReportDialogEndpoint = function (dialogOptions) {\n        if (dialogOptions === void 0) { dialogOptions = {}; }\n        var dsn = this.getDsn();\n        var endpoint = this.getBaseApiEndpoint() + \"embed/error-page/\";\n        var encodedOptions = [];\n        encodedOptions.push(\"dsn=\" + dsn.toString());\n        for (var key in dialogOptions) {\n            if (key === 'dsn') {\n                continue;\n            }\n            if (key === 'user') {\n                if (!dialogOptions.user) {\n                    continue;\n                }\n                if (dialogOptions.user.name) {\n                    encodedOptions.push(\"name=\" + encodeURIComponent(dialogOptions.user.name));\n                }\n                if (dialogOptions.user.email) {\n                    encodedOptions.push(\"email=\" + encodeURIComponent(dialogOptions.user.email));\n                }\n            }\n            else {\n                encodedOptions.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(dialogOptions[key]));\n            }\n        }\n        if (encodedOptions.length) {\n            return endpoint + \"?\" + encodedOptions.join('&');\n        }\n        return endpoint;\n    };\n    /** Returns the envelope endpoint URL. */\n    API.prototype._getEnvelopeEndpoint = function () {\n        return this._getIngestEndpoint('envelope');\n    };\n    /** Returns the ingest API endpoint for target. */\n    API.prototype._getIngestEndpoint = function (target) {\n        if (this._tunnel) {\n            return this._tunnel;\n        }\n        var base = this.getBaseApiEndpoint();\n        var dsn = this.getDsn();\n        return \"\" + base + dsn.projectId + \"/\" + target + \"/\";\n    };\n    /** Returns a URL-encoded string with auth config suitable for a query string. */\n    API.prototype._encodedAuth = function () {\n        var dsn = this.getDsn();\n        var auth = {\n            // We send only the minimum set of required information. See\n            // https://github.com/getsentry/sentry-javascript/issues/2572.\n            sentry_key: dsn.publicKey,\n            sentry_version: SENTRY_API_VERSION,\n        };\n        return utils_1.urlEncode(auth);\n    };\n    return API;\n}());\nexports.API = API;\n//# sourceMappingURL=api.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","utils_1","API","dsn","metadata","tunnel","_dsnObject","Dsn","_tunnel","prototype","getDsn","API.prototype.getDsn","forceEnvelope","API.prototype.forceEnvelope","getBaseApiEndpoint","API.prototype.getBaseApiEndpoint","protocol","host","port","path","getStoreEndpoint","API.prototype.getStoreEndpoint","_getIngestEndpoint","getStoreEndpointWithUrlEncodedAuth","API.prototype.getStoreEndpointWithUrlEncodedAuth","_encodedAuth","getEnvelopeEndpointWithUrlEncodedAuth","API.prototype.getEnvelopeEndpointWithUrlEncodedAuth","_getEnvelopeEndpoint","getStoreEndpointPath","API.prototype.getStoreEndpointPath","projectId","getRequestHeaders","API.prototype.getRequestHeaders","clientName","clientVersion","header","push","publicKey","pass","join","getReportDialogEndpoint","API.prototype.getReportDialogEndpoint","dialogOptions","endpoint","encodedOptions","toString","key","user","name","encodeURIComponent","email","length","API.prototype._getEnvelopeEndpoint","API.prototype._getIngestEndpoint","target","base","API.prototype._encodedAuth","auth","sentry_key","sentry_version","SENTRY_API_VERSION","urlEncode"]
}
