{"version":3,"sources":["webapp/tasks/views/tasks_logs_container.cljs"],"mappings":"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","names":["webapp.tasks.views.tasks-logs-container/log-view","reagent.core.atom","webapp.tasks.views.tasks-logs-container/transform-logs->matrix","task-logs","p1__31465#","cljs.core.map","clojure.string.split","webapp.tasks.views.tasks-logs-container/transform-logs->csv","clojure.string/replace","webapp.tasks.views.tasks-logs-container/open-logs","task-id","p1__31473#","re-frame.core/dispatch","js/window","webapp.tasks.views.tasks-logs-container/item-dropdown","id","logs","target-type","cljs.core/some","webapp.utilities/download-string-as-csv","p__31475","p__31476","map__31477","cljs.core/--destructure-map","cljs.core.get","map__31478","p1__31474#","webapp.tasks.views.tasks-logs-container/tab-container","task-logs-heads","task-logs-body","fixed-height?","status","classes","webapp.components.tabs/tabs","cljs.core/reset!","G__31479","cljs.core/deref","js/Error","webapp.components.data-grid-table/main","webapp.components.logs-container/container","js/webapp","js/webapp.tasks","js/webapp.tasks.views","js/webapp.tasks.views.tasks-logs-container","js/webapp.tasks.views.tasks-logs-container.logs-view","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","fexpr__31480","cljs.core/MultiFn","cljs.core.symbol","webapp.tasks.views.tasks-logs-container/logs-view","cljs.core/identity","p__31481","map__31482","_","target","popover-state","webapp.components.popover/right","p__31489","map__31490","webapp.tasks.views.tasks-logs-container/main","p__31500","map__31501","log-status","task-status","task-logs-transformed","cljs.core/first","cljs.core/next","cljs.core._EQ_","G__31510"],"sourcesContent":["(ns webapp.tasks.views.tasks-logs-container\n  (:require [clojure.string :as str]\n            [re-frame.core :as rf]\n            [reagent.core :as r]\n            [webapp.components.data-grid-table :as data-grid-table]\n            [webapp.components.logs-container :as logs]\n            [webapp.components.popover :as popover]\n            [webapp.components.tabs :as tabs]\n            [webapp.tasks.events :as events]\n            [webapp.utilities :as utils]))\n\n(def log-view (r/atom \"Table\"))\n\n(defn- transform-logs->matrix\n  [task-logs]\n  (map #(str/split % #\"\\t\") (str/split task-logs #\"\\n\")))\n\n(defn transform-logs->csv\n  [task-logs]\n  (str/replace task-logs #\"\\t\" \",\"))\n\n(defn- open-logs [task-id]\n  (rf/dispatch [::events/get-task-logs-url task-id #(.focus (.open js/window (:logs_url %) \"_blank\"))]))\n\n(defn item-dropdown\n  [id logs target-type]\n  [:ul {:class \"text-right\" :style {}}\n   [:li {:class \"border-b py-small px-regular\"}\n    [:a {:class \"text-sm\"\n         :on-click #(open-logs id)\n         :href \"#\"}\n     \"Open logs in a new tab\"]]\n   (when (some #{target-type} '(\"mysql\" \"postgres\" \"sql-server\"))\n     [:li {:class \"py-small px-regular\"}\n      [:a {:class \"text-sm\"\n           :href \"#\"\n           :on-click #(utils/download-string-as-csv (transform-logs->csv logs) \"download\")}\n       \"Download logs in CSV\"]])])\n\n(defn tab-container\n  [{:keys [task-logs-heads task-logs-body]} {:keys [fixed-height? status classes logs]}]\n  [:<>\n   [tabs/tabs {:on-change #(reset! log-view %)\n               :tabs [\"Table\" \"Plain text\"]}]\n   (case @log-view\n     \"Table\" [:div\n              {:class classes}\n              [data-grid-table/main task-logs-heads task-logs-body] ]\n     \"Plain text\" [logs/container {:fixed-height? fixed-height? :status status :logs logs :classes classes}])])\n\n(defmulti logs-view identity)\n(defmethod logs-view :sql\n  [_ {:keys [task-id task-logs-heads task-logs-body logs target status fixed-height? classes]} popover-state]\n  [:div {:class \"relative h-full\"}\n   [:div {:class \"absolute right-0 top-4\"}\n    [:figure {:class \"w-5 cursor-pointer\" :on-click #(reset! popover-state true)}\n     [:img {:src \"/icons/icon-dots-vertical.svg\"}]]\n    (popover/right {:open @popover-state\n                    :component (item-dropdown task-id logs target)\n                    :on-click-outside #(reset! popover-state false)})]\n   [tab-container {:task-logs-heads task-logs-heads :task-logs-body task-logs-body} {:fixed-height? fixed-height? :status status :logs logs :classes classes}]])\n\n(defmethod logs-view :not-sql\n  [_ {:keys [task-id logs target status fixed-height? classes]} popover-state]\n  [:div {:class \"relative pt-7\"}\n   [:div {:class \"absolute right-0 top-0\"}\n    [:figure {:class \"w-5 cursor-pointer\" :on-click #(reset! popover-state true)}\n     [:img {:src \"/icons/icon-dots-vertical.svg\"}]]\n    (popover/right {:open @popover-state\n                    :component (item-dropdown task-id logs target)\n                    :on-click-outside #(reset! popover-state false)})]\n   [logs/container {:fixed-height? fixed-height? :status status :logs logs :classes classes}]])\n\n(defn main\n  [_]\n  (let [popover-state (r/atom false)]\n    (fn [{:keys [logs log-status task-status task-id target classes fixed-height?]}]\n      (let [task-logs-transformed (transform-logs->matrix logs)\n            task-logs-heads (first task-logs-transformed)\n            task-logs-body (next task-logs-transformed)]\n        (reset! log-view \"Table\")\n        (if (and (= task-status \"success\") (= log-status :success))\n          (case target\n            \"mysql\" [logs-view :sql {:task-id task-id :task-logs-heads task-logs-heads :task-logs-body task-logs-body :target target :fixed-height? fixed-height? :status log-status :logs logs :classes classes} popover-state]\n            \"postgres\" [logs-view :sql {:task-id task-id :task-logs-heads task-logs-heads :task-logs-body task-logs-body :target target :fixed-height? fixed-height? :status log-status :logs logs :classes classes} popover-state]\n            \"sql-server\" [logs-view :sql {:task-id task-id :task-logs-heads task-logs-heads :task-logs-body task-logs-body :target target :fixed-height? fixed-height? :status log-status :logs logs :classes classes} popover-state]\n            [logs-view :not-sql {:task-id task-id :target target :fixed-height? fixed-height? :status log-status :logs logs :classes classes} popover-state])\n          [logs-view :not-sql {:task-id task-id :target target :fixed-height? fixed-height? :status log-status :logs logs :classes classes} popover-state])))))\n\n\n"]}