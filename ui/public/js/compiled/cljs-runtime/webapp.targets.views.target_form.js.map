{"version":3,"sources":["webapp/targets/views/target_form.cljs"],"mappings":"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","names":["webapp.targets.views.target-form/section","head","text","child","webapp.components.divider/main","webapp.components.headings/h3","js/webapp","js/webapp.targets","js/webapp.targets.views","js/webapp.targets.views.target-form","js/webapp.targets.views.target-form.header-text","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__31002","cljs.core/MultiFn","cljs.core.symbol","webapp.targets.views.target-form/header-text","cljs.core/identity","_","js/webapp.targets.views.target-form.action-button","fexpr__31003","webapp.targets.views.target-form/action-button","js/webapp.targets.views.target-form.dispatch-form","fexpr__31013","webapp.targets.views.target-form/dispatch-form","form-fields","re-frame.core/dispatch","webapp.targets.views.target-form/get-config-keys","key","webapp.targets.constants/target-configs-required","webapp.targets.views.target-form/add-new-configs","config-map","config-key","config-value","cljs.core/empty?","cljs.core.swap_BANG_","cljs.core/conj","p__31021","map__31024","cljs.core/--destructure-map","webapp.targets.views.target-form/config->inputs","value","index","config","key-val","reagent.core.atom","value-val","save","k","v","cljs.core/assoc-in","p1__31019#","cljs.core/deref","p1__31020#","webapp.components.forms/input","cljs.core/reset!","webapp.targets.views.target-form/config-inputs-for","cljs.core.doall","iter__4652__auto__","s__31034","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__31036","cljs.core/chunk-buffer","i__31035","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__31033","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.range","webapp.targets.views.target-form/config->json-stringify","configs","cljs.core.filter","p__31053","map__31054","clojure.string/blank?","cljs.core.map","p__31047","map__31048","cljs.core.reduce","cljs.core/into","cljs.core/clj->js","js/JSON","webapp.targets.views.target-form/json-stringify->config","cljs.core.js__GT_clj","cljs.core.mapv","p__31061","vec__31062","cljs.core.nth","webapp.targets.views.target-form/form","target","name","or__4253__auto__","description","target-type","review-type","channel-name","reviewers","tags","redact","secret-provider","secret-path","groups","webapp.formatters/list-to-comma-string","secrets-host","cljs.core._EQ_","change-target-type","cljs.core.keyword","agent-token","form-type","webapp.http.runops-api/request","res","webapp.components.headings/h2","e","groups-list","webapp.formatters/comma-string-to-list","configurations","cljs.core.conj","cljs.core.merge","G__31080","js/Error","p1__31066#","p1__31068#","webapp.formatters/replace-empty-space->dash","p1__31067#","webapp.components.forms/select","webapp.targets.constants/targets-types-list","webapp.components.forms/textarea","p1__31069#","webapp.components.headings/h4","p1__31070#","p1__31071#","p1__31072#","cljs.core.not_EQ_","p1__31073#","webapp.targets.views.secrets-management/main","p1__31074#","webapp.components.button/secondary","webapp.components.button/primary","webapp.targets.views.target-form/main","re_frame.core.subscribe","G__31085","cljs.core/Keyword","cljs.core/chunk-first"],"sourcesContent":["(ns webapp.targets.views.target-form\n  (:require [clojure.string :as cs]\n            [re-frame.core :as rf]\n            [reagent.core :as r]\n            [webapp.components.button :as button]\n            [webapp.components.divider :as divider]\n            [webapp.components.forms :as forms]\n            [webapp.components.headings :as h]\n            [webapp.formatters :as f]\n            [webapp.http.runops-api :as runops-api]\n            [webapp.subs :as subs]\n            [webapp.targets.constants :as constants]\n            [webapp.targets.events :as events]\n            [webapp.targets.views.secrets-management :as secrets-management]))\n\n(defn section [head text child]\n  [:section\n   [divider/main]\n   [:div.grid.grid-cols-3.gap-large.my-large\n    [:div.col-span-1\n     [h/h3 head {:class \"text-gray-800\"}]\n     [:small.block.mb-regular.text-gray-600 text]]\n    [:div.col-span-2\n     child]]])\n\n(defmulti header-text identity)\n(defmethod header-text :update [_] \"Update target\")\n(defmethod header-text :default [_] \"Create a new Target\")\n\n(defmulti action-button identity)\n(defmethod action-button :update [_] \"Update\")\n(defmethod action-button :default [_] \"Create\")\n\n(defmulti dispatch-form identity)\n(defmethod dispatch-form :update\n  [_ form-fields]\n  (rf/dispatch [::events/update-target form-fields]))\n(defmethod dispatch-form :create\n  [_ form-fields]\n  (rf/dispatch [::events/create-target form-fields]))\n\n(defn get-config-keys\n  [key]\n  (get constants/target-configs-required key))\n\n(defn add-new-configs\n  [config-map config-key config-value]\n\n  (if-not (or (empty? config-key) (empty? config-value))\n    (swap! config-map conj {:key config-key :value config-value})\n    nil))\n\n(defn config->inputs\n  [{:keys [key value]} index config]\n  (let [key-val (r/atom key)\n        value-val (r/atom value)\n        save (fn [k v] (swap! config assoc-in [index k] v))]\n    (fn []\n      [:<>\n       [forms/input {:classes \"whitespace-pre overflow-x\"\n                     :on-change #(reset! key-val (-> % .-target .-value))\n                     :on-blur #(save :key @key-val)\n                     :value @key-val}]\n       [forms/input {:classes \"whitespace-pre overflow-x\"\n                     :on-change #(reset! value-val (-> % .-target .-value))\n                     :on-blur #(save :value @value-val)\n                     :type \"password\"\n                     :value @value-val}]])))\n\n(defn config-inputs-for\n  [config]\n  (fn []\n    (doall\n     (for [index (range (count @config))]\n       ^{:key (get @config index)} [config->inputs (get @config index) index config]))))\n\n(defn config->json-stringify\n  [configs]\n  (->> configs\n       (filter (fn [{:keys [key value]}]\n                 (not (or (cs/blank? key) (cs/blank? value)))))\n       (map (fn [{:keys [key value]}] {key value}))\n       (reduce into {})\n       (clj->js)\n       (.stringify js/JSON)))\n\n(defn json-stringify->config\n  [configs]\n  (if (or (cs/blank? configs) (nil? configs))\n    {}\n    (->> configs\n         (.parse js/JSON)\n         (js->clj)\n         (mapv (fn [[key value]] {:key key :value value})))))\n\n(defn form\n  \"Receives two arguments.\n  target -> the target to updated. You can send it as nil when form-type is :create\n  form-type -> :update or :create; when :update, it's required to send target\"\n  [target _]\n  (let [name (r/atom (or (:name target) \"\"))\n        description (r/atom (or (:message target) \"\"))\n        target-type (r/atom (or (:type target) \"bash\"))\n        review-type (r/atom (or (:review_type target) \"none\"))\n        channel-name (r/atom (or (:channel_name target) \"\"))\n        reviewers (r/atom (or (:reviewers target) \"\"))\n        tags (r/atom (or (:tags target) \"\"))\n        redact (r/atom (or (:redact target) \"all\"))\n        secret-provider (r/atom (or (:secret_provider target) \"\"))\n        secret-path (r/atom (or (:secret_path target) \"ENV_CONFIG\"))\n        config (r/atom (if (empty? (:config target)) (get-config-keys :bash) (json-stringify->config (:config target))))\n        config-key (r/atom (or (:config-key target) \"\"))\n        config-value (r/atom (or (:config-value target) \"\"))\n        groups (r/atom (or (f/list-to-comma-string (:groups target)) \"\"))\n        secrets-host (r/atom (if (= \"runops\" (:secret_provider target)) \"runops\" \"self\"))\n        change-target-type (fn [value]\n                             (reset! target-type value)\n                             (reset! config (get-config-keys (keyword value))))\n        agent-token (r/atom \"\")]\n\n    (fn [_ form-type]\n      (runops-api/request {:method \"GET\"\n                           :uri \"/v1/orgs\"\n                           :on-failure (fn [_]\n                                         (reset! agent-token \"\"))\n                           :on-success (fn [res]\n                                         (reset! agent-token (:agents_token res)))})\n      [:div\n       [h/h2 (header-text form-type) {:class \"mb-4\"}]\n       [:form.mb-regular\n        {:on-submit (fn [e]\n                      (.preventDefault e)\n                      (let [groups-list (f/comma-string-to-list @groups)\n                            configurations (conj @config {:key @config-key :value @config-value})]\n                        (dispatch-form form-type\n                                       (merge {:name @name\n                                               :message @description\n                                               :type @target-type\n                                               :review_type @review-type\n                                               :channel_name @channel-name\n                                               :reviewers @reviewers\n                                               :tags (if (= @tags \"\") nil @tags)\n                                               :redact @redact\n                                               :groups (if (empty? groups-list) nil groups-list)}\n                                              (case @secrets-host\n                                                \"runops\" {:secret_provider \"runops\"\n                                                          :config (config->json-stringify configurations)}\n                                                \"self\" {:secret_provider @secret-provider\n                                                        :secret_path @secret-path\n                                                        :config nil})))))}\n        (section\n         \"Informations\"\n         \"General informations of your target\"\n         [:div.grid.grid-cols-4.gap-x-regular\n          [:div.col-span-2\n           [forms/input {:label \"Name\"\n                         :on-change #(reset! name (f/replace-empty-space->dash (-> % .-target .-value)))\n                         :placeholder \"Target name\"\n                         :required true\n                         :disabled (= form-type :update)\n                         :value @name}]]\n\n          [:div.col-span-2\n           (forms/select {:label \"Target type\"\n                          :on-change #(change-target-type (-> % .-target .-value))\n                          :selected @target-type\n                          :required true\n                          :options constants/targets-types-list})]\n\n          [:div.col-span-3\n           [forms/textarea {:label \"Description\"\n                            :on-change #(reset! description (-> % .-target .-value))\n                            :placeholder \"Add a description to your target\"\n                            :rows 2\n                            :value @description}]]])\n\n        (section\n         \"Permission management\"\n         \"Management who can access the target and the behavior of task's review in this target\"\n\n         [:<>\n          [:div.grid.grid-cols-2.gap-x-regular.mb-regular\n           [:div.col-span-2.mb-regular\n            [h/h4 \"Access control\"]]\n\n           [:div.col-span-1\n            [forms/input {:label \"Groups\"\n                          :on-change #(reset! groups (-> % .-target .-value))\n                          :placeholder \"Comma separated string\"\n                          :value @groups}]]]\n\n          [:div.grid.grid-cols-2.gap-x-regular.mb-regular\n           [:div.col-span-2.mb-regular\n            [h/h4 \"Review control\"]]\n\n           (forms/select {:label \"Who approves\"\n                          :on-change #(do\n                                        (reset! review-type (-> % .-target .-value))\n                                        (reset! reviewers \"\")\n                                        (reset! channel-name \"\"))\n                          :selected @review-type\n                          :options [{:value \"none\" :text \"none\"}\n                                    {:value \"anyone\" :text \"anyone\"}\n                                    {:value \"team\" :text \"groups\"}]})\n\n           (when (= @review-type \"team\")\n             [forms/input {:label \"Reviewer's groups\"\n                           :on-change #(reset! reviewers (-> % .-target .-value))\n                           :placeholder \"Comma separated string\"\n                           :value @reviewers}])\n\n           (when (not= @review-type \"none\")\n             [forms/input {:label \"Slack channel name\"\n                           :on-change #(reset! channel-name (-> % .-target .-value))\n                           :placeholder \"Slack channel name\"\n                           :value @channel-name}])]\n\n          [:div.grid.grid-cols-2.gap-x-regular\n           [:div.col-span-2.mb-regular\n            [h/h4 \"Data control\"]]\n\n           [:div.col-span-1\n            (forms/select {:label \"Redact sensitive data\"\n                           :on-change #(reset! redact (-> % .-target .-value))\n                           :selected @redact\n                           :options [{:value \"all\" :text \"all\"}\n                                     {:value \"none\" :text \"none\"}]})]]])\n\n        (section\n         \"Secrets management\"\n         \"Choose your host and set your secret's configurations\"\n         [secrets-management/main\n          {:on-change->secrets-host-ui (fn [value] (reset! secrets-host value))\n           :on-change->secret-provider (fn [value] (reset! secret-provider value))\n           :on-change->secret-path (fn [value] (reset! secret-path value))\n           :on-change->config-key (fn [value] (reset! config-key value))\n           :on-change->config-value (fn [value] (reset! config-value value))\n           :on-click->add-more #(do\n                                  (add-new-configs config @config-key @config-value)\n                                  (reset! config-value \"\")\n                                  (reset! config-key \"\"))\n           :secrets-host-ui @secrets-host\n           :secret-provider @secret-provider\n           :secret-provider-disabled? false\n           :secret-path @secret-path\n           :secret-path-disabled? false\n           :config-key @config-key\n           :config-value @config-value\n           :configs @config\n           :component->config-inputs (config-inputs-for config)\n           :agent-token @agent-token}])\n\n        (section\n         \"Agent tags\"\n         \"Set your agent tags\"\n         [:div.grid.grid-cols-2\n          [:div.col-span-1\n           [forms/input {:label \"Tags\"\n                         :on-change #(reset! tags (-> % .-target .-value))\n                         :placeholder \"Comma separated values\"\n                         :value @tags}]]])\n\n        [section\n         \"\"\n         \"\"\n         [:div.grid.grid-cols-2.gap-x-regular\n          (button/secondary {:text \"Back\"\n                             :on-click #(rf/dispatch [:navigate :targets])})\n          (button/primary {:text (action-button form-type)\n                           :type \"submit\"})]]]])))\n\n(defn main [form-type]\n  (let [target @(rf/subscribe [::subs/updating-target])]\n    (case form-type\n      :create [form nil :create]\n      :update (if (true? (:loading target))\n                nil\n                [form (:data target) :update]))))\n"]}