{"version":3,"sources":["webapp/tasks/views/new_task/target_information_tree.cljs"],"mappings":"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","names":["webapp.tasks.views.new-task.target-information-tree/get-schema-query","webapp.tasks.views.new-task.target-information-tree/field-type-tree","type","webapp.tasks.views.new-task.target-information-tree/fields-tree","fields","dropdown-status","reagent.core.atom","cljs.core.doall","iter__4652__auto__","s__31635","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__31637","cljs.core/chunk-buffer","i__31636","vec__31638","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__31634","cljs.core/chunk-rest","vec__31646","cljs.core/first","cljs.core/cons","cljs.core/rest","field","field-type","cljs.core.swap_BANG_","cljs.core/assoc-in","cljs.core._EQ_","cljs.core/deref","cljs.core.get","cljs.core.not_EQ_","cljs.core.map","cljs.core/key","webapp.tasks.views.new-task.target-information-tree/tables-tree","tables","s__31665","b__31667","i__31666","vec__31669","iter__31664","vec__31672","table","cljs.core.into","cljs.core/sorted-map","webapp.tasks.views.new-task.target-information-tree/databases-tree","_","schema","s__31676","b__31678","i__31677","vec__31679","iter__31675","vec__31682","db","js/webapp","js/webapp.tasks","js/webapp.tasks.views","js/webapp.tasks.views.new-task","js/webapp.tasks.views.new-task.target-information-tree","js/webapp.tasks.views.new-task.target-information-tree.tree-view-status","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","fexpr__31685","cljs.core/MultiFn","cljs.core.symbol","webapp.tasks.views.new-task.target-information-tree/tree-view-status","cljs.core/identity","tree","webapp.tasks.views.new-task.target-information-tree/main","target","database-schema","re_frame.core.subscribe","local-target","re-frame.core/dispatch","cljs.core/reset!","cljs.core/chunk-first"],"sourcesContent":["(ns webapp.tasks.views.new-task.target-information-tree\n  (:require\n   [reagent.core :as r]\n   [re-frame.core :as rf]\n   [webapp.subs :as subs]\n   ))\n\n(def ^:private get-schema-query\n  \"SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, DATA_TYPE, IS_NULLABLE\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_SCHEMA NOT IN ('information_schema', 'performance_schema', 'mysql', 'pg_catalog')\nORDER BY TABLE_SCHEMA, TABLE_NAME, ORDINAL_POSITION;\")\n\n(defn- field-type-tree [type]\n  [:div {:class \"pl-regular italic text-gray-600\"}\n   (str \"(\" type \")\")])\n\n(defn- fields-tree [fields]\n  (let [dropdown-status (r/atom {})]\n    (fn []\n      [:div {:class \"pl-small\"}\n       (doall\n        (for [[field field-type] fields]\n          ^{:key field}\n          [:div\n           [:div {:class \"flex items-center gap-small\"}\n            [:figure {:class \"w-3 flex-shrink-0\"}\n             [:img {:src \"/icons/icon-field-dark-gray.svg\"}]]\n            [:span {:class (str \"hover:text-blue-500 hover:underline cursor-pointer \"\n                                \"flex items-center\")\n                    :on-click #(swap! dropdown-status\n                                      assoc-in [field]\n                                      (if (= (get @dropdown-status field) :open) :closed :open))}\n             [:span field]\n             [:figure {:class \"w-4 flex-shrink-0 opacity-30\"}\n              [:img {:src (if (= (get @dropdown-status field) :open)\n                            \"/icons/icon-cheveron-up.svg\"\n                            \"/icons/icon-cheveron-down.svg\")}]]]]\n           [:div {:class (when (not= (get @dropdown-status field) :open)\n                           \"h-0 overflow-hidden\")}\n            [field-type-tree (first (map key field-type))]]]))])))\n\n(defn- tables-tree []\n  (let [dropdown-status (r/atom {})]\n    (fn [tables]\n      [:div {:class \"pl-small\"}\n       (doall\n        (for [[table fields] tables]\n          ^{:key table}\n          [:div\n           [:div {:class \"flex items-center gap-small\"}\n            [:figure {:class \"w-3 flex-shrink-0\"}\n             [:img {:src \"/icons/icon-folder-dark-gray.svg\"}]]\n            [:span {:class (str \"hover:text-blue-500 hover:underline cursor-pointer \"\n                                \"flex items-center\")\n                    :on-click #(swap! dropdown-status\n                                      assoc-in [table]\n                                      (if (= (get @dropdown-status table) :open) :closed :open))}\n             [:span table]\n             [:figure {:class \"w-4 flex-shrink-0 opacity-30\"}\n              [:img {:src (if (= (get @dropdown-status table) :open)\n                            \"/icons/icon-cheveron-up.svg\"\n                            \"/icons/icon-cheveron-down.svg\")}]]]]\n           [:div {:class (when (not= (get @dropdown-status table) :open)\n                           \"h-0 overflow-hidden\" )}\n            [fields-tree (into (sorted-map) fields)]]]))])))\n\n(defn- databases-tree [_]\n  (let [dropdown-status (r/atom {})]\n    (fn [schema]\n      [:div.text-xs\n       (doall\n        (for [[db tables] schema]\n          ^{:key db}\n          [:div\n           [:div {:class \"flex items-center gap-small\"}\n            [:figure {:class \"w-3 flex-shrink-0\"}\n             [:img {:src \"/icons/icon-layers-dark-gray.svg\"}]]\n            [:span {:class (str \"hover:text-blue-500 hover:underline cursor-pointer \"\n                                \"flex items-center\")\n                    :on-click #(swap! dropdown-status\n                                      assoc-in [db]\n                                      (if (= (get @dropdown-status db) :closed) :open :closed))}\n             [:span db]\n             [:figure {:class \"w-4 flex-shrink-0 opacity-30\"}\n              [:img {:src (if (not= (get @dropdown-status db) :closed)\n                            \"/icons/icon-cheveron-up.svg\"\n                            \"/icons/icon-cheveron-down.svg\")}]]]]\n           [:div {:class (when (= (get @dropdown-status db) :closed)\n                           \"h-0 overflow-hidden\" )}\n            [tables-tree (into (sorted-map) tables)]]]))])))\n\n(defmulti ^:private tree-view-status identity)\n(defmethod ^:private tree-view-status :loading [_]\n  [:div\n   {:class \"flex gap-small items-center py-regular text-xs text-gray-600\"}\n   [:span {:class \"italic\"}\n    \"Loading schema\"]\n   [:figure {:class \"w-3 flex-shrink-0 animate-spin opacity-60\"}\n    [:img {:src \"/icons/icon-loader-circle.svg\"}]]])\n(defmethod ^:private tree-view-status :default [_ tree]\n  [databases-tree (into (sorted-map) tree)])\n\n(defn main [target]\n  (let [database-schema (rf/subscribe [::subs/database-schema])\n        local-target (r/atom target)\n        _ (rf/dispatch [:get-database-schema\n                        (:name target)\n                        get-schema-query])]\n    (fn [target]\n      (when (not= @local-target target)\n        (let [_ (reset! local-target target)\n              _ (rf/dispatch [:get-database-schema\n                              (:name target)\n                              get-schema-query])]))\n      [:div {:class \"\"}\n       [:header {:class \"text-sm font-bold mb-small\"}\n        \"Tables\"]\n       [:div {:class \"overflow-x-auto\"}\n        [tree-view-status\n         (:status @database-schema)\n         (:tree @database-schema)]]])))\n"]}