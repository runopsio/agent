{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$python.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/highlight_DOT_js/lib/languages/python.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$python\"] = function(global,require,module,exports) {\n/**\n * @param {string} value\n * @returns {string}\n */\n\n/**\n * performs a shallow merge of multiple objects into one\n *\n * @template T\n * @param {T} original\n * @param {Record<string,any>[]} objects\n * @returns {T} a single new object\n */\nfunction inherit(original, ...objects) {\n  /** @type Record<string,any> */\n  const result = Object.create(null);\n\n  for (const key in original) {\n    result[key] = original[key];\n  }\n  objects.forEach(function(obj) {\n    for (const key in obj) {\n      result[key] = obj[key];\n    }\n  });\n  return /** @type {T} */ (result);\n}\n\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\nfunction stripOptionsFromArgs(args) {\n  const opts = args[args.length - 1];\n\n  if (typeof opts === 'object' && opts.constructor === Object) {\n    args.splice(args.length - 1, 1);\n    return opts;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const opts = stripOptionsFromArgs(args);\n  const joined = '(' +\n    (opts.capture ? \"\" : \"?:\") +\n    args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\nconst UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\\\w*';\n/**\n * Creates a comment mode\n *\n * @param {string | RegExp} begin\n * @param {string | RegExp} end\n * @param {Mode | {}} [modeOptions]\n * @returns {Partial<Mode>}\n */\nconst COMMENT = function(begin, end, modeOptions = {}) {\n  const mode = inherit(\n    {\n      scope: 'comment',\n      begin,\n      end,\n      contains: []\n    },\n    modeOptions\n  );\n  mode.contains.push({\n    scope: 'doctag',\n    // hack to avoid the space from being included. the space is necessary to\n    // match here to prevent the plain text rule below from gobbling up doctags\n    begin: '[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)',\n    end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,\n    excludeBegin: true,\n    relevance: 0\n  });\n  const ENGLISH_WORD = either(\n    // list of common 1 and 2 letter words in English\n    \"I\",\n    \"a\",\n    \"is\",\n    \"so\",\n    \"us\",\n    \"to\",\n    \"at\",\n    \"if\",\n    \"in\",\n    \"it\",\n    \"on\",\n    // note: this is not an exhaustive list of contractions, just popular ones\n    /[A-Za-z]+['](d|ve|re|ll|t|s|n)/, // contractions - can't we'd they're let's, etc\n    /[A-Za-z]+[-][a-z]+/, // `no-way`, etc.\n    /[A-Za-z][a-z]{2,}/ // allow capitalized words at beginning of sentences\n  );\n  // looking like plain text, more likely to be a comment\n  mode.contains.push(\n    {\n      // TODO: how to include \", (, ) without breaking grammars that use these for\n      // comment delimiters?\n      // begin: /[ ]+([()\"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()\":]?([.][ ]|[ ]|\\))){3}/\n      // ---\n\n      // this tries to find sequences of 3 english words in a row (without any\n      // \"programming\" type syntax) this gives us a strong signal that we've\n      // TRULY found a comment - vs perhaps scanning with the wrong language.\n      // It's possible to find something that LOOKS like the start of the\n      // comment - but then if there is no readable text - good chance it is a\n      // false match and not a comment.\n      //\n      // for a visual example please see:\n      // https://github.com/highlightjs/highlight.js/issues/2827\n\n      begin: concat(\n        /[ ]+/, // necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */\n        '(',\n        ENGLISH_WORD,\n        /[.]?[:]?([.][ ]|[ ])/,\n        '){3}') // look for 3 words in a row\n    }\n  );\n  return mode;\n};\nCOMMENT('//', '$');\nCOMMENT('/\\\\*', '\\\\*/');\nCOMMENT('#', '$');\n\n/*\nLanguage: Python\nDescription: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.\nWebsite: https://www.python.org\nCategory: common\n*/\n\nfunction python(hljs) {\n  const RESERVED_WORDS = [\n    'and',\n    'as',\n    'assert',\n    'async',\n    'await',\n    'break',\n    'class',\n    'continue',\n    'def',\n    'del',\n    'elif',\n    'else',\n    'except',\n    'finally',\n    'for',\n    'from',\n    'global',\n    'if',\n    'import',\n    'in',\n    'is',\n    'lambda',\n    'nonlocal|10',\n    'not',\n    'or',\n    'pass',\n    'raise',\n    'return',\n    'try',\n    'while',\n    'with',\n    'yield'\n  ];\n\n  const BUILT_INS = [\n    '__import__',\n    'abs',\n    'all',\n    'any',\n    'ascii',\n    'bin',\n    'bool',\n    'breakpoint',\n    'bytearray',\n    'bytes',\n    'callable',\n    'chr',\n    'classmethod',\n    'compile',\n    'complex',\n    'delattr',\n    'dict',\n    'dir',\n    'divmod',\n    'enumerate',\n    'eval',\n    'exec',\n    'filter',\n    'float',\n    'format',\n    'frozenset',\n    'getattr',\n    'globals',\n    'hasattr',\n    'hash',\n    'help',\n    'hex',\n    'id',\n    'input',\n    'int',\n    'isinstance',\n    'issubclass',\n    'iter',\n    'len',\n    'list',\n    'locals',\n    'map',\n    'max',\n    'memoryview',\n    'min',\n    'next',\n    'object',\n    'oct',\n    'open',\n    'ord',\n    'pow',\n    'print',\n    'property',\n    'range',\n    'repr',\n    'reversed',\n    'round',\n    'set',\n    'setattr',\n    'slice',\n    'sorted',\n    'staticmethod',\n    'str',\n    'sum',\n    'super',\n    'tuple',\n    'type',\n    'vars',\n    'zip'\n  ];\n\n  const LITERALS = [\n    '__debug__',\n    'Ellipsis',\n    'False',\n    'None',\n    'NotImplemented',\n    'True'\n  ];\n\n  // https://docs.python.org/3/library/typing.html\n  // TODO: Could these be supplemented by a CamelCase matcher in certain\n  // contexts, leaving these remaining only for relevance hinting?\n  const TYPES = [\n    \"Any\",\n    \"Callable\",\n    \"Coroutine\",\n    \"Dict\",\n    \"List\",\n    \"Literal\",\n    \"Generic\",\n    \"Optional\",\n    \"Sequence\",\n    \"Set\",\n    \"Tuple\",\n    \"Type\",\n    \"Union\"\n  ];\n\n  const KEYWORDS = {\n    $pattern: /[A-Za-z]\\w+|__\\w+__/,\n    keyword: RESERVED_WORDS,\n    built_in: BUILT_INS,\n    literal: LITERALS,\n    type: TYPES\n  };\n\n  const PROMPT = {\n    className: 'meta',\n    begin: /^(>>>|\\.\\.\\.) /\n  };\n\n  const SUBST = {\n    className: 'subst',\n    begin: /\\{/,\n    end: /\\}/,\n    keywords: KEYWORDS,\n    illegal: /#/\n  };\n\n  const LITERAL_BRACKET = {\n    begin: /\\{\\{/,\n    relevance: 0\n  };\n\n  const STRING = {\n    className: 'string',\n    contains: [ hljs.BACKSLASH_ESCAPE ],\n    variants: [\n      {\n        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,\n        end: /'''/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          PROMPT\n        ],\n        relevance: 10\n      },\n      {\n        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\"\"\"/,\n        end: /\"\"\"/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          PROMPT\n        ],\n        relevance: 10\n      },\n      {\n        begin: /([fF][rR]|[rR][fF]|[fF])'''/,\n        end: /'''/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          PROMPT,\n          LITERAL_BRACKET,\n          SUBST\n        ]\n      },\n      {\n        begin: /([fF][rR]|[rR][fF]|[fF])\"\"\"/,\n        end: /\"\"\"/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          PROMPT,\n          LITERAL_BRACKET,\n          SUBST\n        ]\n      },\n      {\n        begin: /([uU]|[rR])'/,\n        end: /'/,\n        relevance: 10\n      },\n      {\n        begin: /([uU]|[rR])\"/,\n        end: /\"/,\n        relevance: 10\n      },\n      {\n        begin: /([bB]|[bB][rR]|[rR][bB])'/,\n        end: /'/\n      },\n      {\n        begin: /([bB]|[bB][rR]|[rR][bB])\"/,\n        end: /\"/\n      },\n      {\n        begin: /([fF][rR]|[rR][fF]|[fF])'/,\n        end: /'/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          LITERAL_BRACKET,\n          SUBST\n        ]\n      },\n      {\n        begin: /([fF][rR]|[rR][fF]|[fF])\"/,\n        end: /\"/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          LITERAL_BRACKET,\n          SUBST\n        ]\n      },\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE\n    ]\n  };\n\n  // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals\n  const digitpart = '[0-9](_?[0-9])*';\n  const pointfloat = `(\\\\b(${digitpart}))?\\\\.(${digitpart})|\\\\b(${digitpart})\\\\.`;\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      // exponentfloat, pointfloat\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals\n      // optionally imaginary\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n      // Note: no leading \\b because floats can start with a decimal point\n      // and we don't want to mishandle e.g. `fn(.5)`,\n      // no trailing \\b for pointfloat because it can end with a decimal point\n      // and we don't want to mishandle e.g. `0..hex()`; this should be safe\n      // because both MUST contain a decimal point and so cannot be confused with\n      // the interior part of an identifier\n      {\n        begin: `(\\\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?\\\\b`\n      },\n      {\n        begin: `(${pointfloat})[jJ]?`\n      },\n\n      // decinteger, bininteger, octinteger, hexinteger\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals\n      // optionally \"long\" in Python 2\n      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals\n      // decinteger is optionally imaginary\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n      {\n        begin: '\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?\\\\b'\n      },\n      {\n        begin: '\\\\b0[bB](_?[01])+[lL]?\\\\b'\n      },\n      {\n        begin: '\\\\b0[oO](_?[0-7])+[lL]?\\\\b'\n      },\n      {\n        begin: '\\\\b0[xX](_?[0-9a-fA-F])+[lL]?\\\\b'\n      },\n\n      // imagnumber (digitpart-based)\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n      {\n        begin: `\\\\b(${digitpart})[jJ]\\\\b`\n      }\n    ]\n  };\n  const COMMENT_TYPE = {\n    className: \"comment\",\n    begin: lookahead(/# type:/),\n    end: /$/,\n    keywords: KEYWORDS,\n    contains: [\n      { // prevent keywords from coloring `type`\n        begin: /# type:/\n      },\n      // comment within a datatype comment includes no keywords\n      {\n        begin: /#/,\n        end: /\\b\\B/,\n        endsWithParent: true\n      }\n    ]\n  };\n  const PARAMS = {\n    className: 'params',\n    variants: [\n      // Exclude params in functions without params\n      {\n        className: \"\",\n        begin: /\\(\\s*\\)/,\n        skip: true\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: KEYWORDS,\n        contains: [\n          'self',\n          PROMPT,\n          NUMBER,\n          STRING,\n          hljs.HASH_COMMENT_MODE\n        ]\n      }\n    ]\n  };\n  SUBST.contains = [\n    STRING,\n    NUMBER,\n    PROMPT\n  ];\n\n  return {\n    name: 'Python',\n    aliases: [\n      'py',\n      'gyp',\n      'ipython'\n    ],\n    keywords: KEYWORDS,\n    illegal: /(<\\/|->|\\?)|=>/,\n    contains: [\n      PROMPT,\n      NUMBER,\n      {\n        // very common convention\n        begin: /\\bself\\b/\n      },\n      {\n        // eat \"if\" prior to string so that it won't accidentally be\n        // labeled as an f-string\n        beginKeywords: \"if\",\n        relevance: 0\n      },\n      STRING,\n      COMMENT_TYPE,\n      hljs.HASH_COMMENT_MODE,\n      {\n        match: [\n          /def/, /\\s+/,\n          UNDERSCORE_IDENT_RE\n        ],\n        scope: {\n          1: \"keyword\",\n          3: \"title.function\"\n        },\n        contains: [ PARAMS ]\n      },\n      {\n        variants: [\n          {\n            match: [\n              /class/, /\\s+/,\n              UNDERSCORE_IDENT_RE, /\\s*/,\n              /\\(\\s*/, UNDERSCORE_IDENT_RE,/\\s*\\)/\n            ],\n          },\n          {\n            match: [\n              /class/, /\\s+/,\n              UNDERSCORE_IDENT_RE\n            ],\n          }\n        ],\n        scope: {\n          1: \"keyword\",\n          3: \"title.class\",\n          6: \"title.class.inherited\",\n        }\n      },\n      {\n        className: 'meta',\n        begin: /^[\\t ]*@/,\n        end: /(?=#)|$/,\n        contains: [\n          NUMBER,\n          PARAMS,\n          STRING\n        ]\n      }\n    ]\n  };\n}\n\nmodule.exports = python;\n\n};"],
"names":["shadow$provide","global","require","module","exports","inherit","original","objects","result","Object","create","key","forEach","obj","concat","args","map","x","source","join","joined","stripOptionsFromArgs","opts","length","constructor","splice","either","capture","COMMENT","begin","end","modeOptions","mode","scope","contains","push","excludeBegin","relevance","ENGLISH_WORD","python","hljs","KEYWORDS","$pattern","keyword","RESERVED_WORDS","built_in","BUILT_INS","literal","LITERALS","type","TYPES","PROMPT","className","SUBST","keywords","illegal","LITERAL_BRACKET","STRING","BACKSLASH_ESCAPE","variants","APOS_STRING_MODE","QUOTE_STRING_MODE","NUMBER","COMMENT_TYPE","re","endsWithParent","PARAMS","skip","excludeEnd","HASH_COMMENT_MODE","name","aliases","beginKeywords","match","UNDERSCORE_IDENT_RE"]
}
