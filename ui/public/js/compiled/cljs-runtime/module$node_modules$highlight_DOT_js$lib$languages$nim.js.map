{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$nim.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAqMnHD,MAAOC,CAAAA,OAAP,CA7LAC,QAAY,CAACC,IAAD,CAAO,CAkIjB,MAAO,CACLC,KAAM,KADD,CAELC,SAAU,CACRC,QApFaC,mYAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAmFL;AAERC,QARaC,CACf,MADeA,CAEf,OAFeA,CAML,CAGRC,KAtIUC,0TAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAmIF,CAIRC,SAhBcC,CAChB,OADgBA,CAEhB,QAFgBA,CAGhB,QAHgBA,CAIhB,QAJgBA,CAYN,CAFL,CAQLC,SAAU,CACR,CACEC,UAAW,MADb,CAEEC,MAAO,MAFT,CAGEC,IAAK,MAHP,CAIEC,UAAW,EAJb,CADQ,CAOR,CACEH,UAAW,QADb,CAEEC,MAAO,cAFT;AAGEC,IAAK,GAHP,CAIEH,SAAU,CACR,CACEE,MAAO,IADT,CADQ,CAJZ,CAPQ,CAiBR,CACED,UAAW,QADb,CAEEC,MAAO,mBAFT,CAGEC,IAAK,KAHP,CAjBQ,CAsBRd,IAAKgB,CAAAA,iBAtBG,CAuBR,CACEJ,UAAW,MADb,CAEEC,MAAO,cAFT,CAGEE,UAAW,CAHb,CAvBQ,CA4BR,CACEH,UAAW,QADb,CAEEG,UAAW,CAFb,CAGEE,SAAU,CACR,CACEJ,MAAO,0DADT,CADQ,CAIR,CACEA,MAAO,6CADT,CAJQ,CAOR,CACEA,MAAO,+CADT,CAPQ,CAUR,CACEA,MAAO,uCADT,CAVQ,CAHZ,CA5BQ,CA8CRb,IAAKkB,CAAAA,iBA9CG,CARL,CAlIU,CARgG;",
"sources":["node_modules/highlight_DOT_js/lib/languages/nim.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$nim\"] = function(global,require,module,exports) {\n/*\nLanguage: Nim\nDescription: Nim is a statically typed compiled systems programming language.\nWebsite: https://nim-lang.org\nCategory: system\n*/\n\nfunction nim(hljs) {\n  const TYPES = [\n    \"int\",\n    \"int8\",\n    \"int16\",\n    \"int32\",\n    \"int64\",\n    \"uint\",\n    \"uint8\",\n    \"uint16\",\n    \"uint32\",\n    \"uint64\",\n    \"float\",\n    \"float32\",\n    \"float64\",\n    \"bool\",\n    \"char\",\n    \"string\",\n    \"cstring\",\n    \"pointer\",\n    \"expr\",\n    \"stmt\",\n    \"void\",\n    \"auto\",\n    \"any\",\n    \"range\",\n    \"array\",\n    \"openarray\",\n    \"varargs\",\n    \"seq\",\n    \"set\",\n    \"clong\",\n    \"culong\",\n    \"cchar\",\n    \"cschar\",\n    \"cshort\",\n    \"cint\",\n    \"csize\",\n    \"clonglong\",\n    \"cfloat\",\n    \"cdouble\",\n    \"clongdouble\",\n    \"cuchar\",\n    \"cushort\",\n    \"cuint\",\n    \"culonglong\",\n    \"cstringarray\",\n    \"semistatic\"\n  ];\n  const KEYWORDS = [\n    \"addr\",\n    \"and\",\n    \"as\",\n    \"asm\",\n    \"bind\",\n    \"block\",\n    \"break\",\n    \"case\",\n    \"cast\",\n    \"const\",\n    \"continue\",\n    \"converter\",\n    \"discard\",\n    \"distinct\",\n    \"div\",\n    \"do\",\n    \"elif\",\n    \"else\",\n    \"end\",\n    \"enum\",\n    \"except\",\n    \"export\",\n    \"finally\",\n    \"for\",\n    \"from\",\n    \"func\",\n    \"generic\",\n    \"guarded\",\n    \"if\",\n    \"import\",\n    \"in\",\n    \"include\",\n    \"interface\",\n    \"is\",\n    \"isnot\",\n    \"iterator\",\n    \"let\",\n    \"macro\",\n    \"method\",\n    \"mixin\",\n    \"mod\",\n    \"nil\",\n    \"not\",\n    \"notin\",\n    \"object\",\n    \"of\",\n    \"or\",\n    \"out\",\n    \"proc\",\n    \"ptr\",\n    \"raise\",\n    \"ref\",\n    \"return\",\n    \"shared\",\n    \"shl\",\n    \"shr\",\n    \"static\",\n    \"template\",\n    \"try\",\n    \"tuple\",\n    \"type\",\n    \"using\",\n    \"var\",\n    \"when\",\n    \"while\",\n    \"with\",\n    \"without\",\n    \"xor\",\n    \"yield\"\n  ];\n  const BUILT_INS = [\n    \"stdin\",\n    \"stdout\",\n    \"stderr\",\n    \"result\"\n  ];\n  const LITERALS = [\n    \"true\",\n    \"false\"\n  ];\n  return {\n    name: 'Nim',\n    keywords: {\n      keyword: KEYWORDS,\n      literal: LITERALS,\n      type: TYPES,\n      built_in: BUILT_INS\n    },\n    contains: [\n      {\n        className: 'meta', // Actually pragma\n        begin: /\\{\\./,\n        end: /\\.\\}/,\n        relevance: 10\n      },\n      {\n        className: 'string',\n        begin: /[a-zA-Z]\\w*\"/,\n        end: /\"/,\n        contains: [\n          {\n            begin: /\"\"/\n          }\n        ]\n      },\n      {\n        className: 'string',\n        begin: /([a-zA-Z]\\w*)?\"\"\"/,\n        end: /\"\"\"/\n      },\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'type',\n        begin: /\\b[A-Z]\\w+\\b/,\n        relevance: 0\n      },\n      {\n        className: 'number',\n        relevance: 0,\n        variants: [\n          {\n            begin: /\\b(0[xX][0-9a-fA-F][_0-9a-fA-F]*)('?[iIuU](8|16|32|64))?/\n          },\n          {\n            begin: /\\b(0o[0-7][_0-7]*)('?[iIuUfF](8|16|32|64))?/\n          },\n          {\n            begin: /\\b(0(b|B)[01][_01]*)('?[iIuUfF](8|16|32|64))?/\n          },\n          {\n            begin: /\\b(\\d[_\\d]*)('?[iIuUfF](8|16|32|64))?/\n          }\n        ]\n      },\n      hljs.HASH_COMMENT_MODE\n    ]\n  };\n}\n\nmodule.exports = nim;\n\n};"],
"names":["shadow$provide","global","require","module","exports","nim","hljs","name","keywords","keyword","KEYWORDS","literal","LITERALS","type","TYPES","built_in","BUILT_INS","contains","className","begin","end","relevance","QUOTE_STRING_MODE","variants","HASH_COMMENT_MODE"]
}
