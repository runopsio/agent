{
"version":3,
"file":"module$node_modules$$sentry$utils$dist$logger.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/@sentry/utils/dist/logger.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$utils$dist$logger\"] = function(global,require,module,exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar global_1 = require(\"./global\");\n// TODO: Implement different loggers for different environments\nvar global = global_1.getGlobalObject();\n/** Prefix for logging strings */\nvar PREFIX = 'Sentry Logger ';\n/**\n * Temporarily unwrap `console.log` and friends in order to perform the given callback using the original methods.\n * Restores wrapping after the callback completes.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nfunction consoleSandbox(callback) {\n    var global = global_1.getGlobalObject();\n    var levels = ['debug', 'info', 'warn', 'error', 'log', 'assert'];\n    if (!('console' in global)) {\n        return callback();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    var originalConsole = global.console;\n    var wrappedLevels = {};\n    // Restore all wrapped console methods\n    levels.forEach(function (level) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        if (level in global.console && originalConsole[level].__sentry_original__) {\n            wrappedLevels[level] = originalConsole[level];\n            originalConsole[level] = originalConsole[level].__sentry_original__;\n        }\n    });\n    // Perform callback manipulations\n    var result = callback();\n    // Revert restoration to wrapped state\n    Object.keys(wrappedLevels).forEach(function (level) {\n        originalConsole[level] = wrappedLevels[level];\n    });\n    return result;\n}\nexports.consoleSandbox = consoleSandbox;\n/** JSDoc */\nvar Logger = /** @class */ (function () {\n    /** JSDoc */\n    function Logger() {\n        this._enabled = false;\n    }\n    /** JSDoc */\n    Logger.prototype.disable = function () {\n        this._enabled = false;\n    };\n    /** JSDoc */\n    Logger.prototype.enable = function () {\n        this._enabled = true;\n    };\n    /** JSDoc */\n    Logger.prototype.log = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!this._enabled) {\n            return;\n        }\n        consoleSandbox(function () {\n            global.console.log(PREFIX + \"[Log]: \" + args.join(' '));\n        });\n    };\n    /** JSDoc */\n    Logger.prototype.warn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!this._enabled) {\n            return;\n        }\n        consoleSandbox(function () {\n            global.console.warn(PREFIX + \"[Warn]: \" + args.join(' '));\n        });\n    };\n    /** JSDoc */\n    Logger.prototype.error = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!this._enabled) {\n            return;\n        }\n        consoleSandbox(function () {\n            global.console.error(PREFIX + \"[Error]: \" + args.join(' '));\n        });\n    };\n    return Logger;\n}());\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nvar logger = global.__SENTRY__.logger || (global.__SENTRY__.logger = new Logger());\nexports.logger = logger;\n//# sourceMappingURL=logger.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","consoleSandbox","callback","global_1","getGlobalObject","originalConsole","console","wrappedLevels","levels","forEach","level","__sentry_original__","result","Object","keys","defineProperty","value","Logger","_enabled","prototype","disable","Logger.prototype.disable","enable","Logger.prototype.enable","log","Logger.prototype.log","args","_i","arguments","length","join","warn","Logger.prototype.warn","error","Logger.prototype.error","__SENTRY__","logger"]
}
