{"version":3,"sources":["webapp/tasks/views/tasks_filters.cljs"],"mappings":"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","names":["js/webapp","js/webapp.tasks","js/webapp.tasks.views","js/webapp.tasks.views.tasks-filters","js/webapp.tasks.views.tasks-filters.status-options","webapp.tasks.views.tasks-filters/status-options","webapp.tasks.views.tasks-filters/form","filters","user-id","reagent.core.atom","or__4253__auto__","cljs.core.get","target-form","target-form-filters","user-id-filters","all-targets","re_frame.core.subscribe","p1__31041#","p1__31042#","cljs.core/deref","p1__31043#","p1__31044#","p1__31045#","combobox-options","p1__31037#","cljs.core.map","cljs.core.into","webapp.components.forms/input","cljs.core/reset!","cljs.core._EQ_","re-frame.core/dispatch","webapp.components.combobox/main","webapp.components.forms/select","cljs.core.concat","webapp.targets.constants/targets-types-list","webapp.tasks.views.tasks-filters/filter-badges","iter__4652__auto__","s__31050","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__31052","cljs.core/chunk-buffer","i__31051","vec__31055","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__31049","cljs.core/chunk-rest","vec__31058","cljs.core/first","cljs.core/cons","cljs.core/rest","key","value","webapp.components.badge/small","webapp.tasks.views.tasks-filters/tasks-filters","_","popover-open","webapp.components.button/secondary","cljs.core/not","webapp.components.popover/left","cljs.core/chunk-first"],"sourcesContent":["(ns webapp.tasks.views.tasks-filters\n  (:require\n   [reagent.core :as r]\n   [re-frame.core :as rf]\n   [webapp.subs :as subs]\n   [webapp.components.popover :as popover]\n   [webapp.components.badge :as badge]\n   [webapp.components.button :as button]\n   [webapp.components.forms :as forms]\n   [webapp.components.combobox :as combobox]\n   [webapp.targets.constants :as targets-constants]))\n\n(defonce status-options\n  [{:value \"\" :text \"All\"}\n   {:value \"created\" :text \"created\"}\n   {:value \"pending-review\" :text \"pending-review\"}\n   {:value \"approved\" :text \"approved\"}\n   {:value \"rejected\" :text \"rejected\"}\n   {:value \"ready\" :text \"ready\"}\n   {:value \"running\" :text \"running\"}\n   {:value \"success\" :text \"success\"}\n   {:value \"failure\" :text \"failure\"}])\n\n(defn- form\n  [filters]\n  (let [user-id (r/atom (or (get filters \"user-id\") \"\"))\n        target-form (r/atom (or (get filters \"target\") \"\"))\n        target-form-filters (get filters \"target\")\n        user-id-filters (get filters \"user-id\")\n        all-targets (rf/subscribe [::subs/all-targets])]\n    (fn [filters]\n      (let [combobox-options (map\n                              #(into {} {:value (:name %)\n                                         :text (str (:name %) \" (\" (:type %) \")\")})\n                              @all-targets)]\n        [:div.flex.flex-col.sm:flex-row.gap-regular.items-center.p-regular\n         [:div.flex.gap-regular.flex-grow\n          {:class \"w-full sm:w-1/2\"}\n          [forms/input\n           {:label \"User id\"\n            :placeholder \"123\"\n            :on-change #(reset! user-id (-> % .-target .-value))\n            :on-keyDown #(when (= (.-keyCode %) 13)\n                           (rf/dispatch [:filter-tasks \"user-id\" (-> % .-target .-value)]))\n            :value @user-id\n            :defaultValue user-id-filters}]\n          [combobox/main {:options combobox-options\n                          :selected @target-form\n                          :label \"Target\"\n                          :default-value \"Select a target\"\n                          :placeholder \"Select a target\"\n                          :list-classes \"min-w-64\"\n                          :on-change #(rf/dispatch [:filter-tasks \"target\" %])\n                          :name \"select-target\"}]]\n         [:div.flex.gap-regular.flex-grow.items-stretch\n          {:class \"w-full sm:w-1/2\"}\n          [forms/select\n           {:label \"Task type\"\n            :on-change #(rf/dispatch [:filter-tasks \"type\" (-> % .-target .-value)])\n            :selected (or (get filters \"type\") \"\")\n            :options (into (concat\n                            [{:value \"\" :text \"All\"}]\n                            targets-constants/targets-types-list))}]\n          [forms/select\n           {:label \"Status\"\n            :on-change #(rf/dispatch [:filter-tasks \"status\" (-> % .-target .-value)])\n            :selected (or (get filters \"status\") \"\")\n            :options status-options}]]]))))\n\n(defn- filter-badges [filters]\n  [:div.flex.items-center.gap-small\n   (for [[key value] filters]\n     ^{:key (str key value)}\n     [badge/small\n      [:span\n       [:span.text-gray-500 (str key \": \")]\n       value]\n      #(rf/dispatch [:filter-tasks key \"\"])])\n   ])\n\n(defn tasks-filters [_]\n  (let [popover-open (r/atom false)\n        _ (rf/dispatch [:get-all-targets])]\n    (fn [filters]\n      [:div.w-full.relative.flex.gap-regular\n       [:div.flex\n        [button/secondary {:text [:span.flex.items-center.justify-center [:span :Filters] [:img.w-5 {:src \"/icons/icon-cheveron-down.svg\"}]]\n                           :outlined true\n                           :on-click #(reset! popover-open (not @popover-open))}]]\n       [filter-badges filters]\n       [popover/left {:open @popover-open\n                      :component [form filters]\n                      :on-click-outside #(reset! popover-open false)}]])))\n"]}