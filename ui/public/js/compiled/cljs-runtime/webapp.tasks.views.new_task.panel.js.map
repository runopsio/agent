{"version":3,"sources":["webapp/tasks/views/new_task/panel.cljs"],"mappings":"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","names":["webapp.tasks.views.new-task.panel/get-code-from-localstorage","item","js/localStorage","object","cljs.core.js__GT_clj","js/JSON","or__4253__auto__","cljs.core.get","webapp.tasks.views.new-task.panel/timer","reagent.core.atom","webapp.tasks.views.new-task.panel/code","webapp.tasks.views.new-task.panel/target","webapp.tasks.views.new-task.panel/task-description","webapp.tasks.views.new-task.panel/task-type","webapp.tasks.views.new-task.panel/code-saved-status","webapp.tasks.views.new-task.panel/type-language-map","js/module$node_modules$$codemirror$lang_sql$dist$index_cjs.sql","js/module$node_modules$$codemirror$lang_javascript$dist$index_cjs.javascript","js/module$node_modules$$codemirror$lang_python$dist$index_cjs.python","js/module$node_modules$$codemirror$stream_parser$dist$index_cjs.StreamLanguage","js/module$node_modules$$codemirror$legacy_modes$mode$shell.shell","webapp.tasks.views.new-task.panel/manage-language-switch","value","view","language","selected-language","language-default","cljs.core/reset!","cljs.core/clj->js","webapp.tasks.views.new-task.panel/save-to-localstorage","code-string","code-tmp-db","js/Date","code-tmp-db-json","webapp.tasks.views.new-task.panel/auto-save","view-update","cljs.core/deref","js/clearTimeout","js/setTimeout","webapp.tasks.views.new-task.panel/set-type-from-target","targets","selected-target-name","selected-target","p1__31075#","cljs.core/filterv","cljs.core._EQ_","cljs.core/first","cljs.core.not_EQ_","cljs.core/empty?","re-frame.core/dispatch","webapp.tasks.views.new-task.panel/submit-task","e","_","webapp.tasks.views.new-task.panel/task-advanced-fields","editor-view","re_frame.core.subscribe","p1__31077#","p1__31078#","p1__31079#","p1__31081#","targets-options","p1__31076#","cljs.core.map","cljs.core.into","webapp.components.headings/h2","webapp.components.divider/main","webapp.components.headings/h3","webapp.components.combobox/main","webapp.components.forms/select","webapp.targets.constants/targets-types-list","webapp.components.forms/textarea","webapp.components.button/secondary","webapp.components.button/primary","webapp.tasks.views.new-task.panel/advanced-task-creation","webapp.tasks.views.new-task.panel/keymap-mod-enter","js/webapp","js/webapp.tasks","js/webapp.tasks.views","js/webapp.tasks.views.new-task","js/webapp.tasks.views.new-task.panel","js/webapp.tasks.views.new-task.panel.saved-status-el","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","fexpr__31087","cljs.core/MultiFn","cljs.core.symbol","webapp.tasks.views.new-task.panel/saved-status-el","cljs.core/identity","webapp.tasks.views.new-task.panel/editor-footer","p1__31090#","is-mac?","js/navigator","webapp.tasks.views.new-task.panel/logs-area","new-task","task-logs","webapp.tasks.views.tasks-logs-container/main","webapp.tasks.views.new-task.panel/editor","p1__31099#","theme","js/module$node_modules$$codemirror$basic_setup$dist$index_cjs.EditorView","js/module$node_modules$$codemirror$state$dist$index_cjs.Compartment","keymap","extensions","js/module$node_modules$$codemirror$view$dist$index_cjs.keymap","js/module$node_modules$$codemirror$basic_setup$dist$index_cjs.basicSetup","p1__31100#","codemirror-editor","webapp.components.codemirror-editor/editor","js/module$node_modules$$codemirror$state$dist$index_cjs.EditorState","cljs.core.concat","editor-comp","p1__31103#","p1__31104#","target-type","show-tree?","supported-sql?","cljs.core/seq","webapp.tasks.views.new-task.target-information-tree/main","p__31117","map__31118","cljs.core/--destructure-map","webapp.tasks.views.new-task.panel/main","target-name","webapp.tasks.views.new-task.tasks-list/main"],"sourcesContent":["(ns webapp.tasks.views.new-task.panel\n  (:require\n   [reagent.core :as r]\n   [re-frame.core :as rf]\n   [webapp.subs :as subs]\n   [\"@codemirror/basic-setup\" :as cm]\n   [\"@codemirror/state\" :as cm-state]\n   [\"@codemirror/view\" :as cm-view]\n   ;[\"@codemirror/theme-one-dark\" :as cm-one-dark]\n   [\"@codemirror/lang-javascript\" :as cm-js]\n   [\"@codemirror/lang-sql\" :as cm-sql]\n   [\"@codemirror/lang-python\" :as cm-python]\n   [\"@codemirror/stream-parser\" :as cm-sp]\n   [\"@codemirror/legacy-modes/mode/shell\" :as cm-shell]\n   [webapp.tasks.events.new-task]\n   [webapp.components.codemirror-editor :as codemirror-editor]\n   [webapp.components.combobox :as combobox]\n   [webapp.components.forms :as forms]\n   [webapp.components.button :as button]\n   [webapp.components.headings :as h]\n   [webapp.components.divider :as divider]\n   [webapp.targets.constants :as targets-constants]\n   [webapp.tasks.views.new-task.tasks-list :as tasks-list]\n   [webapp.tasks.views.tasks-logs-container :as logs-container]\n   [webapp.tasks.views.new-task.target-information-tree :as target-information-tree]))\n\n(defn- get-code-from-localstorage []\n  (let [item (.getItem js/localStorage :code-tmp-db)\n        object (js->clj (.parse js/JSON item))]\n    (or (get object \"code\") \"\")))\n\n(def ^:private timer (r/atom nil))\n(def ^:private code (r/atom (get-code-from-localstorage)))\n(def ^:private target (r/atom \"\"))\n(def ^:private task-description (r/atom nil))\n(def ^:private task-type (r/atom \"\"))\n(def ^:private code-saved-status (r/atom :saved)) ; :edited | :saved\n\n(def ^:private type-language-map\n  {\"mysql\" cm-sql/sql\n   \"mysql-csv\" cm-sql/sql\n   \"postgres\" cm-sql/sql\n   \"postgres-csv\" cm-sql/sql\n   \"sql-server\" cm-sql/sql\n   \"node\" cm-js/javascript\n   \"mongodb\" cm-js/javascript\n   \"python\" cm-python/python\n   \"bash\" #(.define cm-sp/StreamLanguage cm-shell/shell)\n   \"rails\" #(.define cm-sp/StreamLanguage cm-shell/shell)\n   \"rails-console\" #(.define cm-sp/StreamLanguage cm-shell/shell)\n   \"rails-console-k8s\" #(.define cm-sp/StreamLanguage cm-shell/shell)\n   \"rails-console-ecs\" #(.define cm-sp/StreamLanguage cm-shell/shell)\n   \"k8s\" #(.define cm-sp/StreamLanguage cm-shell/shell)\n   \"k8s-apply\" #(.define cm-sp/StreamLanguage cm-shell/shell)\n   \"k8s-exec\" #(.define cm-sp/StreamLanguage cm-shell/shell)\n   ;\"ecs-exec\" #(.define cm-sp/StreamLanguage cm-shell/shell)\n   \"hashicorp-vault\" #(.define cm-sp/StreamLanguage cm-shell/shell)\n   nil #(.define cm-sp/StreamLanguage cm-shell/shell)\n   \"\" #(.define cm-sp/StreamLanguage cm-shell/shell)})\n\n(defn- manage-language-switch [value view language]\n  (let [selected-language (get type-language-map value)\n        language-default (get type-language-map \"\")]\n    (reset! task-type value)\n    (.dispatch\n     view (clj->js {:effects (.reconfigure\n                              language\n                              (if (nil? selected-language)\n                                (language-default)\n                                (selected-language)))}))))\n\n(defn- save-to-localstorage [code-string]\n  (let [code-tmp-db {:date (.now js/Date)\n                     :code code-string}\n        code-tmp-db-json (.stringify js/JSON (clj->js code-tmp-db))]\n    (.setItem js/localStorage :code-tmp-db code-tmp-db-json)\n    (reset! code-saved-status :saved)))\n\n(defn- auto-save [^cm/EditorView.ViewUpdate view-update]\n  (when (.-docChanged view-update)\n    (reset! code-saved-status :edited)\n    (let [code-string (.toString (.-doc (.-state (.-view view-update))))]\n      (when @timer (js/clearTimeout @timer))\n      (reset! timer (js/setTimeout #(save-to-localstorage code-string) 1000))\n      (reset! code code-string))))\n\n(defn- set-type-from-target [targets selected-target-name view language]\n  (let [selected-target (filterv #(= (:name %) selected-target-name) targets)\n        item (or (first selected-target) \"\")]\n    (when (and (not= (:review_type item) \"none\") (not (empty? item)))\n      (rf/dispatch [:show-snackbar {:level :info\n                                    :text (str \"This target requires review. \"\n                                               \"Your task won't run until it gets reviewed\")}]))\n    (reset! target selected-target-name)\n    (manage-language-switch (or (:type item) \"\") view language)))\n\n(defn- submit-task [e]\n  (when (.-preventDefault e) (.preventDefault e))\n  (if (= @target \"\")\n    (rf/dispatch [:show-snackbar {:level :info\n                                  :text \"You must choose a target\"}])\n    (let [_ (rf/dispatch [:create-new-task {:type @task-type\n                                            :description @task-description\n                                            :script @code\n                                            :target @target}])\n          _ (rf/dispatch [:close-modal])\n          _ (rf/dispatch [:show-snackbar {:level :success\n                                          :text \"Task created!\"}])]))\n  true)\n\n(defn- task-advanced-fields [editor-view language]\n  (let [targets (rf/subscribe [::subs/all-targets])]\n    (fn []\n      (let [targets-options (map\n                             #(into {} {:value (:name %)\n                                        :text (str (:name %) \" (\" (:type %) \")\")})\n                             @targets)]\n        [:form\n         {:on-submit #(submit-task %)}\n         [:div\n          [:header.mb-regular\n           [h/h2 \"Create your task\" {}]]\n          [divider/main]\n          [:div\n           [:header.mb-small\n            [h/h3 \"Target name\" {:class \"mb-small\"}]\n            [:footer.text-xs.text-gray-500\n             \"Get the name for your target\"]]\n           [combobox/main {:options targets-options\n                           :selected @target\n                           :default-value \"Select a target\"\n                           :placeholder \"Your-target-name* (required)\"\n                           :on-change #(set-type-from-target @targets % editor-view language)\n                           :name \"select-target\"}]]\n          [:div\n           [:header.mb-small\n            [h/h3 \"Task type\" {:class \"mb-small\"}]\n            [:footer.text-xs.text-gray-500\n             \"Leave it blank for using the default for the target or select a different one if your target allows it\"]]\n           [forms/select {:on-change #(reset! task-type (-> % .-target .-value))\n                          :selected (or @task-type \"\")\n                          :options targets-constants/targets-types-list}]]\n          [:div\n           [:header.mb-small\n            [h/h3 \"Task description\" {:class \"mb-small\"}]\n            [:footer.text-xs.text-gray-500\n             \"Optional field for adding a description so your peers can get a better understanding of what you're doing\"]]\n           [forms/textarea\n            {:placeholder \"Add your description here\"\n             :on-change #(reset! task-description (-> % .-target .-value))\n             :autoFocus true\n             :value @task-description\n             :defaultValue \"\"}]]\n          [divider/main]\n          [:footer.grid.grid-cols-2.gap-small\n           [:div\n            [button/secondary {:text \"Cancel\"\n                               :on-click #(rf/dispatch [:close-modal])}]]\n           [:div\n            [button/primary {:text \"Create task\"\n                             :type \"submit\"\n                             :disabled (or (= @target nil) (= @target \"\"))}]]]]]))))\n\n(defn- advanced-task-creation [view language]\n  (rf/dispatch [:open-modal [task-advanced-fields view language]]))\n\n(defn- keymap-mod-enter [view language]\n  (advanced-task-creation view language)\n  true)\n\n(defmulti ^:private saved-status-el identity)\n(defmethod ^:private saved-status-el :saved [_]\n  [:div.flex.flex-row-reverse\n   [:div.flex.items-center\n    [:figure.w-5\n     [:img {:src \"/icons/icon-check-green.svg\"}]]\n    [:span.text-xs.text-gray-500 \"Saved!\"]]])\n(defmethod ^:private saved-status-el :edited [_]\n  [:div.flex.flex-row-reverse\n   [:div.flex.items-center.gap-small\n    [:figure.w-3\n     [:img {:src \"/icons/icon-loader-circle.svg\"\n            :class \"animate-spin\"}]]\n    [:span.text-xs.text-gray-500.italic\n     \"Edited\"]]])\n\n(defn- editor-footer [editor-view language]\n  (let [is-mac? (>= (.indexOf (.toUpperCase (.-platform js/navigator)) \"MAC\") 0)]\n    [:footer {:class \"flex p-small\"}\n     [:div {:class \"flex-shrink\"}\n      [saved-status-el @code-saved-status]]\n     [:div\n      {:class \"flex gap-regular flex-grow justify-end\"}\n      [:div\n       {:class (str \"flex items-center cursor-pointer \"\n                    \"text-gray-800 hover:underline \")\n        :on-click #(advanced-task-creation editor-view language)}\n       [:figure {:class \"w-5\"}\n        [:img {:src \"/icons/icon-plus-dark-gray.svg\"}]]\n       [:span {:class \"text-xs\"}\n        (str \"Advanced fields \" (if is-mac?\n                                  \"(Shift+Cmd+Enter)\"\n                                  \"(Shift+Ctrl+Enter)\"))]]\n      [:div\n       {:class (str \"flex items-center cursor-pointer \"\n                    \"text-blue-700 hover:underline\")\n        :on-click #(submit-task %)}\n       [:figure {:class \"w-5\"}\n        [:img {:src \"/icons/icon-play-blue.svg\"}]]\n       [:span {:class \"text-xs\"}\n        (str \"Create \" (if is-mac?\n                         \"(Cmd+Enter)\"\n                         \"(Ctrl+Enter)\"))]]]]))\n\n(defn- logs-area []\n  (let [new-task (rf/subscribe [::subs/new-task])]\n    (fn []\n      (let [task-logs (:task-logs @new-task)]\n        [:div {:class \"h-full px-small\"}\n         [logs-container/main\n          {:logs (:logs task-logs)\n           :log-status (:status task-logs)\n           :task-status (:status (:result @new-task))\n           :classes \"h-full\"\n           :fixed-height? true\n           :target (:type (:result @new-task))} \"new-task-logs-container\"]]))))\n\n(defn- editor []\n  (let [theme (.theme cm/EditorView\n                      (clj->js {\"&\" {:fontSize \"16px\"\n                                     :height \"calc(50vh - 72px)\"}\n                                \".cm-gutters\" {:background-color \"white\"\n                                               :color \"rgb(107, 114, 128)\"}}))\n        language (new cm-state/Compartment)\n        targets (rf/subscribe [::subs/all-targets])\n        _ (rf/dispatch [:get-all-targets])\n        keymap [{:key \"Shift-Mod-Enter\"\n                 :run #(keymap-mod-enter % language)}\n                {:key \"Mod-Enter\"\n                 :run #(submit-task {})}]\n        selected-language (get type-language-map @task-type)\n        extensions [(.of cm-view/keymap (clj->js keymap))\n                    cm/basicSetup\n                    (.of (.-updateListener cm/EditorView) #(auto-save %))\n                    theme]\n        codemirror-editor (codemirror-editor/editor\n                           {:state #(.create\n                                     cm-state/EditorState\n                                     (clj->js {:doc @code\n                                               :extensions (concat [(.of language (selected-language))] extensions)}))})\n        editor-comp (:editor-component codemirror-editor)\n        editor-view (:editor-view codemirror-editor)]\n    (fn []\n      (let [selected-target (first (filterv #(= (:name %) @target) @targets))\n            targets-options (map\n                             #(into {} {:value (:name %)\n                                        :text (str (:name %) \" (\" (:type %) \")\")})\n                             @targets)\n            target-type (:type selected-target)\n            show-tree? (and\n                        (= (:review_type selected-target) \"none\")\n                        (or (= target-type \"mysql\")\n                            (= target-type \"postgres\")))\n            supported-sql? (or (= target-type \"mysql\")\n                               (= target-type \"postgres\"))\n            _ (when (and (seq @targets)\n                         (not (nil? (:current @editor-view))))\n                (set-type-from-target @targets\n                                      @target\n                                      (:current @editor-view)\n                                      language))]\n\n        [:div {:class \"grid grid-cols-7\"}\n         [:div\n          [:div {:class \"col-span-1 h-full\"}\n           [:div\n            {:class \"mb-regular px-small\"}\n            [:header\n             [combobox/main {:options targets-options\n                             :selected @target\n                             :default-value \"Select a target\"\n                             :placeholder \"Select a target\"\n                             :list-classes \"min-w-64\"\n                             :size :small\n                             :on-change (fn [value]\n                                          (set-type-from-target @targets\n                                                                value\n                                                                (:current @editor-view)\n                                                                language)\n                                          (rf/dispatch\n                                           [:navigate :new-task-with-target {} :target-name value]))\n                             :name \"select-target\"}] ]]\n           [:section\n            {:class \"px-small overflow-auto h-new-task__tree-container\"}\n            (when (and (not supported-sql?) (not show-tree?))\n              [:div\n               {:class \"text-xs px-small text-gray-500\"}\n               [:span\n                \"Displaying schemas are only supported on MySQL and Postgres\"]])\n            (when (and supported-sql? (not show-tree?))\n              [:div\n               {:class \"text-xs px-small text-gray-500\"}\n               [:span\n                \"Schema not available when the target requires review.\"]])\n            (when show-tree?\n              [target-information-tree/main selected-target]) ]]]\n         [:div\n          {:class (str \"flex flex-col justify-items-start col-span-6\"\n                       \" pl-small h-new-task__screen-container\" )}\n          [:div {:class \"h-1/2\"}\n           [editor-comp]\n           [editor-footer editor-view language]]\n          [:div {:class \"h-1/2\"}\n           [logs-area]]]]))))\n\n(defn main [{:keys [target-name]}]\n  (let [_ (when (not= target-name nil) (reset! target target-name))]\n    (fn []\n      [:div {:class \"grid grid-cols-8 box-border h-new-task__screen-container\"}\n       [:div {:class \"grid grid-rows-1 col-span-7\"}\n        [editor {:target-name target-name}]]\n       [:div\n        {:class \"h-new-task__screen-container col-span-1 overflow-auto\"}\n        [tasks-list/main]]])))\n\n"]}