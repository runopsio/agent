{
"version":3,
"file":"module$node_modules$$codemirror$comment$dist$index_cjs.js",
"lineCount":10,
"mappings":"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAenHC,QAASA,QAAO,CAACC,CAAD,CAAIC,MAAJ,CAAY,CACxB,MAAO,CAAC,CAAEC,KAAF,CAASC,QAAT,CAAD,CAAA,EAAyB,CAC5B,IAAIC,GAAKJ,CAAA,CAAEC,MAAF,CAAUC,KAAMG,CAAAA,SAAUC,CAAAA,MAA1B,CAAkCJ,KAAlC,CACT,IAAI,CAACE,EAAL,CACI,MAAO,CAAA,CACXD,SAAA,CAASD,KAAMK,CAAAA,MAAN,CAAaH,EAAb,CAAT,CACA,OAAO,CAAA,CALqB,CADR,CAiD5BI,QAASA,UAAS,CAACN,KAAD,CAAQO,GAAA,CAAMP,KAAMG,CAAAA,SAAUK,CAAAA,IAAKC,CAAAA,IAAnC,CAAyC,CACnDC,KAAAA,CAAOV,KAAMW,CAAAA,cAAN,CAAqB,eAArB,CAAsCJ,GAAtC,CACX,OAAOG,MAAKE,CAAAA,MAAL,CAAcF,KAAA,CAAK,CAAL,CAAd,CAAwB,EAFwB,CAS3DG,QAASA,iBAAgB,CAACb,KAAD,CAAQ,CAAEc,IAAF,CAAQC,KAAR,CAAR,CAAyBC,IAAzB,CAA+BC,EAA/B,CAAmC,CACxD,IAAIC,WAAalB,KAAMmB,CAAAA,QAAN,CAAeH,IAAf,CANAI,EAMA,CAAoCJ,IAApC,CAAjB,CACIK;AAAYrB,KAAMmB,CAAAA,QAAN,CAAeF,EAAf,CAAmBA,EAAnB,CAPCG,EAOD,CADhB,CAEIE,YAAc,MAAOC,CAAAA,IAAP,CAAYL,UAAZ,CAAA,CAAwB,CAAxB,CAA2BN,CAAAA,MAF7C,CAEqDY,WAAa,MAAOD,CAAAA,IAAP,CAAYF,SAAZ,CAAA,CAAuB,CAAvB,CAA0BT,CAAAA,MAC5F,KAAIa,UAAYP,UAAWN,CAAAA,MAAvBa,CAAgCH,WACpC,IAAIJ,UAAWQ,CAAAA,KAAX,CAAiBD,SAAjB,CAA6BX,IAAKF,CAAAA,MAAlC,CAA0Ca,SAA1C,CAAJ,EAA4DX,IAA5D,EACIO,SAAUK,CAAAA,KAAV,CAAgBF,UAAhB,CAA4BA,UAA5B,CAAyCT,KAAMH,CAAAA,MAA/C,CADJ,EAC8DG,KAD9D,CAEI,MAAO,CAAED,KAAM,CAAEP,IAAKS,IAALT,CAAYe,WAAd,CAA2BK,OAAQL,WAARK,EAAuB,CAAlD,CAAR,CACHZ,MAAO,CAAER,IAAKU,EAALV,CAAUiB,UAAZ,CAAwBG,OAAQH,UAARG,EAAsB,CAA9C,CADJ,CAIM,IAAjB,EAAIV,EAAJ,CAASD,IAAT,CACIY,UADJ,CACgBC,KADhB,CAC0B7B,KAAMmB,CAAAA,QAAN,CAAeH,IAAf,CAAqBC,EAArB,CAD1B,EAIIW,UACA,CADY5B,KAAMmB,CAAAA,QAAN,CAAeH,IAAf,CAAqBA,IAArB,CApBCI,EAoBD,CACZ,CAAAS,KAAA,CAAU7B,KAAMmB,CAAAA,QAAN,CAAeF,EAAf;AArBGG,EAqBH,CAAkCH,EAAlC,CALd,CAOIa,UAAAA,CAAa,MAAOP,CAAAA,IAAP,CAAYK,UAAZ,CAAA,CAAuB,CAAvB,CAA0BhB,CAAAA,MAAQmB,YAAAA,CAAW,MAAOR,CAAAA,IAAP,CAAYM,KAAZ,CAAA,CAAqB,CAArB,CAAwBjB,CAAAA,MAClFoB,WAAAA,CAASH,KAAQjB,CAAAA,MAAjBoB,CAA0BD,WAA1BC,CAAqCjB,KAAMH,CAAAA,MAC/C,OAAIgB,WAAUF,CAAAA,KAAV,CAAgBI,SAAhB,CAA4BA,SAA5B,CAAyChB,IAAKF,CAAAA,MAA9C,CAAJ,EAA6DE,IAA7D,EACIe,KAAQH,CAAAA,KAAR,CAAcM,UAAd,CAAsBA,UAAtB,CAA+BjB,KAAMH,CAAAA,MAArC,CADJ,EACoDG,KADpD,CAEW,CAAED,KAAM,CAAEP,IAAKS,IAALT,CAAYuB,SAAZvB,CAAyBO,IAAKF,CAAAA,MAAhC,CACPe,OAAQ,IAAKM,CAAAA,IAAL,CAAUL,UAAUM,CAAAA,MAAV,CAAiBJ,SAAjB,CAA8BhB,IAAKF,CAAAA,MAAnC,CAAV,CAAA,CAAwD,CAAxD,CAA4D,CAD7D,CAAR,CAEHG,MAAO,CAAER,IAAKU,EAALV,CAAUwB,WAAVxB,CAAqBQ,KAAMH,CAAAA,MAA7B,CACHe,OAAQ,IAAKM,CAAAA,IAAL,CAAUJ,KAAQK,CAAAA,MAAR,CAAeF,UAAf,CAAwB,CAAxB,CAAV,CAAA,CAAwC,CAAxC,CAA4C,CADjD,CAFJ,CAFX,CAOO,IA3BiD,CA+B5DG,QAASA,mBAAkB,CAACpC,MAAD,CAASK,MAAT,CAAiBgC,OAAjB,CAA0B,CACjD,IAAIC;AAASjC,MAAOkC,CAAAA,GAAP,CAAWC,CAAA,EAAKjC,SAAAkC,CAAUJ,OAAVI,CAAmBD,CAAEvB,CAAAA,IAArBwB,CAA2BA,CAAAA,KAA3C,CACb,IAAI,CAACH,MAAOI,CAAAA,KAAP,CAAaC,CAAA,EAAKA,CAAlB,CAAL,CACI,MAAO,KACX,KAAIC,SAAWvC,MAAOkC,CAAAA,GAAP,CAAW,CAACC,CAAD,CAAIK,CAAJ,CAAA,EAAU/B,gBAAA,CAAiBuB,OAAjB,CAA0BC,MAAA,CAAOO,CAAP,CAA1B,CAAqCL,CAAEvB,CAAAA,IAAvC,CAA6CuB,CAAEtB,CAAAA,EAA/C,CAArB,CACf,IAAc,CAAd,EAAIlB,MAAJ,EAAmC,CAAC4C,QAASF,CAAAA,KAAT,CAAeC,CAAA,EAAKA,CAApB,CAApC,CAA4D,CACxD,IAAIG,MAAQ,CACZ,OAAOT,QAAQU,CAAAA,aAAR,CAAsBC,KAAA,EAAS,CAClC,IAAI,CAAEjC,IAAF,CAAQC,KAAR,CAAA,CAAkBsB,MAAA,CAAOQ,KAAA,EAAP,CACtB,IAAIF,QAAA,CAASE,KAAT,CAAJ,CACI,MAAO,CAAEE,KAAF,CACX,KAAIC,MAAQlC,IAAKF,CAAAA,MAAboC,CAAsB,CAC1B,OAAO,CACHC,QAAS,CAAC,CAAEjC,KAAM+B,KAAM/B,CAAAA,IAAd,CAAoBkC,OAAQpC,IAARoC,CAAe,GAAnC,CAAD,CAA2C,CAAElC,KAAM+B,KAAM9B,CAAAA,EAAd,CAAkBiC,OAAQ,GAARA,CAAcnC,KAAhC,CAA3C,CADN,CAEHgC,MAAO/C,cAAMmD,CAAAA,eAAgBJ,CAAAA,KAAtB,CAA4BA,KAAMK,CAAAA,MAAlC,CAA2CJ,KAA3C,CAAkDD,KAAMtC,CAAAA,IAAxD,CAA+DuC,KAA/D,CAFJ,CAL2B,CAA/B,CAFiD,CAavD,GAAc,CAAd;AAAIjD,MAAJ,EAAiC4C,QAASU,CAAAA,IAAT,CAAcX,CAAA,EAAKA,CAAnB,CAAjC,CAAwD,CACrDO,MAAAA,CAAU,EACd,KAAK,IAAIL,EAAI,CAAR,CAAWU,OAAhB,CAAyBV,CAAzB,CAA6BD,QAAS/B,CAAAA,MAAtC,CAA8CgC,CAAA,EAA9C,CACI,GAAIU,OAAJ,CAAcX,QAAA,CAASC,CAAT,CAAd,CAA2B,CACnBW,MAAAA,CAAQlB,MAAA,CAAOO,CAAP,CAAZ,KAAuB,CAAE9B,IAAF,CAAQC,KAAR,CAAA,CAAkBuC,OACzCL,OAAQO,CAAAA,IAAR,CAAa,CAAExC,KAAMF,IAAKP,CAAAA,GAAXS,CAAiBuC,MAAMzC,CAAAA,IAAKF,CAAAA,MAA9B,CAAsCK,GAAIH,IAAKP,CAAAA,GAATU,CAAeH,IAAKa,CAAAA,MAA1D,CAAb,CAAiF,CAAEX,KAAMD,KAAMR,CAAAA,GAAZS,CAAkBD,KAAMY,CAAAA,MAA1B,CAAkCV,GAAIF,KAAMR,CAAAA,GAAVU,CAAgBsC,MAAMxC,CAAAA,KAAMH,CAAAA,MAA9D,CAAjF,CAFuB,CAI/B,MAAO,CAAEqC,QAAAA,MAAF,CAPkD,CAS7D,MAAO,KA3B0C,CA8BrDQ,QAASA,kBAAiB,CAAC1D,MAAD,CAASK,MAAT,CAAiBJ,KAAjB,CAAwB,CAC9C,IAAI0D,MAAQ,EACZ,KAAIC,SAAW,CAAC,CAChB,KAAK,IAAI,CAAE3C,IAAF,CAAQC,EAAR,CAAT,EAAyBb,OAAzB,CAAiC,CACzBwD,MAAAA,CAASF,KAAM9C,CAAAA,MAAnB,KAA2BiD,UAAY,GACvC,KAAK,IAAItD,IAAMS,IAAf,CAAqBT,GAArB,EAA4BU,EAA5B,CAAA,CAAiC,CAC7B,IAAI6C;AAAO9D,KAAM+D,CAAAA,GAAIC,CAAAA,MAAV,CAAiBzD,GAAjB,CACX,IAAIuD,aAAK9C,CAAAA,IAAT,CAAgB2C,QAAhB,GAA6B3C,IAA7B,EAAqCC,EAArC,EAA2CA,EAA3C,CAAgD6C,aAAK9C,CAAAA,IAArD,EAA4D,CACxD2C,QAAA,CAAWG,aAAK9C,CAAAA,IAChB,KAAIuC,MAAQjD,SAAA,CAAUN,KAAV,CAAiBO,GAAjB,CAAsBuD,CAAAA,IAClC,IAAI,CAACP,KAAL,CACI,QACAU,IAAAA,CAAS,MAAO1C,CAAAA,IAAP,CAAYuC,aAAKI,CAAAA,IAAjB,CAAA,CAAuB,CAAvB,CAA0BtD,CAAAA,MACvC,KAAIuD,MAAQF,GAARE,EAAkBL,aAAKlD,CAAAA,MAA3B,CACI0C,QAAUQ,aAAKI,CAAAA,IAAKxC,CAAAA,KAAV,CAAgBuC,GAAhB,CAAwBA,GAAxB,CAAiCV,KAAM3C,CAAAA,MAAvC,CAAA,EAAkD2C,KAAlD,CAA0DU,GAA1D,CAAmE,CAAC,CAC9EA,IAAJ,CAAaH,aAAKI,CAAAA,IAAKtD,CAAAA,MAAvB,EAAiCqD,GAAjC,CAA0CJ,SAA1C,GACIA,SADJ,CACgBI,GADhB,CAEAP,MAAMF,CAAAA,IAAN,CAAW,CAAEM,KAAAA,aAAF,CAAQR,OAAR,CAAiBC,KAAjB,CAAwBU,OAAAA,GAAxB,CAAgCE,KAAhC,CAAuCC,OAAQ,CAAA,CAA/C,CAAX,CAVwD,CAY5D7D,GAAA,CAAMuD,aAAK7C,CAAAA,EAAX,CAAgB,CAda,CAgBjC,GAAgB,GAAhB,CAAI4C,SAAJ,CACI,IAASjB,aAAT;AAAagB,MAAb,CAAqBhB,aAArB,CAAyBc,KAAM9C,CAAAA,MAA/B,CAAuCgC,aAAA,EAAvC,CACQc,KAAA,CAAMd,aAAN,CAASqB,CAAAA,MAAb,CAAsBP,KAAA,CAAMd,aAAN,CAASkB,CAAAA,IAAKI,CAAAA,IAAKtD,CAAAA,MAAzC,GACI8C,KAAA,CAAMd,aAAN,CAASqB,CAAAA,MADb,CACsBJ,SADtB,CAEJH,MAAM9C,CAAAA,MAAV,EAAoBgD,MAApB,CAA6B,CAA7B,GACIF,KAAA,CAAME,MAAN,CAAcQ,CAAAA,MADlB,CAC2B,CAAA,CAD3B,CAtB6B,CAyBjC,GAAc,CAAd,EAAIrE,MAAJ,EAAmC2D,KAAML,CAAAA,IAAN,CAAWgB,CAAA,EAAiB,CAAjB,CAAKA,CAAEf,CAAAA,OAAP,GAAuB,CAACe,CAAEF,CAAAA,KAA1B,EAAmCE,CAAED,CAAAA,MAArC,CAAX,CAAnC,CAA6F,CACrFnB,MAAAA,CAAU,EACd,KAAK,IAAI,CAAEa,IAAF,CAAQP,KAAR,CAAeU,MAAf,CAAuBE,KAAvB,CAA8BC,MAA9B,CAAT,EAAmDV,MAAnD,CACQU,CAAAA,MAAJ,EAAeD,KAAf,EACIlB,MAAQO,CAAAA,IAAR,CAAa,CAAExC,KAAM8C,IAAK9C,CAAAA,IAAXA,CAAkBiD,MAApB,CAA4Bf,OAAQK,KAARL,CAAgB,GAA5C,CAAb,CACJoB,MAAAA,CAAYtE,KAAMiD,CAAAA,OAAN,CAAcA,MAAd,CAChB,OAAO,CAAEA,QAASqB,KAAX,CAAsBnE,UAAWH,KAAMG,CAAAA,SAAUmC,CAAAA,GAAhB,CAAoBgC,KAApB,CAA+B,CAA/B,CAAjC,CANkF,CAQxF,GAAc,CAAd,EAAIvE,MAAJ;AAAiC2D,KAAML,CAAAA,IAAN,CAAWgB,CAAA,EAAkB,CAAlB,EAAKA,CAAEf,CAAAA,OAAlB,CAAjC,CAAkE,CAC/DL,KAAAA,CAAU,EACd,KAAK,IAAI,CAAEa,IAAF,CAAQR,OAAR,CAAiBC,KAAjB,CAAT,EAAqCG,MAArC,CACmB,CAAf,EAAIJ,OAAJ,GACQtC,KAGJ,CAHW8C,IAAK9C,CAAAA,IAGhB,CAHuBsC,OAGvB,CAHgCrC,MAGhC,CAHqCD,KAGrC,CAH4CuC,KAAM3C,CAAAA,MAGlD,CAFiC,GAEjC,EAFIkD,IAAKI,CAAAA,IAAL,CAAUjD,MAAV,CAAe6C,IAAK9C,CAAAA,IAApB,CAEJ,EADIC,MAAA,EACJ,CAAAgC,KAAQO,CAAAA,IAAR,CAAa,CAAExC,KAAAA,KAAF,CAAQC,GAAAA,MAAR,CAAb,CAJJ,CAMJ,OAAO,CAAEgC,QAAAA,KAAF,CAT4D,CAWvE,MAAO,KA/CuC,CAnIlDsB,MAAOC,CAAAA,cAAP,CAAsB5E,OAAtB,CAA+B,YAA/B,CAA6C,CAAE6E,MAAO,CAAA,CAAT,CAA7C,CAEA,KAAIzE,eAAQN,OAAA,CAAQ,sDAAR,CAMNgF,OAAAA,CAAgBC,MAAAD,EAAU,CAC5B,IAAIE,OAAStE,SAAA,CAAUqE,MAAO3E,CAAAA,KAAjB,CACb,OAAO4E,OAAOd,CAAAA,IAAP,CAAce,iBAAA,CAAkBF,MAAlB,CAAd,CAA0CC,MAAOpC,CAAAA,KAAP,CAAesC,kBAAA,CAAmBH,MAAnB,CAAf;AAA4C,CAAA,CAFjE,CAmBhC,OAAME,kBAAoBhF,OAAA,CAAQ4D,iBAAR,CAA2B,CAA3B,CAIpBsB,QAAAA,CAAclF,OAAA,CAAQ4D,iBAAR,CAA2B,CAA3B,CAIduB,OAAAA,CAAgBnF,OAAA,CAAQ4D,iBAAR,CAA2B,CAA3B,CAOtB,OAAMqB,mBAAqBjF,OAAA,CAAQsC,kBAAR,CAA4B,CAA5B,CAA3B,CAIM8C,aAAepF,OAAA,CAAQsC,kBAAR,CAA4B,CAA5B,CAJrB,CAQM+C,eAAiBrF,OAAA,CAAQsC,kBAAR,CAA4B,CAA5B,CARvB,CAeMgD,cAAgB,CAClB,CAAEC,IAAK,OAAP,CAAgBC,IAAKX,MAArB,CADkB,CAElB,CAAEU,IAAK,OAAP,CAAgBC,IAAKP,kBAArB,CAFkB,CA4HtBlF,QAAQqF,CAAAA,YAAR,CAAuBA,YACvBrF,QAAQsF,CAAAA,cAAR,CAAyBA,cACzBtF,QAAQuF,CAAAA,aAAR,CAAwBA,aACxBvF,QAAQmF,CAAAA,WAAR,CAAsBA,OACtBnF,QAAQoF,CAAAA,aAAR;AAAwBA,MACxBpF,QAAQkF,CAAAA,kBAAR,CAA6BA,kBAC7BlF,QAAQ8E,CAAAA,aAAR,CAAwBA,MACxB9E,QAAQiF,CAAAA,iBAAR,CAA4BA,iBA/LuF;",
"sources":["node_modules/@codemirror/comment/dist/index.cjs"],
"sourcesContent":["shadow$provide[\"module$node_modules$$codemirror$comment$dist$index_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar state = require('@codemirror/state');\n\n/**\nComment or uncomment the current selection. Will use line comments\nif available, otherwise falling back to block comments.\n*/\nconst toggleComment = target => {\n    let config = getConfig(target.state);\n    return config.line ? toggleLineComment(target) : config.block ? toggleBlockComment(target) : false;\n};\nfunction command(f, option) {\n    return ({ state, dispatch }) => {\n        let tr = f(option, state.selection.ranges, state);\n        if (!tr)\n            return false;\n        dispatch(state.update(tr));\n        return true;\n    };\n}\n/**\nComment or uncomment the current selection using line comments.\nThe line comment syntax is taken from the\n[`commentTokens`](https://codemirror.net/6/docs/ref/#comment.CommentTokens) [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).\n*/\nconst toggleLineComment = command(changeLineComment, 0 /* Toggle */);\n/**\nComment the current selection using line comments.\n*/\nconst lineComment = command(changeLineComment, 1 /* Comment */);\n/**\nUncomment the current selection using line comments.\n*/\nconst lineUncomment = command(changeLineComment, 2 /* Uncomment */);\n/**\nComment or uncomment the current selection using block comments.\nThe block comment syntax is taken from the\n[`commentTokens`](https://codemirror.net/6/docs/ref/#comment.CommentTokens) [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).\n*/\nconst toggleBlockComment = command(changeBlockComment, 0 /* Toggle */);\n/**\nComment the current selection using block comments.\n*/\nconst blockComment = command(changeBlockComment, 1 /* Comment */);\n/**\nUncomment the current selection using block comments.\n*/\nconst blockUncomment = command(changeBlockComment, 2 /* Uncomment */);\n/**\nDefault key bindings for this package.\n\n - Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#comment.toggleComment).\n - Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#comment.toggleBlockComment).\n*/\nconst commentKeymap = [\n    { key: \"Mod-/\", run: toggleComment },\n    { key: \"Alt-A\", run: toggleBlockComment }\n];\nfunction getConfig(state, pos = state.selection.main.head) {\n    let data = state.languageDataAt(\"commentTokens\", pos);\n    return data.length ? data[0] : {};\n}\nconst SearchMargin = 50;\n/**\nDetermines if the given range is block-commented in the given\nstate.\n*/\nfunction findBlockComment(state, { open, close }, from, to) {\n    let textBefore = state.sliceDoc(from - SearchMargin, from);\n    let textAfter = state.sliceDoc(to, to + SearchMargin);\n    let spaceBefore = /\\s*$/.exec(textBefore)[0].length, spaceAfter = /^\\s*/.exec(textAfter)[0].length;\n    let beforeOff = textBefore.length - spaceBefore;\n    if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&\n        textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {\n        return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },\n            close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };\n    }\n    let startText, endText;\n    if (to - from <= 2 * SearchMargin) {\n        startText = endText = state.sliceDoc(from, to);\n    }\n    else {\n        startText = state.sliceDoc(from, from + SearchMargin);\n        endText = state.sliceDoc(to - SearchMargin, to);\n    }\n    let startSpace = /^\\s*/.exec(startText)[0].length, endSpace = /\\s*$/.exec(endText)[0].length;\n    let endOff = endText.length - endSpace - close.length;\n    if (startText.slice(startSpace, startSpace + open.length) == open &&\n        endText.slice(endOff, endOff + close.length) == close) {\n        return { open: { pos: from + startSpace + open.length,\n                margin: /\\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },\n            close: { pos: to - endSpace - close.length,\n                margin: /\\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };\n    }\n    return null;\n}\n// Performs toggle, comment and uncomment of block comments in\n// languages that support them.\nfunction changeBlockComment(option, ranges, state$1) {\n    let tokens = ranges.map(r => getConfig(state$1, r.from).block);\n    if (!tokens.every(c => c))\n        return null;\n    let comments = ranges.map((r, i) => findBlockComment(state$1, tokens[i], r.from, r.to));\n    if (option != 2 /* Uncomment */ && !comments.every(c => c)) {\n        let index = 0;\n        return state$1.changeByRange(range => {\n            let { open, close } = tokens[index++];\n            if (comments[index])\n                return { range };\n            let shift = open.length + 1;\n            return {\n                changes: [{ from: range.from, insert: open + \" \" }, { from: range.to, insert: \" \" + close }],\n                range: state.EditorSelection.range(range.anchor + shift, range.head + shift)\n            };\n        });\n    }\n    else if (option != 1 /* Comment */ && comments.some(c => c)) {\n        let changes = [];\n        for (let i = 0, comment; i < comments.length; i++)\n            if (comment = comments[i]) {\n                let token = tokens[i], { open, close } = comment;\n                changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });\n            }\n        return { changes };\n    }\n    return null;\n}\n// Performs toggle, comment and uncomment of line comments.\nfunction changeLineComment(option, ranges, state) {\n    let lines = [];\n    let prevLine = -1;\n    for (let { from, to } of ranges) {\n        let startI = lines.length, minIndent = 1e9;\n        for (let pos = from; pos <= to;) {\n            let line = state.doc.lineAt(pos);\n            if (line.from > prevLine && (from == to || to > line.from)) {\n                prevLine = line.from;\n                let token = getConfig(state, pos).line;\n                if (!token)\n                    continue;\n                let indent = /^\\s*/.exec(line.text)[0].length;\n                let empty = indent == line.length;\n                let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;\n                if (indent < line.text.length && indent < minIndent)\n                    minIndent = indent;\n                lines.push({ line, comment, token, indent, empty, single: false });\n            }\n            pos = line.to + 1;\n        }\n        if (minIndent < 1e9)\n            for (let i = startI; i < lines.length; i++)\n                if (lines[i].indent < lines[i].line.text.length)\n                    lines[i].indent = minIndent;\n        if (lines.length == startI + 1)\n            lines[startI].single = true;\n    }\n    if (option != 2 /* Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {\n        let changes = [];\n        for (let { line, token, indent, empty, single } of lines)\n            if (single || !empty)\n                changes.push({ from: line.from + indent, insert: token + \" \" });\n        let changeSet = state.changes(changes);\n        return { changes: changeSet, selection: state.selection.map(changeSet, 1) };\n    }\n    else if (option != 1 /* Comment */ && lines.some(l => l.comment >= 0)) {\n        let changes = [];\n        for (let { line, comment, token } of lines)\n            if (comment >= 0) {\n                let from = line.from + comment, to = from + token.length;\n                if (line.text[to - line.from] == \" \")\n                    to++;\n                changes.push({ from, to });\n            }\n        return { changes };\n    }\n    return null;\n}\n\nexports.blockComment = blockComment;\nexports.blockUncomment = blockUncomment;\nexports.commentKeymap = commentKeymap;\nexports.lineComment = lineComment;\nexports.lineUncomment = lineUncomment;\nexports.toggleBlockComment = toggleBlockComment;\nexports.toggleComment = toggleComment;\nexports.toggleLineComment = toggleLineComment;\n\n};"],
"names":["shadow$provide","global","require","module","exports","command","f","option","state","dispatch","tr","selection","ranges","update","getConfig","pos","main","head","data","languageDataAt","length","findBlockComment","open","close","from","to","textBefore","sliceDoc","SearchMargin","textAfter","spaceBefore","exec","spaceAfter","beforeOff","slice","margin","startText","endText","startSpace","endSpace","endOff","test","charAt","changeBlockComment","state$1","tokens","map","r","block","every","c","comments","i","index","changeByRange","range","shift","changes","insert","EditorSelection","anchor","some","comment","token","push","changeLineComment","lines","prevLine","startI","minIndent","line","doc","lineAt","indent","text","empty","single","l","changeSet","Object","defineProperty","value","toggleComment","target","config","toggleLineComment","toggleBlockComment","lineComment","lineUncomment","blockComment","blockUncomment","commentKeymap","key","run"]
}
