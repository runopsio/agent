shadow$provide.module$node_modules$$sentry$tracing$dist$hubextensions=function(global,require,module,exports){function traceHeaders(){var scope=this.getScope();return scope&&(scope=scope.getSpan())?{"sentry-trace":scope.toTraceparent()}:{}}function sample(transaction,options,samplingContext){if(!utils_2.hasTracingEnabled(options))return transaction.sampled=!1,transaction;if(void 0!==transaction.sampled)return transaction.setMetadata({transactionSampling:{method:types_1.TransactionSamplingMethod.Explicit}}),
transaction;"function"===typeof options.tracesSampler?(samplingContext=options.tracesSampler(samplingContext),transaction.setMetadata({transactionSampling:{method:types_1.TransactionSamplingMethod.Sampler,rate:Number(samplingContext)}})):void 0!==samplingContext.parentSampled?(samplingContext=samplingContext.parentSampled,transaction.setMetadata({transactionSampling:{method:types_1.TransactionSamplingMethod.Inheritance}})):(samplingContext=options.tracesSampleRate,transaction.setMetadata({transactionSampling:{method:types_1.TransactionSamplingMethod.Rate,
rate:Number(samplingContext)}}));var JSCompiler_inline_result=samplingContext;isNaN(JSCompiler_inline_result)||"number"!==typeof JSCompiler_inline_result&&"boolean"!==typeof JSCompiler_inline_result?(utils_1.logger.warn("[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got "+JSON.stringify(JSCompiler_inline_result)+" of type "+JSON.stringify(typeof JSCompiler_inline_result)+"."),JSCompiler_inline_result=!1):0>JSCompiler_inline_result||1<JSCompiler_inline_result?
(utils_1.logger.warn("[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got "+JSCompiler_inline_result+"."),JSCompiler_inline_result=!1):JSCompiler_inline_result=!0;if(!JSCompiler_inline_result)return utils_1.logger.warn("[Tracing] Discarding transaction because of invalid sample rate."),transaction.sampled=!1,transaction;if(!samplingContext)return utils_1.logger.log("[Tracing] Discarding transaction because "+("function"===typeof options.tracesSampler?"tracesSampler returned 0 or false":
"a negative sampling decision was inherited or tracesSampleRate is set to 0")),transaction.sampled=!1,transaction;transaction.sampled=Math.random()<samplingContext;if(!transaction.sampled)return utils_1.logger.log("[Tracing] Discarding transaction because it's not included in the random sample (sampling rate \x3d "+Number(samplingContext)+")"),transaction;utils_1.logger.log("[Tracing] starting "+transaction.op+" transaction - "+transaction.name);return transaction}function _startTransaction(transactionContext,
customSamplingContext){var _a,_b,options=(null===(_a=this.getClient())||void 0===_a?void 0:_a.getOptions())||{};_a=new transaction_1.Transaction(transactionContext,this);_a=sample(_a,options,tslib_1.__assign({parentSampled:transactionContext.parentSampled,transactionContext},customSamplingContext));_a.sampled&&_a.initSpanRecorder(null===(_b=options._experiments)||void 0===_b?void 0:_b.maxSpans);return _a}function _addTracingExtensions(){var carrier=hub_1.getMainCarrier();carrier.__SENTRY__&&(carrier.__SENTRY__.extensions=
carrier.__SENTRY__.extensions||{},carrier.__SENTRY__.extensions.startTransaction||(carrier.__SENTRY__.extensions.startTransaction=_startTransaction),carrier.__SENTRY__.extensions.traceHeaders||(carrier.__SENTRY__.extensions.traceHeaders=traceHeaders))}function _autoloadDatabaseIntegrations(){var carrier=hub_1.getMainCarrier();if(carrier.__SENTRY__){var packageToIntegrationMapping={mongodb:function(){return new (utils_1.dynamicRequire(module,"./integrations/node/mongo").Mongo)},mongoose:function(){return new (utils_1.dynamicRequire(module,
"./integrations/node/mongo").Mongo)({mongoose:!0})},mysql:function(){return new (utils_1.dynamicRequire(module,"./integrations/node/mysql").Mysql)},pg:function(){return new (utils_1.dynamicRequire(module,"./integrations/node/postgres").Postgres)}},mappedPackages=Object.keys(packageToIntegrationMapping).filter(function(moduleName){return!!utils_1.loadModule(moduleName)}).map(function(pkg){try{return packageToIntegrationMapping[pkg]()}catch(e){}}).filter(function(p){return p});0<mappedPackages.length&&
(carrier.__SENTRY__.integrations=tslib_1.__spread(carrier.__SENTRY__.integrations||[],mappedPackages))}}Object.defineProperty(exports,"__esModule",{value:!0});var tslib_1=require("module$node_modules$tslib$tslib"),hub_1=require("module$node_modules$$sentry$hub$dist$index"),types_1=require("module$node_modules$$sentry$types$dist$index"),utils_1=require("module$node_modules$$sentry$utils$dist$index"),errors_1=require("module$node_modules$$sentry$tracing$dist$errors"),idletransaction_1=require("module$node_modules$$sentry$tracing$dist$idletransaction"),
transaction_1=require("module$node_modules$$sentry$tracing$dist$transaction"),utils_2=require("module$node_modules$$sentry$tracing$dist$utils");exports.startIdleTransaction=function(hub,transactionContext,idleTimeout,onScope,customSamplingContext){var _a,_b,options=(null===(_a=hub.getClient())||void 0===_a?void 0:_a.getOptions())||{};hub=new idletransaction_1.IdleTransaction(transactionContext,hub,idleTimeout,onScope);hub=sample(hub,options,tslib_1.__assign({parentSampled:transactionContext.parentSampled,
transactionContext},customSamplingContext));hub.sampled&&hub.initSpanRecorder(null===(_b=options._experiments)||void 0===_b?void 0:_b.maxSpans);return hub};exports._addTracingExtensions=_addTracingExtensions;exports.addExtensionMethods=function(){_addTracingExtensions();utils_1.isNodeEnv()&&_autoloadDatabaseIntegrations();errors_1.registerErrorInstrumentation()}}
//# sourceMappingURL=module$node_modules$$sentry$tracing$dist$hubextensions.js.map
