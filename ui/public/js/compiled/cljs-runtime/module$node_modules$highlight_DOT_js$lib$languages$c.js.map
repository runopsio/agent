{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$c.js",
"lineCount":9,
"mappings":"AAAAA,cAAA,CAAA,oDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAqBjHC,QAASA,SAAQ,CAACC,EAAD,CAAK,CACpB,MAAOC,OAAA,CAAO,KAAP,CAAcD,EAAd,CAAkB,IAAlB,CADa,CAQtBC,QAASA,OAAM,CAAC,GAAGC,IAAJ,CAAU,CAEvB,MADeA,KAAKC,CAAAA,GAAL,CAAUC,CAAD,EAAO,CAlBH,CAAA,CAkBUA,CAnBtC,CACkB,QAAlB,GAAI,MAkBkCA,EAlBtC,CAkBsCA,CAlBtC,CAkBsCA,CAhB5BC,CAAAA,MAHV,CAAgB,IAmBe,OAAA,EAAA,CAAhB,CAA2BC,CAAAA,IAA3BC,CAAgC,EAAhCA,CADQ,CAsVzBV,MAAOC,CAAAA,OAAP,CA1UAU,QAAU,CAACC,IAAD,CAAO,CAIf,IAAMC,oBAAsBD,IAAKE,CAAAA,OAAL,CAAa,IAAb,CAAmB,GAAnB,CAAwB,CAClDC,SAAU,CACR,CACEC,MAAO,MADT,CADQ,CADwC,CAAxB,CAU5B,OAAMC,iBAAmB,sBAAnBA,CAEJf,QAAA,CAJmBgB,iBAInB,CAFID,CAGJ,eAHIA,CAGcf,QAAA,CAJSiB,sBAIT,CAHdF,CAIN,GAJA,CAOMG;AAAQ,CACZC,UAAW,MADC,CAEZC,SAAU,CACR,CAAEN,MAAO,oBAAT,CADQ,CAER,CAAEO,MAAO,uBAAT,CAFQ,CAFE,CAPd,CAmBMC,QAAU,CACdH,UAAW,QADG,CAEdC,SAAU,CACR,CACEN,MAAO,aADT,CAEES,IAAK,GAFP,CAGEC,QAAS,KAHX,CAIEX,SAAU,CAAEH,IAAKe,CAAAA,gBAAP,CAJZ,CADQ,CAOR,CACEX,MAAO,qEADT,CAEES,IAAK,GAFP,CAGEC,QAAS,GAHX,CAPQ,CAYRd,IAAKgB,CAAAA,iBAAL,CAAuB,CACrBZ,MAAO,kCADc,CAErBS,IAAK,qBAFgB,CAAvB,CAZQ,CAFI,CAnBhB,CAwCMI,QAAU,CACdR,UAAW,QADG,CAEdC,SAAU,CACR,CACEN,MAAO,eADT,CADQ,CAIR,CACEA,MAAO,uFADT,CAJQ;AAOR,CACEA,MAAO,qFADT,CAPQ,CAFI,CAadc,UAAW,CAbG,CAxChB,CAwDMC,aAAe,CACnBV,UAAW,MADQ,CAEnBL,MAAO,cAFY,CAGnBS,IAAK,GAHc,CAInBO,SAAU,CACRC,QACE,wFAFM,CAJS,CASnBlB,SAAU,CACR,CACEC,MAAO,MADT,CAEEc,UAAW,CAFb,CADQ,CAKRlB,IAAKsB,CAAAA,OAAL,CAAaV,OAAb,CAAsB,CACpBH,UAAW,QADS,CAAtB,CALQ,CAQR,CACEA,UAAW,QADb,CAEEL,MAAO,OAFT,CARQ,CAYRH,mBAZQ,CAaRD,IAAKuB,CAAAA,oBAbG,CATS,CAxDrB,CAkFMC,WAAa,CACjBf,UAAW,OADM,CAEjBL,MAAOd,QAAA,CAtFYgB,iBAsFZ,CAAPF;AAAgCJ,IAAKyB,CAAAA,QAFpB,CAGjBP,UAAW,CAHM,CAlFnB,CAwFMQ,eAAiBpC,QAAA,CA1FFgB,iBA0FE,CAAjBoB,CAA0C1B,IAAKyB,CAAAA,QAA/CC,CAA0D,SAxFhE,CA6JMC,SAAW,CACfN,QApEiBO,mTAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAmEF,CAEfC,KAxBcC,0IAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAsBC;AAGfC,QAAS,iBAHM,CAKfC,SAAU,kzBALK,CA7JjB;AA6KMC,oBAAsB,CAC1Bd,YAD0B,CAE1BX,KAF0B,CAG1BP,mBAH0B,CAI1BD,IAAKuB,CAAAA,oBAJqB,CAK1BN,OAL0B,CAM1BL,OAN0B,CA7K5B,CAsLMsB,mBAAqB,CAIzBxB,SAAU,CACR,CACEN,MAAO,GADT,CAEES,IAAK,GAFP,CADQ,CAKR,CACET,MAAO,IADT,CAEES,IAAK,IAFP,CALQ,CASR,CACEsB,cAAe,uBADjB,CAEEtB,IAAK,GAFP,CATQ,CAJe,CAkBzBO,SAAUO,QAlBe,CAmBzBxB,SAAU8B,mBAAoBzC,CAAAA,MAApB,CAA2B,CACnC,CACEY,MAAO,IADT,CAEES,IAAK,IAFP,CAGEO,SAAUO,QAHZ,CAIExB,SAAU8B,mBAAoBzC,CAAAA,MAApB,CAA2B,CAAE,MAAF,CAA3B,CAJZ,CAKE0B,UAAW,CALb,CADmC,CAA3B,CAnBe,CA4BzBA,UAAW,CA5Bc,CA+BrBkB,oBAAAA,CAAuB,CAC3BhC,MAAO,GAAPA,CAAaC,gBAAbD,CAAgC,iBAAhCA,CAAiDsB,cADtB,CAE3BW,YAAa,CAAA,CAFc,CAG3BxB,IAAK,OAHsB,CAI3ByB,WAAY,CAAA,CAJe;AAK3BlB,SAAUO,QALiB,CAM3Bb,QAAS,gBANkB,CAO3BX,SAAU,CACR,CACEC,MAjOmBmC,oBAgOrB,CAEEnB,SAAUO,QAFZ,CAGET,UAAW,CAHb,CADQ,CAMR,CACEd,MAAOsB,cADT,CAEEW,YAAa,CAAA,CAFf,CAGElC,SAAU,CACRH,IAAKsB,CAAAA,OAAL,CAAaE,UAAb,CAAyB,CAAEf,UAAW,gBAAb,CAAzB,CADQ,CAHZ,CAMES,UAAW,CANb,CANQ,CAgBR,CACEA,UAAW,CADb,CAEEP,MAAO,GAFT,CAhBQ,CAoBR,CACEF,UAAW,QADb,CAEEL,MAAO,IAFT,CAGES,IAAK,IAHP,CAIEO,SAAUO,QAJZ,CAKET,UAAW,CALb,CAMEf,SAAU,CACRF,mBADQ,CAERD,IAAKuB,CAAAA,oBAFG,CAGRX,OAHQ,CAIRK,OAJQ,CAKRT,KALQ,CAOR,CACEJ,MAAO,IADT,CAEES,IAAK,IAFP,CAGEO,SAAUO,QAHZ,CAIET,UAAW,CAJb,CAKEf,SAAU,CACR,MADQ,CAERF,mBAFQ,CAGRD,IAAKuB,CAAAA,oBAHG;AAIRX,OAJQ,CAKRK,OALQ,CAMRT,KANQ,CALZ,CAPQ,CANZ,CApBQ,CAiDRA,KAjDQ,CAkDRP,mBAlDQ,CAmDRD,IAAKuB,CAAAA,oBAnDG,CAoDRJ,YApDQ,CAPiB,CA+D7B,OAAO,CACLqB,KAAM,GADD,CAELC,QAAS,CACP,GADO,CAFJ,CAKLrB,SAAUO,QALL,CAQLe,kBAAmB,CAAA,CARd,CASL5B,QAAS,OATJ,CAULX,SAAU,EAAGX,CAAAA,MAAH,CACR0C,kBADQ,CAERE,mBAFQ,CAGRH,mBAHQ,CAIR,CACEd,YADF,CAEE,CACEf,MAAOJ,IAAKyB,CAAAA,QAAZrB,CAAuB,IADzB,CAEEgB,SAAUO,QAFZ,CAFF,CAME,CACElB,UAAW,OADb,CAEE0B,cAAe,yBAFjB,CAGEtB,IAAK,UAHP,CAIEV,SAAU,CACR,CACEgC,cAAe,oBADjB,CADQ,CAIRnC,IAAKwB,CAAAA,UAJG,CAJZ,CANF,CAJQ,CAVL,CAgCLnC,QAAS,CACPsD,aAAcxB,YADP,CAEPyB,QAAShC,OAFF;AAGPQ,SAAUO,QAHH,CAhCJ,CAlSQ,CAzCgG;",
"sources":["node_modules/highlight_DOT_js/lib/languages/c.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$c\"] = function(global,require,module,exports) {\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(?:', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: C\nCategory: common, system\nWebsite: https://en.wikipedia.org/wiki/C_(programming_language)\n*/\n\n/** @type LanguageFn */\nfunction c(hljs) {\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\n    contains: [\n      {\n        begin: /\\\\\\n/\n      }\n    ]\n  });\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  const FUNCTION_TYPE_RE = '(' +\n    DECLTYPE_AUTO_RE + '|' +\n    optional(NAMESPACE_RE) +\n    '[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) +\n  ')';\n\n\n  const TYPES = {\n    className: 'type',\n    variants: [\n      { begin: '\\\\b[a-z\\\\d_]*_t\\\\b' },\n      { match: /\\batomic_[a-z]{3,6}\\b/}\n    ]\n\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  const STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"',\n        end: '\"',\n        illegal: '\\\\n',\n        contains: [ hljs.BACKSLASH_ESCAPE ]\n      },\n      {\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\n        end: '\\'',\n        illegal: '.'\n      },\n      hljs.END_SAME_AS_BEGIN({\n        begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n        end: /\\)([^()\\\\ ]{0,16})\"/\n      })\n    ]\n  };\n\n  const NUMBERS = {\n    className: 'number',\n    variants: [\n      {\n        begin: '\\\\b(0b[01\\']+)'\n      },\n      {\n        begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'\n      },\n      {\n        begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n      }\n    ],\n    relevance: 0\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      keyword:\n        'if else elif endif define undef warning error line ' +\n        'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/,\n        relevance: 0\n      },\n      hljs.inherit(STRINGS, {\n        className: 'string'\n      }),\n      {\n        className: 'string',\n        begin: /<.*?>/\n      },\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  const TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n\n  const FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  const C_KEYWORDS = [\n    \"asm\",\n    \"auto\",\n    \"break\",\n    \"case\",\n    \"const\",\n    \"continue\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"enum\",\n    \"extern\",\n    \"for\",\n    \"fortran\",\n    \"goto\",\n    \"if\",\n    \"inline\",\n    \"register\",\n    \"restrict\",\n    \"return\",\n    \"sizeof\",\n    \"static\",\n    \"struct\",\n    \"switch\",\n    \"typedef\",\n    \"union\",\n    \"volatile\",\n    \"while\",\n    \"_Alignas\",\n    \"_Alignof\",\n    \"_Atomic\",\n    \"_Generic\",\n    \"_Noreturn\",\n    \"_Static_assert\",\n    \"_Thread_local\",\n    // aliases\n    \"alignas\",\n    \"alignof\",\n    \"noreturn\",\n    \"static_assert\",\n    \"thread_local\",\n    // not a C keyword but is, for all intents and purposes, treated exactly like one.\n    \"_Pragma\"\n  ];\n\n  const C_TYPES = [\n    \"float\",\n    \"double\",\n    \"signed\",\n    \"unsigned\",\n    \"int\",\n    \"short\",\n    \"long\",\n    \"char\",\n    \"void\",\n    \"_Bool\",\n    \"_Complex\",\n    \"_Imaginary\",\n    \"_Decimal32\",\n    \"_Decimal64\",\n    \"_Decimal128\",\n    // aliases\n    \"complex\",\n    \"bool\",\n    \"imaginary\"\n  ];\n\n  const KEYWORDS = {\n    keyword: C_KEYWORDS,\n    type: C_TYPES,\n    literal: 'true false NULL',\n    // TODO: apply hinting work similar to what was done in cpp.js\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +\n      'auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set ' +\n      'unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos ' +\n      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +\n      'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +\n      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +\n      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +\n      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +\n      'vfprintf vprintf vsprintf endl initializer_list unique_ptr',\n  };\n\n  const EXPRESSION_CONTAINS = [\n    PREPROCESSOR,\n    TYPES,\n    C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  const EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [\n      {\n        begin: /=/,\n        end: /;/\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/\n      },\n      {\n        beginKeywords: 'new throw return else',\n        end: /;/\n      }\n    ],\n    keywords: KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),\n        relevance: 0\n      }\n    ]),\n    relevance: 0\n  };\n\n  const FUNCTION_DECLARATION = {\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [\n      { // to prevent it from being confused as the function title\n        begin: DECLTYPE_AUTO_RE,\n        keywords: KEYWORDS,\n        relevance: 0\n      },\n      {\n        begin: FUNCTION_TITLE,\n        returnBegin: true,\n        contains: [\n          hljs.inherit(TITLE_MODE, { className: \"title.function\" })\n        ],\n        relevance: 0\n      },\n      // allow for multiple declarations, e.g.:\n      // extern void f(int), g(char);\n      {\n        relevance: 0,\n        match: /,/\n      },\n      {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: KEYWORDS,\n        relevance: 0,\n        contains: [\n          C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          STRINGS,\n          NUMBERS,\n          TYPES,\n          // Count matching parentheses.\n          {\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: KEYWORDS,\n            relevance: 0,\n            contains: [\n              'self',\n              C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              TYPES\n            ]\n          }\n        ]\n      },\n      TYPES,\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      PREPROCESSOR\n    ]\n  };\n\n  return {\n    name: \"C\",\n    aliases: [\n      'h'\n    ],\n    keywords: KEYWORDS,\n    // Until differentiations are added between `c` and `cpp`, `c` will\n    // not be auto-detected to avoid auto-detect conflicts between C and C++\n    disableAutodetect: true,\n    illegal: '</',\n    contains: [].concat(\n      EXPRESSION_CONTEXT,\n      FUNCTION_DECLARATION,\n      EXPRESSION_CONTAINS,\n      [\n        PREPROCESSOR,\n        {\n          begin: hljs.IDENT_RE + '::',\n          keywords: KEYWORDS\n        },\n        {\n          className: 'class',\n          beginKeywords: 'enum class struct union',\n          end: /[{;:<>=]/,\n          contains: [\n            {\n              beginKeywords: \"final class struct\"\n            },\n            hljs.TITLE_MODE\n          ]\n        }\n      ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: KEYWORDS\n    }\n  };\n}\n\nmodule.exports = c;\n\n};"],
"names":["shadow$provide","global","require","module","exports","optional","re","concat","args","map","x","source","join","joined","c","hljs","C_LINE_COMMENT_MODE","COMMENT","contains","begin","FUNCTION_TYPE_RE","NAMESPACE_RE","TEMPLATE_ARGUMENT_RE","TYPES","className","variants","match","STRINGS","end","illegal","BACKSLASH_ESCAPE","END_SAME_AS_BEGIN","NUMBERS","relevance","PREPROCESSOR","keywords","keyword","inherit","C_BLOCK_COMMENT_MODE","TITLE_MODE","IDENT_RE","FUNCTION_TITLE","KEYWORDS","C_KEYWORDS","type","C_TYPES","literal","built_in","EXPRESSION_CONTAINS","EXPRESSION_CONTEXT","beginKeywords","FUNCTION_DECLARATION","returnBegin","excludeEnd","DECLTYPE_AUTO_RE","name","aliases","disableAutodetect","preprocessor","strings"]
}
