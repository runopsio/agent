{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$markdown.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/highlight_DOT_js/lib/languages/markdown.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$markdown\"] = function(global,require,module,exports) {\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: Markdown\nRequires: xml.js\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\nWebsite: https://daringfireball.net/projects/markdown/\nCategory: common, markup\n*/\n\nfunction markdown(hljs) {\n  const INLINE_HTML = {\n    begin: /<\\/?[A-Za-z_]/,\n    end: '>',\n    subLanguage: 'xml',\n    relevance: 0\n  };\n  const HORIZONTAL_RULE = {\n    begin: '^[-\\\\*]{3,}',\n    end: '$'\n  };\n  const CODE = {\n    className: 'code',\n    variants: [\n      // TODO: fix to allow these to work with sublanguage also\n      {\n        begin: '(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*'\n      },\n      {\n        begin: '(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*'\n      },\n      // needed to allow markdown as a sublanguage to work\n      {\n        begin: '```',\n        end: '```+[ ]*$'\n      },\n      {\n        begin: '~~~',\n        end: '~~~+[ ]*$'\n      },\n      {\n        begin: '`.+?`'\n      },\n      {\n        begin: '(?=^( {4}|\\\\t))',\n        // use contains to gobble up multiple lines to allow the block to be whatever size\n        // but only have a single open/close tag vs one per line\n        contains: [\n          {\n            begin: '^( {4}|\\\\t)',\n            end: '(\\\\n)$'\n          }\n        ],\n        relevance: 0\n      }\n    ]\n  };\n  const LIST = {\n    className: 'bullet',\n    begin: '^[ \\t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)',\n    end: '\\\\s+',\n    excludeEnd: true\n  };\n  const LINK_REFERENCE = {\n    begin: /^\\[[^\\n]+\\]:/,\n    returnBegin: true,\n    contains: [\n      {\n        className: 'symbol',\n        begin: /\\[/,\n        end: /\\]/,\n        excludeBegin: true,\n        excludeEnd: true\n      },\n      {\n        className: 'link',\n        begin: /:\\s*/,\n        end: /$/,\n        excludeBegin: true\n      }\n    ]\n  };\n  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\n  const LINK = {\n    variants: [\n      // too much like nested array access in so many languages\n      // to have any real relevance\n      {\n        begin: /\\[.+?\\]\\[.*?\\]/,\n        relevance: 0\n      },\n      // popular internet URLs\n      {\n        begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\n        relevance: 2\n      },\n      {\n        begin: concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\n        relevance: 2\n      },\n      // relative urls\n      {\n        begin: /\\[.+?\\]\\([./?&#].*?\\)/,\n        relevance: 1\n      },\n      // whatever else, lower relevance (might not be a link at all)\n      {\n        begin: /\\[.*?\\]\\(.*?\\)/,\n        relevance: 0\n      }\n    ],\n    returnBegin: true,\n    contains: [\n      {\n        // empty strings for alt or link text\n        match: /\\[(?=\\])/\n      },\n      {\n        className: 'string',\n        relevance: 0,\n        begin: '\\\\[',\n        end: '\\\\]',\n        excludeBegin: true,\n        returnEnd: true\n      },\n      {\n        className: 'link',\n        relevance: 0,\n        begin: '\\\\]\\\\(',\n        end: '\\\\)',\n        excludeBegin: true,\n        excludeEnd: true\n      },\n      {\n        className: 'symbol',\n        relevance: 0,\n        begin: '\\\\]\\\\[',\n        end: '\\\\]',\n        excludeBegin: true,\n        excludeEnd: true\n      }\n    ]\n  };\n  const BOLD = {\n    className: 'strong',\n    contains: [], // defined later\n    variants: [\n      {\n        begin: /_{2}/,\n        end: /_{2}/\n      },\n      {\n        begin: /\\*{2}/,\n        end: /\\*{2}/\n      }\n    ]\n  };\n  const ITALIC = {\n    className: 'emphasis',\n    contains: [], // defined later\n    variants: [\n      {\n        begin: /\\*(?!\\*)/,\n        end: /\\*/\n      },\n      {\n        begin: /_(?!_)/,\n        end: /_/,\n        relevance: 0\n      }\n    ]\n  };\n  BOLD.contains.push(ITALIC);\n  ITALIC.contains.push(BOLD);\n\n  let CONTAINABLE = [\n    INLINE_HTML,\n    LINK\n  ];\n\n  BOLD.contains = BOLD.contains.concat(CONTAINABLE);\n  ITALIC.contains = ITALIC.contains.concat(CONTAINABLE);\n\n  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\n\n  const HEADER = {\n    className: 'section',\n    variants: [\n      {\n        begin: '^#{1,6}',\n        end: '$',\n        contains: CONTAINABLE\n      },\n      {\n        begin: '(?=^.+?\\\\n[=-]{2,}$)',\n        contains: [\n          {\n            begin: '^[=-]*$'\n          },\n          {\n            begin: '^',\n            end: \"\\\\n\",\n            contains: CONTAINABLE\n          }\n        ]\n      }\n    ]\n  };\n\n  const BLOCKQUOTE = {\n    className: 'quote',\n    begin: '^>\\\\s+',\n    contains: CONTAINABLE,\n    end: '$'\n  };\n\n  return {\n    name: 'Markdown',\n    aliases: [\n      'md',\n      'mkdown',\n      'mkd'\n    ],\n    contains: [\n      HEADER,\n      INLINE_HTML,\n      LIST,\n      BOLD,\n      ITALIC,\n      BLOCKQUOTE,\n      CODE,\n      HORIZONTAL_RULE,\n      LINK,\n      LINK_REFERENCE\n    ]\n  };\n}\n\nmodule.exports = markdown;\n\n};"],
"names":["shadow$provide","global","require","module","exports","concat","args","map","x","source","join","joined","markdown","hljs","INLINE_HTML","begin","end","subLanguage","relevance","LINK","variants","URL_SCHEME","returnBegin","contains","match","className","excludeBegin","returnEnd","excludeEnd","BOLD","ITALIC","push","CONTAINABLE","name","aliases","HEADER","LIST","BLOCKQUOTE","CODE","HORIZONTAL_RULE","LINK_REFERENCE"]
}
