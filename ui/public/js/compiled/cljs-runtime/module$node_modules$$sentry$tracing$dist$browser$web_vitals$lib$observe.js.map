{
"version":3,
"file":"module$node_modules$$sentry$tracing$dist$browser$web_vitals$lib$observe.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,uEAAA,CAA4F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAgBpIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CASAH,QAAQI,CAAAA,OAAR,CAAkBC,QAAS,CAACC,IAAD,CAAOC,QAAP,CAAiB,CACxC,GAAI,CACA,GAAIC,mBAAoBC,CAAAA,mBAAoBC,CAAAA,QAAxC,CAAiDJ,IAAjD,CAAJ,GAGiB,aAHjB,GAGQA,IAHR,EAGoC,wBAHpC,EAGgEK,KAHhE,EAGI,CAGA,IAAIC,GAAK,IAAIJ,mBAAJ,CAAwB,QAAS,CAACK,CAAD,CAAI,CAAE,MAAOA,EAAEC,CAAAA,UAAF,EAAeC,CAAAA,GAAf,CAAmBR,QAAnB,CAAT,CAArC,CACTK,GAAGR,CAAAA,OAAH,CAAW,CAAQE,IAAR,CAAcU,SAAU,CAAA,CAAxB,CAAX,CACA,OAAOJ,GALP,CAJJ,CAYJ,MAAOK,CAAP,CAAU,EAb8B,CAzBwF;",
"sources":["node_modules/@sentry/tracing/dist/browser/web-vitals/lib/observe.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$tracing$dist$browser$web_vitals$lib$observe\"] = function(global,require,module,exports) {\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nexports.observe = function (type, callback) {\n    try {\n        if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n            // More extensive feature detect needed for Firefox due to:\n            // https://github.com/GoogleChrome/web-vitals/issues/142\n            if (type === 'first-input' && !('PerformanceEventTiming' in self)) {\n                return;\n            }\n            var po = new PerformanceObserver(function (l) { return l.getEntries().map(callback); });\n            po.observe({ type: type, buffered: true });\n            return po;\n        }\n    }\n    catch (e) {\n        // Do nothing.\n    }\n    return;\n};\n//# sourceMappingURL=observe.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","observe","exports.observe","type","callback","PerformanceObserver","supportedEntryTypes","includes","self","po","l","getEntries","map","buffered","e"]
}
