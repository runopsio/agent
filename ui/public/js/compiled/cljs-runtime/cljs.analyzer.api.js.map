{"version":3,"sources":["cljs/analyzer/api.cljc"],"mappings":"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","names":["var_args","G__75520","cljs.analyzer.api/empty-state","js/Error","cljs.env/*compiler*","cljs.env.default_compiler_env","opts","cljs.analyzer.api/current-state","cljs.analyzer.api/current-file","cljs.analyzer/*cljs-file*","cljs.analyzer.api/current-ns","cljs.analyzer/*cljs-ns*","cljs.analyzer.api/empty-env","cljs.analyzer/empty-env","cljs.analyzer.api/warning-enabled?","warning-type","cljs.analyzer/*cljs-warnings*","cljs.analyzer.api/default-warning-handler","env","extra","cljs.analyzer/default-warning-handler","cljs.analyzer.api/warning-message","warn-type","warn-info","cljs.analyzer/error-message","cljs.analyzer.api/enabled-warnings","G__75526","cljs.analyzer.api/get-options","cljs.analyzer.api.get_options","state","cljs.core/deref","cljs.core.get","G__75528","cljs.analyzer.api/get-js-index","cljs.analyzer.api.get_js_index","cljs.analyzer.api/default-passes","cljs.analyzer/default-passes","cljs.analyzer.api/resolve","sym","cljs.core/map?","cljs.core/Symbol","e75535","*private-var-access-nowarn*-orig-val__75536","*private-var-access-nowarn*-temp-val__75537","cljs.analyzer/*private-var-access-nowarn*","cljs.analyzer.resolve_var","cljs.analyzer/confirm-var-exists-throw","e","cljs.analyzer/resolve-macro-var","G__75540","cljs.analyzer.api/all-ns","cljs.analyzer.api.all_ns","cljs.core/keys","G__75546","cljs.analyzer.api/find-ns","cljs.analyzer.api.find_ns","cljs.core.get_in","G__75548","cljs.analyzer.api/ns-interns","ns","cljs.analyzer.api.ns_interns","cljs.core.merge","G__75550","cljs.analyzer.api/ns-publics","cljs.analyzer.api.ns_publics","cljs.core.remove","p__75551","vec__75552","cljs.core.nth","k","v","cljs.core.into","G__75556","cljs.analyzer.api/ns-resolve","cljs.analyzer.api.ns_resolve","G__75558","cljs.analyzer.api/remove-ns","cljs.analyzer.api.remove_ns","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/dissoc"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.analyzer.api\n  \"This is intended to be a stable api for those who need programmatic access\n  to the analyzer.\"\n  (:refer-clojure :exclude [all-ns ns-interns ns-resolve resolve find-ns\n                            ns-publics remove-ns])\n  #?(:clj  (:require [cljs.analyzer :as ana]\n                     [cljs.env :as env]\n                     [cljs.util :as util]\n                     [clojure.edn :as edn]\n                     [clojure.java.io :as io])\n     :cljs (:require [cljs.analyzer :as ana]\n                     [cljs.env :as env])))\n\n;; =============================================================================\n;; Useful Utilities\n\n(defn empty-state\n  \"Creates an empty compilation state Atom<Map>. The optional opts arg is a map\n   representing the compiler configuration. See the documentation\n   for details: https://clojurescript.org/reference/compiler-options\"\n  ([]\n   (if-not (nil? env/*compiler*)\n     env/*compiler*\n     (env/default-compiler-env)))\n  ([opts]\n   (env/default-compiler-env opts)))\n\n(defn current-state\n  \"Return the current compiler state atom.\"\n  []\n  env/*compiler*)\n\n(defn current-file\n  \"Return the current file under analysis or compilation.\"\n  []\n  ana/*cljs-file*)\n\n(defn current-ns\n  \"Return the current ns under analysis or compilation.\"\n  []\n  ana/*cljs-ns*)\n\n(defmacro with-state\n  \"Run the body with the given compilation state Atom<Map>.\"\n  [state & body]\n  `(env/with-compiler-env ~state\n     ~@body))\n\n(defn empty-env\n  \"Creates an empty analysis environment.\"\n  []\n  (ana/empty-env))\n\n(defmacro no-warn\n  \"Disable analyzer warnings for any analysis executed in body.\"\n  [& body]\n  (let [no-warnings (zipmap (keys ana/*cljs-warnings*) (repeat false))]\n    `(binding [ana/*cljs-warnings* ~no-warnings]\n       ~@body)))\n\n(defn warning-enabled?\n  \"Test if the given warning-type is enabled.\"\n  [warning-type]\n  (ana/*cljs-warnings* warning-type))\n\n(defn default-warning-handler\n  \"The default warning handler.\n\n   Outputs the warning messages to *err*.\"\n  [warning-type env extra]\n  (ana/default-warning-handler warning-type env extra))\n\n(defmacro with-warning-handlers\n  \"Helper macro for custom handling of emitted warnings. Handlers should be\n   a vector of functions. The signature of these functions is\n   [warn-type env warn-info]. warn-type is a keyword describing the warning,\n   env is the analysis environment, and warn-info is a map of extra useful\n   information for a particular warning type.\"\n  [handlers & body]\n  `(ana/with-warning-handlers ~handlers\n     ~@body))\n\n(defn warning-message\n  \"Helper for generating the standard analyzer messages for warnings. Should be\n  passed warn-type and warn-info. See with-warning-handlers.\"\n  [warn-type warn-info]\n  (ana/error-message warn-type warn-info))\n\n(defn enabled-warnings\n  \"Get the enabled warning types.\"\n  []\n  ana/*cljs-warnings*)\n\n(defn get-options\n  \"Return the compiler options from compiler state.\"\n  ([] (get-options (current-state)))\n  ([state]\n   (get @state :options)))\n\n(defn get-js-index\n  \"Return the currently computed Google Closure js dependency index from the\n  compiler state.\"\n  ([] (get-js-index (current-state)))\n  ([state]\n   (get @state :js-dependency-index)))\n\n(def\n  ^{:doc \"ClojureScript's default analysis passes.\"}\n  default-passes ana/default-passes)\n\n(defmacro with-passes\n  \"Evaluate the body with the provided sequence of compiler passes.\"\n  [passes & body]\n  `(binding [ana/*passes* ~passes]\n     ~@body))\n\n#?(:clj\n   (defn analyze\n     \"Given an environment, a map containing {:locals (mapping of names to bindings), :context\n     (one of :statement, :expr, :return), :ns (a symbol naming the\n     compilation ns)}, and form, returns an expression object (a map\n     containing at least :form, :op and :env keys). If expr has any (immediately)\n     nested exprs, must have :children entry. This must be a vector of keywords naming\n     the immediately nested fields mapped to an expr or vector of exprs. This will\n     facilitate code walking without knowing the details of the op set.\"\n     ([env form] (analyze env form nil))\n     ([env form name] (analyze env form name nil))\n     ([env form name opts]\n      (analyze (or (current-state) (empty-state opts)) env form name opts))\n     ([state env form name opts]\n      (env/with-compiler-env state\n        (binding [ana/*cljs-warning-handlers* (:warning-handlers opts ana/*cljs-warning-handlers*)]\n          (ana/analyze env form name opts))))))\n\n#?(:clj\n   (defn forms-seq\n     \"Seq of Clojure/ClojureScript forms from rdr, a java.io.Reader. Optionally\n     accepts a filename argument which will be used in any emitted errors.\"\n     ([rdr] (ana/forms-seq* rdr nil))\n     ([rdr filename] (ana/forms-seq* rdr filename))))\n\n#?(:clj\n   (defn parse-ns\n     \"Helper for parsing only the essential namespace information from a\n      ClojureScript source file and returning a cljs.closure/IJavaScript compatible\n      map _not_ a namespace AST node.\n\n      By default does not load macros or perform any analysis of dependencies. If\n      opts parameter provided :analyze-deps and :load-macros keys their values will\n      be used for *analyze-deps* and *load-macros* bindings respectively. This\n      function does _not_ side-effect the ambient compilation environment unless\n      requested via opts where :restore is false.\"\n     ([src] (parse-ns src nil nil))\n     ([src opts] (parse-ns src nil opts))\n     ([src dest opts]\n      (parse-ns (or (current-state) (empty-state opts)) src dest opts))\n     ([state src dest opts]\n      (env/with-compiler-env state\n        (binding [ana/*cljs-warning-handlers* (:warning-handlers opts ana/*cljs-warning-handlers*)]\n          (ana/parse-ns src dest opts))))))\n\n#?(:clj\n   (defn analyze-file\n     \"Given a java.io.File, java.net.URL or a string identifying a resource on the\n      classpath attempt to analyze it.\n\n      This function side-effects the ambient compilation environment\n      `cljs.env/*compiler*` to aggregate analysis information. opts argument is\n      compiler options, if :cache-analysis true will cache analysis to\n      \\\":output-dir/some/ns/foo.cljs.cache.edn\\\". This function does not return a\n      meaningful value.\"\n     ([f] (analyze-file f nil))\n     ([f opts]\n      (analyze-file (or (current-state) (empty-state opts)) f opts))\n     ([state f opts]\n      (env/with-compiler-env state\n        (binding [ana/*cljs-warning-handlers* (:warning-handlers opts ana/*cljs-warning-handlers*)]\n          (ana/analyze-file f opts))))))\n\n#?(:clj\n   (defn read-analysis-cache\n     \"Read an analysis cache.\"\n     [cache-file]\n     (case (util/ext cache-file)\n       \"edn\" (edn/read-string (slurp cache-file))\n       \"json\" (let [{:keys [reader read]} @ana/transit]\n                (with-open [is (io/input-stream cache-file)]\n                  (read (reader is :json ana/transit-read-opts)))))))\n\n;; =============================================================================\n;; Main API\n\n(defn resolve\n  \"Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve\"\n  [env sym]\n  {:pre [(map? env) (symbol? sym)]}\n  (try\n    (binding [ana/*private-var-access-nowarn* true]\n      (ana/resolve-var env sym\n        (ana/confirm-var-exists-throw)))\n    (catch #?(:clj Exception :cljs :default) e\n      (ana/resolve-macro-var env sym))))\n\n(defn all-ns\n  \"Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances.\"\n  ([]\n   (all-ns env/*compiler*))\n  ([state]\n   (keys (get @state ::ana/namespaces))))\n\n(defn find-ns\n  \"Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns.\"\n  ([sym]\n   (find-ns env/*compiler* sym))\n  ([state sym]\n   {:pre [(symbol? sym)]}\n   (get-in @state [::ana/namespaces sym])))\n\n(defn ns-interns\n  \"Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars.\"\n  ([ns]\n   (ns-interns env/*compiler* ns))\n  ([state ns]\n   {:pre [(symbol? ns)]}\n   (merge\n     (get-in @state [::ana/namespaces ns :macros])\n     (get-in @state [::ana/namespaces ns :defs]))))\n\n(defn ns-publics\n  \"Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars.\"\n  ([ns]\n   (ns-publics env/*compiler* ns))\n  ([state ns]\n   {:pre [(symbol? ns)]}\n   (->> (merge\n          (get-in @state [::ana/namespaces ns :macros])\n          (get-in @state [::ana/namespaces ns :defs]))\n        (remove (fn [[k v]] (:private v)))\n        (into {}))))\n\n(defn ns-resolve\n  \"Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var.\"\n  ([ns sym]\n   (ns-resolve env/*compiler* ns sym))\n  ([state ns sym]\n   {:pre [(symbol? ns) (symbol? sym)]}\n   (get-in @state [::ana/namespaces ns :defs sym])))\n\n(defn remove-ns\n  \"Removes the namespace named by the symbol.\"\n  ([ns]\n   (remove-ns env/*compiler* ns))\n  ([state ns]\n   {:pre [(symbol? ns)]}\n   (swap! state update-in [::ana/namespaces] dissoc ns)))\n\n(defmacro in-cljs-user\n  \"Binds cljs.analyzer/*cljs-ns* to 'cljs.user and uses the given compilation\n  environment atom and runs body.\"\n  [env & body]\n  `(binding [cljs.analyzer/*cljs-ns* 'cljs.user]\n     (cljs.env/with-compiler-env ~env\n       ~@body)))\n"]}