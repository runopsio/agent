{
"version":3,
"file":"module$node_modules$$sentry$hub$dist$sessionflusher.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@sentry/hub/dist/sessionflusher.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$hub$dist$sessionflusher\"] = function(global,require,module,exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"@sentry/types\");\nvar utils_1 = require(\"@sentry/utils\");\nvar hub_1 = require(\"./hub\");\n/**\n * @inheritdoc\n */\nvar SessionFlusher = /** @class */ (function () {\n    function SessionFlusher(transport, attrs) {\n        var _this = this;\n        this.flushTimeout = 60;\n        this._pendingAggregates = {};\n        this._isEnabled = true;\n        this._transport = transport;\n        // Call to setInterval, so that flush is called every 60 seconds\n        this._intervalId = setInterval(function () { return _this.flush(); }, this.flushTimeout * 1000);\n        this._sessionAttrs = attrs;\n    }\n    /** Sends session aggregates to Transport */\n    SessionFlusher.prototype.sendSessionAggregates = function (sessionAggregates) {\n        if (!this._transport.sendSession) {\n            utils_1.logger.warn(\"Dropping session because custom transport doesn't implement sendSession\");\n            return;\n        }\n        void this._transport.sendSession(sessionAggregates).then(null, function (reason) {\n            utils_1.logger.error(\"Error while sending session: \" + reason);\n        });\n    };\n    /** Checks if `pendingAggregates` has entries, and if it does flushes them by calling `sendSessions` */\n    SessionFlusher.prototype.flush = function () {\n        var sessionAggregates = this.getSessionAggregates();\n        if (sessionAggregates.aggregates.length === 0) {\n            return;\n        }\n        this._pendingAggregates = {};\n        this.sendSessionAggregates(sessionAggregates);\n    };\n    /** Massages the entries in `pendingAggregates` and returns aggregated sessions */\n    SessionFlusher.prototype.getSessionAggregates = function () {\n        var _this = this;\n        var aggregates = Object.keys(this._pendingAggregates).map(function (key) {\n            return _this._pendingAggregates[parseInt(key)];\n        });\n        var sessionAggregates = {\n            attrs: this._sessionAttrs,\n            aggregates: aggregates,\n        };\n        return utils_1.dropUndefinedKeys(sessionAggregates);\n    };\n    /** JSDoc */\n    SessionFlusher.prototype.close = function () {\n        clearInterval(this._intervalId);\n        this._isEnabled = false;\n        this.flush();\n    };\n    /**\n     * Wrapper function for _incrementSessionStatusCount that checks if the instance of SessionFlusher is enabled then\n     * fetches the session status of the request from `Scope.getRequestSession().status` on the scope and passes them to\n     * `_incrementSessionStatusCount` along with the start date\n     */\n    SessionFlusher.prototype.incrementSessionStatusCount = function () {\n        var _a, _b;\n        if (!this._isEnabled) {\n            return;\n        }\n        var scope = hub_1.getCurrentHub().getScope();\n        var requestSession = (_a = scope) === null || _a === void 0 ? void 0 : _a.getRequestSession();\n        if (requestSession && requestSession.status) {\n            this._incrementSessionStatusCount(requestSession.status, new Date());\n            // This is not entirely necessarily but is added as a safe guard to indicate the bounds of a request and so in\n            // case captureRequestSession is called more than once to prevent double count\n            (_b = scope) === null || _b === void 0 ? void 0 : _b.setRequestSession(undefined);\n            /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n        }\n    };\n    /**\n     * Increments status bucket in pendingAggregates buffer (internal state) corresponding to status of\n     * the session received\n     */\n    SessionFlusher.prototype._incrementSessionStatusCount = function (status, date) {\n        // Truncate minutes and seconds on Session Started attribute to have one minute bucket keys\n        var sessionStartedTrunc = new Date(date).setSeconds(0, 0);\n        this._pendingAggregates[sessionStartedTrunc] = this._pendingAggregates[sessionStartedTrunc] || {};\n        // corresponds to aggregated sessions in one specific minute bucket\n        // for example, {\"started\":\"2021-03-16T08:00:00.000Z\",\"exited\":4, \"errored\": 1}\n        var aggregationCounts = this._pendingAggregates[sessionStartedTrunc];\n        if (!aggregationCounts.started) {\n            aggregationCounts.started = new Date(sessionStartedTrunc).toISOString();\n        }\n        switch (status) {\n            case types_1.RequestSessionStatus.Errored:\n                aggregationCounts.errored = (aggregationCounts.errored || 0) + 1;\n                return aggregationCounts.errored;\n            case types_1.RequestSessionStatus.Ok:\n                aggregationCounts.exited = (aggregationCounts.exited || 0) + 1;\n                return aggregationCounts.exited;\n            case types_1.RequestSessionStatus.Crashed:\n                aggregationCounts.crashed = (aggregationCounts.crashed || 0) + 1;\n                return aggregationCounts.crashed;\n        }\n    };\n    return SessionFlusher;\n}());\nexports.SessionFlusher = SessionFlusher;\n//# sourceMappingURL=sessionflusher.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","types_1","utils_1","hub_1","SessionFlusher","transport","attrs","_this","flushTimeout","_pendingAggregates","_isEnabled","_transport","_intervalId","setInterval","flush","_sessionAttrs","prototype","sendSessionAggregates","SessionFlusher.prototype.sendSessionAggregates","sessionAggregates","sendSession","then","reason","logger","error","warn","SessionFlusher.prototype.flush","getSessionAggregates","aggregates","length","SessionFlusher.prototype.getSessionAggregates","keys","map","key","parseInt","dropUndefinedKeys","close","SessionFlusher.prototype.close","clearInterval","incrementSessionStatusCount","SessionFlusher.prototype.incrementSessionStatusCount","scope","getCurrentHub","getScope","requestSession","getRequestSession","status","_incrementSessionStatusCount","Date","setRequestSession","undefined","SessionFlusher.prototype._incrementSessionStatusCount","date","sessionStartedTrunc","setSeconds","aggregationCounts","started","toISOString","RequestSessionStatus","Errored","errored","Ok","exited","Crashed","crashed"]
}
