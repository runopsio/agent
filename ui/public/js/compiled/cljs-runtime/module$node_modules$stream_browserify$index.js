shadow$provide.module$node_modules$stream_browserify$index=function(global,require,module,exports){function Stream(){EE.call(this)}module.exports=Stream;var EE=require("module$node_modules$events$events").EventEmitter;require("module$node_modules$inherits$inherits_browser")(Stream,EE);Stream.Readable=require("module$node_modules$readable_stream$readable_browser");Stream.Writable=require("module$node_modules$readable_stream$writable_browser");Stream.Duplex=require("module$node_modules$readable_stream$duplex_browser");
Stream.Transform=require("module$node_modules$readable_stream$transform");Stream.PassThrough=require("module$node_modules$readable_stream$passthrough");Stream.Stream=Stream;Stream.prototype.pipe=function(dest,options){function ondata(chunk){dest.writable&&!1===dest.write(chunk)&&source.pause&&source.pause()}function ondrain(){source.readable&&source.resume&&source.resume()}function onend(){didOnEnd||(didOnEnd=!0,dest.end())}function onclose(){didOnEnd||(didOnEnd=!0,"function"===typeof dest.destroy&&
dest.destroy())}function onerror(er){cleanup();if(0===EE.listenerCount(this,"error"))throw er;}function cleanup(){source.removeListener("data",ondata);dest.removeListener("drain",ondrain);source.removeListener("end",onend);source.removeListener("close",onclose);source.removeListener("error",onerror);dest.removeListener("error",onerror);source.removeListener("end",cleanup);source.removeListener("close",cleanup);dest.removeListener("close",cleanup)}var source=this;source.on("data",ondata);dest.on("drain",
ondrain);dest._isStdio||options&&!1===options.end||(source.on("end",onend),source.on("close",onclose));var didOnEnd=!1;source.on("error",onerror);dest.on("error",onerror);source.on("end",cleanup);source.on("close",cleanup);dest.on("close",cleanup);dest.emit("pipe",source);return dest}}
//# sourceMappingURL=module$node_modules$stream_browserify$index.js.map
