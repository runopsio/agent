shadow$provide.module$node_modules$highlight_DOT_js$lib$languages$actionscript=function(global,require,module,exports){function concat(...args){return args.map(x=>{x=x?"string"===typeof x?x:x.source:null;return x}).join("")}module.exports=function(hljs){const IDENT_RE=/[a-zA-Z_$][a-zA-Z0-9_$]*/,PKG_NAME_RE=concat(IDENT_RE,concat("(\\.",IDENT_RE,")*")),AS3_REST_ARG_MODE={className:"rest_arg",begin:/[.]{3}/,end:IDENT_RE,relevance:10};return{name:"ActionScript",aliases:["as"],keywords:{keyword:"as break case catch class const continue default delete do dynamic each else extends final finally for function get if implements import in include instanceof interface internal is namespace native new override package private protected public return set static super switch this throw try typeof use var void while with".split(" "),
literal:["true","false","null","undefined"]},contains:[hljs.APOS_STRING_MODE,hljs.QUOTE_STRING_MODE,hljs.C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE,hljs.C_NUMBER_MODE,{match:[/\bpackage/,/\s+/,PKG_NAME_RE],className:{1:"keyword",3:"title.class"}},{match:[/\b(?:class|interface|extends|implements)/,/\s+/,IDENT_RE],className:{1:"keyword",3:"title.class"}},{className:"meta",beginKeywords:"import include",end:/;/,keywords:{keyword:"import include"}},{beginKeywords:"function",end:/[{;]/,excludeEnd:!0,
illegal:/\S/,contains:[hljs.inherit(hljs.TITLE_MODE,{className:"title.function"}),{className:"params",begin:/\(/,end:/\)/,contains:[hljs.APOS_STRING_MODE,hljs.QUOTE_STRING_MODE,hljs.C_LINE_COMMENT_MODE,hljs.C_BLOCK_COMMENT_MODE,AS3_REST_ARG_MODE]},{begin:concat(/:\s*/,/([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)/)}]},hljs.METHOD_GUARD],illegal:/#/}}}
//# sourceMappingURL=module$node_modules$highlight_DOT_js$lib$languages$actionscript.js.map
