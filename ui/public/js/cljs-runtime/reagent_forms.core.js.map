{"version":3,"sources":["reagent_forms/core.cljs"],"mappings":"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","names":["reagent-forms.core/value-of","element","reagent-forms.core/scroll-to","idx","vec__31201","cljs.core.nth","list-elem","item-elem","item-height","offset-top","reagent-forms.core/id->path","cljs.core/memoize","id","cljs.core/sequential?","segments","clojure.string.split","cljs.core.subs","cljs.core.mapv","cljs.core/keyword","reagent-forms.core/cursor-for-id","doc","reagent.core/cursor","reagent-forms.core/run-events","value","events","path","p1__31206#","p2__31205#","cljs.core.reduce","or__4253__auto__","reagent-forms.core/mk-update-fn","update-fn","result","cljs.core.swap_BANG_","current-value","cljs.core/empty?","reagent-forms.core/mk-save-fn","cljs.core/reset!","reagent-forms.core/wrap-get-fn","get","wrapper","G__31244","reagent-forms.core/wrap-save-fn","save!","G__31245","G__31246","reagent-forms.core/wrap-update-fn","update!","G__31251","G__31252","G__31253","p__31254","map__31255","cljs.core/--destructure-map","cljs.core.get","reagent-forms.core/wrap-fns","node","temp__5751__auto__","in-fn","cljs.core/second","out-fn","reagent-forms.core/set-disabled","attrs","update-disabled?","and__4251__auto__","p1__31256#","cljs.core.update","cljs.core/fn?","reagent-forms.core/call-attr","attr","cljs.core/deref","cljs.core.get_in","reagent-forms.core/update-class","classes","cljs.core/not-empty","p1__31257#","clojure.string.join","cljs.core.remove","cljs.core.into","p__31258","map__31259","reagent-forms.core/update-attrs","set-attributes","G__31260","G__31261","reagent-forms.core/set-validation-class","valid","reagent-forms.core/clean-attrs","cljs.core.dissoc","js/reagent-forms","js/reagent-forms.core","js/reagent-forms.core.format-type","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","fexpr__31266","cljs.core/MultiFn","cljs.core.symbol","reagent-forms.core/format-type","field-type","_","fexpr__31268","reagent-forms.core/format-value","fmt","cljs.core/not","js/isNaN","js/parseFloat","goog.string/format","n","parsed","js/reagent-forms.core.bind","fexpr__31271","reagent-forms.core/bind","p__31272","map__31273","field","fexpr__31274","p__31276","p__31277","map__31279","map__31280","p1__31275#","G__31281","G__31282","p__31283","p__31284","map__31285","map__31286","cljs.core/boolean","G__31293","G__31294","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","reagent-forms.core/set-attrs","p__31298","p__31299","vec__31300","seq__31301","cljs.core/seq","first__31302","cljs.core/first","cljs.core/next","vec__31303","seq31295","G__31296","G__31297","self__4851__auto__","type","body","opts","default-attrs","cljs.core.merge","js/reagent-forms.core.init-field","fexpr__31306","reagent-forms.core/init-field","p__31307","vec__31308","map__31311","cljs.core.keyword","fexpr__31312","p__31313","p__31314","vec__31315","seq__31316","first__31317","map__31318","update-disabled?__30568__auto__","cljs.core/some","body__30569__auto__","clojure.walk/postwalk","c__30570__auto__","cljs.core/map?","visible__30571__auto__","p__31319","p__31320","vec__31321","map__31324","map__31325","component","reagent_forms.core.set_attrs","p__31331","p__31332","vec__31333","map__31336","map__31337","input-value","reagent.core.atom","p1__31327#","p1__31328#","G__31341","G__31342","p__31348","p__31349","vec__31350","map__31353","map__31354","date-format","inline","auto-close?","disabled","lang","save-fn","p1__31345#","reagent-forms.datepicker/format-date","reagent-forms.datepicker/parse-format","selected-date","selected-month","today","js/Date","year","month","day","expanded?","mouse-on-list?","dom-node","save-value","p1__31346#","p1__31347#","reagent.core.create_class","this","reagent.dom/dom-node","e","date","reagent-forms.datepicker/datepicker","p__31358","p__31359","vec__31360","map__31363","map__31364","checked","default-checked","p__31368","p__31369","vec__31374","map__31377","map__31378","preamble","postamble","placeholder","p__31384","p__31385","vec__31386","seq__31387","first__31388","map__31389","map__31390","event","touch-event","closeable?","G__31391","message","p__31392","p__31393","vec__31394","seq__31395","first__31396","map__31397","map__31398","name","cljs.core._EQ_","p__31403","p__31404","vec__31405","map__31408","map__31409","data-source","input-class","list-class","item-class","highlight-class","input-placeholder","result-fn","choice-fn","clear-on-focus?","selections","get-index","cljs.core/identity","typeahead-hidden?","selected-index","cljs.core/constantly","choose-selected","choice","p1__31399#","p1__31400#","v","cljs.core/iterable?","temp__5753__auto__","clojure.string/trim","G__31410","G__31411","G__31412","cljs.core/count","G__31413","cljs.core/dec","G__31414","G__31415","G__31416","G__31417","cljs.core/inc","cljs.core.doall","cljs.core.map_indexed","p1__31401#","p1__31402#","index","js/parseInt","p__31419","p__31420","vec__31421","map__31424","map__31425","p1__31418#","G__31426","G__31427","cljs.core.array_seq","p__31429","p__31430","vec__31431","map__31434","map__31435","p1__31428#","G__31436","G__31437","p__31438","p__31439","vec__31440","seq__31441","first__31442","map__31443","map__31444","reagent-forms.core/group-item","key","multi-select","cljs.core/update-in","G__31449","G__31450","cljs.core.filter","cljs.core.map","G__31451","G__31452","disabled?","active?","button-or-input?","t","cljs.core/name","class","clojure.string/blank?","handle-click!","p__31453","map__31454","reagent-forms.core/mk-selections","selectors","ks","p__31455","vec__31456","map__31459","m","cljs.core.assoc","reagent-forms.core/extract-selectors","cljs.core/Keyword","cljs.core/ffirst","p__31462","p__31463","vec__31464","seq__31465","first__31466","map__31467","map__31468","reagent-forms.core/selection-group","selection-items","item","p1__31460#","p__31469","vec__31470","k","p1__31461#","visible?","p__31473","p__31474","vec__31475","map__31478","p__31479","p__31480","vec__31481","map__31484","reagent-forms.core/map-options","options","iter__4652__auto__","s__31486","cljs.core/LazySeq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__31488","cljs.core/chunk-buffer","i__31487","vec__31489","cljs.core/-nth","map__31492","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__31485","cljs.core/chunk-rest","vec__31493","map__31496","cljs.core/cons","cljs.core/rest","label","reagent-forms.core/default-selection","p1__31497#","cljs.core/last","p__31500","p__31501","vec__31502","seq__31503","first__31504","map__31505","map__31506","options-lookup","selection","G__31507","G__31508","p1__31498#","G__31509","G__31510","p1__31499#","visible","reagent-forms.core/field?","cljs.core/coll?","cljs.core/contains?","reagent-forms.core/make-form","form","js/reagent-forms.core.bind-fields","fexpr__31511","reagent-forms.core/bind-fields","cljs.core/type","cljs.core/PersistentArrayMap","G__31512","G__31513","G__31514","G__31515","G__31516","G__31517","p1__31518#","cljs.core/chunk-first"],"sourcesContent":["(ns reagent-forms.core\n  (:require-macros\n    [reagent-forms.macros\n     :refer [render-element]])\n  (:require\n    [clojure.walk\n     :refer [postwalk]]\n    [clojure.string\n     :as string\n     :refer [split trim join blank?]]\n    [goog.string\n     :as gstring]\n    [goog.string.format]\n    [reagent.core\n     :as r\n     :refer [atom cursor]]\n    [reagent.dom\n     :as rdom]\n    [reagent-forms.datepicker\n     :refer [parse-format format-date datepicker]]))\n\n(defn value-of [element]\n  (-> element .-target .-value))\n\n(defn- scroll-to [element idx]\n  (let [list-elem (-> element\n                      .-target\n                      .-parentNode\n                      (.getElementsByTagName \"ul\")\n                      (.item 0))\n        idx       (if (< idx 0) 0 idx)\n        item-elem (-> list-elem\n                      .-children\n                      (.item idx))\n        [item-height offset-top] (if item-elem\n                                   [(.-scrollHeight item-elem)\n                                    (.-offsetTop item-elem)]\n                                   [0 0])]\n    (set! (.-scrollTop list-elem)\n          (- offset-top\n             (* 2 item-height)))))\n\n(def ^:private id->path\n  (memoize\n    (fn [id]\n      (if (sequential? id)\n        id\n        (let [segments (split (subs (str id) 1) #\"\\.\")]\n          (mapv keyword segments))))))\n\n(def ^:private cursor-for-id\n  (memoize\n    (fn [doc id]\n      (cursor doc (id->path id)))))\n\n(defn run-events [doc id value events]\n  (let [path (id->path id)]\n    (reduce #(or (%2 id path value %1) %1) doc events)))\n\n(defn- mk-update-fn [doc events]\n  (fn [id update-fn value]\n    (let [result (swap! (cursor-for-id doc id)\n                        (fn [current-value]\n                          (update-fn current-value value)))]\n      (when-not (empty? events)\n        (swap! doc run-events id result events)))))\n\n(defn- mk-save-fn [doc events]\n  (fn [id value]\n    (reset! (cursor-for-id doc id) value)\n    (when-not (empty? events)\n      (swap! doc run-events id value events))))\n\n(defn wrap-get-fn [get wrapper]\n  (fn [id]\n    (wrapper (get id))))\n\n(defn wrap-save-fn [save! wrapper]\n  (fn [id value]\n    (save! id (wrapper value))))\n\n(defn wrap-update-fn [update! wrapper]\n  (fn [id update-fn value]\n    (update! id update-fn (wrapper value))))\n\n(defn wrap-fns [{:keys [doc get save! update!]} node]\n  {:doc     doc\n   :get     (if-let [in-fn (:in-fn (second node))]\n              (wrap-get-fn get in-fn)\n              get)\n   :save!   (if-let [out-fn (:out-fn (second node))]\n              (wrap-save-fn save! out-fn)\n              save!)\n   :update! (if-let [out-fn (:out-fn (second node))]\n              (wrap-update-fn update! out-fn)\n              update!)})\n\n(defn set-disabled [attrs update-disabled?]\n  (if (and update-disabled?\n           (not (nil? (:disabled attrs))))\n    (update attrs :disabled #(if (fn? %) (%) %))\n    attrs))\n\n(defn call-attr\n  [doc attr]\n  (let [doc (if (fn? doc) (doc) @doc)]\n    (if (fn? attr) (attr doc) (get-in doc (id->path attr)))))\n\n(defn update-class [attrs classes]\n  (if (not-empty classes)\n    (update attrs :class #(string/join \" \" (remove empty? (into (if (string? %) [%] %) classes))))\n    attrs))\n\n(defn update-attrs [{:keys [set-attributes] :as attrs} doc]\n  (or (when set-attributes (set-attributes (if (fn? doc) (doc) @doc) attrs)) attrs))\n\n(defn set-validation-class [attrs doc]\n  (if-let [valid (:validator attrs)]\n    (update-class attrs (call-attr doc valid))\n    attrs))\n\n(defn clean-attrs [attrs]\n  (dissoc attrs\n          :fmt\n          :event\n          :field\n          :in-fn\n          :out-fn\n          :inline\n          :save-fn\n          :preamble\n          :visible?\n          :postamble\n          :validator\n          :date-format\n          :auto-close?\n          :set-attributes))\n\n;;coerce the input to the appropriate type\n(defmulti format-type\n          (fn [field-type _]\n            (if (#{:range :numeric} field-type)\n              :numeric\n              field-type)))\n\n(defn format-value [fmt value]\n  (if (and (not (js/isNaN (js/parseFloat value))) fmt)\n    (gstring/format fmt value)\n    value))\n\n(defmethod format-type :numeric\n  [_ n]\n  (when (not-empty n)\n    (let [parsed (js/parseFloat n)]\n      (when-not (js/isNaN parsed)\n        parsed))))\n\n(defmethod format-type :default\n  [_ value] value)\n\n;;bind the field to the document based on its type\n(defmulti bind\n          (fn [{:keys [field]} _]\n            (if (#{:text :numeric :password :email :tel :range :textarea} field)\n              :input-field field)))\n\n(defmethod bind :input-field\n  [{:keys [field id fmt]} {:keys [get save!]}]\n  {:value     (let [value (or (get id) \"\")]\n                (format-value fmt value))\n   :on-change #(save! id (->> % (value-of) (format-type field)))})\n\n(defmethod bind :checkbox\n  [{:keys [id]} {:keys [get save!]}]\n  {:checked   (boolean (get id))\n   :on-change #(->> id get not (save! id))})\n\n(defmethod bind :default [_ _])\n\n(defn- set-attrs\n  [[type attrs & body] opts & [default-attrs]]\n  (into\n    [type (merge\n            default-attrs\n            (bind attrs opts)\n            (dissoc attrs :checked :default-checked))]\n    body))\n\n;;initialize the field by binding it to the document and setting default options\n(defmulti init-field\n          (fn [[_ {:keys [field]}] _]\n            (let [field (keyword field)]\n              (if (#{:range :text :password :email :tel :textarea} field)\n                :input-field field))))\n\n(defmethod init-field :container\n  [[type attrs & body] {:keys [doc]}]\n  (render-element attrs doc (into [type attrs] body)))\n\n(defmethod init-field :input-field\n  [[_ {:keys [field] :as attrs} :as component] {:keys [doc] :as opts}]\n  (render-element attrs doc\n                  (set-attrs component opts {:type field})))\n\n(defmethod init-field :numeric\n  [[type {:keys [id fmt] :as attrs}] {:keys [get save! doc]}]\n  (let [input-value (atom nil)]\n    (render-element\n      attrs doc\n      [type (merge\n              {:type      :number\n               :value     (or @input-value (get id \"\"))\n               :on-change #(->> (value-of %) (reset! input-value))\n               :on-blur #(do\n                           (reset! input-value nil)\n                           (->> (value-of %)\n                                (format-value fmt)\n                                (format-type :numeric)\n                                (save! id)))}\n              attrs)])))\n\n(defmethod init-field :datepicker\n  [[_ {:keys [id date-format inline auto-close? disabled lang save-fn] :or {lang :en-US} :as attrs}] {:keys [doc get save! update!]}]\n  (let [fmt            (if (fn? date-format)\n                         date-format\n                         #(format-date % (parse-format date-format)))\n        selected-date  (get id)\n        selected-month (if (pos? (:month selected-date))\n                         (dec (:month selected-date))\n                         (:month selected-date))\n        today          (js/Date.)\n        year           (or (:year selected-date) (.getFullYear today))\n        month          (or selected-month (.getMonth today))\n        day            (or (:day selected-date) (.getDate today))\n        expanded?      (atom false)\n        mouse-on-list? (atom false)\n        dom-node       (atom nil)\n        save-value     (if save-fn #(update! id save-fn %) #(save! id %))]\n    (r/create-class\n      {:component-did-mount\n       (fn [this]\n         (->> this rdom/dom-node .-firstChild .-firstChild (reset! dom-node)))\n       :component-did-update\n       (fn [this]\n         (->> this rdom/dom-node .-firstChild .-firstChild (reset! dom-node)))\n       :render\n       (render-element attrs doc\n                       [:div.datepicker-wrapper\n                        [:div.input-group.date\n                         [:input.form-control\n                          (merge\n                            {:read-only true\n                             :on-blur   #(when-not @mouse-on-list?\n                                           (reset! expanded? false))\n                             :type      :text\n                             :on-click  (fn [e]\n                                          (.preventDefault e)\n                                          (when-not (if (fn? disabled) (disabled) disabled)\n                                            (swap! expanded? not)))\n                             :value     (if-let [date (get id)]\n                                          (fmt date)\n                                          \"\")}\n                            attrs)]\n                         [:span.input-group-addon\n                          {:on-click (fn [e]\n                                       (.preventDefault e)\n                                       (when-not (if (fn? disabled) (disabled) disabled)\n                                         (swap! expanded? not)\n                                         (.focus @dom-node)))}\n                          [:i.glyphicon.glyphicon-calendar]]]\n                        [datepicker year month day dom-node mouse-on-list? expanded? auto-close? #(get id) save-value inline lang]])})))\n\n\n(defmethod init-field :checkbox\n  [[_ {:keys [id field checked default-checked] :as attrs} :as component] {:keys [doc save!] :as opts}]\n  (when (or checked default-checked)\n    (save! id true))\n  (render-element (dissoc attrs :checked :default-checked) doc\n                  (set-attrs component opts {:type field})))\n\n(defmethod init-field :label\n  [[type {:keys [id preamble postamble placeholder fmt] :as attrs}] {:keys [doc get]}]\n  (render-element attrs doc\n                  [type attrs preamble\n                   (let [value (get id)]\n                     (if fmt\n                       (fmt value)\n                       (if value\n                         (str value postamble)\n                         placeholder)))]))\n\n(defmethod init-field :alert\n  [[type {:keys [id event touch-event closeable?] :or {closeable? true} :as attrs} & body] {:keys [doc get save!]}]\n  (render-element attrs doc\n                  (if event\n                    (when (event (get id))\n                      (into [type attrs] body))\n                    (if-let [message (not-empty (get id))]\n                      [type attrs\n                       (when closeable?\n                         [:button.close\n                          {:type                      \"button\"\n                           :aria-hidden               true\n                           (or touch-event :on-click) #(save! id nil)}\n                          \"X\"])\n                       message]))))\n\n(defmethod init-field :radio\n  [[type {:keys [name value checked default-checked] :as attrs} & body] {:keys [doc get save!]}]\n  (when (or checked default-checked)\n    (save! name value))\n  (render-element attrs doc\n                  (into\n                    [type\n                     (merge\n                       (dissoc attrs :value :default-checked)\n                       {:type      :radio\n                        :checked   (= value (get name))\n                        :on-change #(save! name value)})]\n                    body)))\n\n(defmethod init-field :typeahead\n  [[type {:keys [id data-source input-class list-class item-class highlight-class input-placeholder result-fn choice-fn clear-on-focus? selections get-index]\n          :as   attrs\n          :or   {result-fn       identity\n                 choice-fn       identity\n                 clear-on-focus? true}}] {:keys [doc get save!]}]\n  (let [typeahead-hidden? (atom true)\n        mouse-on-list?    (atom false)\n        selected-index    (atom -1)\n        selections        (or selections (atom []))\n        get-index         (or get-index (constantly -1))\n        choose-selected   #(when (and (not-empty @selections) (> @selected-index -1))\n                             (let [choice (nth @selections @selected-index)]\n                               (save! id choice)\n                               (choice-fn choice)\n                               (reset! typeahead-hidden? true)))]\n    (render-element attrs doc\n                    [type\n                     [:input {:type        :text\n                              :disabled    (:disabled attrs)\n                              :placeholder input-placeholder\n                              :class       input-class\n                              :value       (let [v (get id)]\n                                             (if-not (iterable? v)\n                                               v (first v)))\n                              :on-focus    #(when clear-on-focus? (save! id nil))\n                              :on-blur     #(when-not @mouse-on-list?\n                                              (reset! typeahead-hidden? true)\n                                              (reset! selected-index -1))\n                              :on-change   #(when-let [value (trim (value-of %))]\n                                              (reset! selections (data-source (.toLowerCase value)))\n                                              (save! id (value-of %))\n                                              (reset! typeahead-hidden? false)\n                                              (reset! selected-index (if (= 1 (count @selections)) 0 -1)))\n                              :on-key-down #(do\n                                              (case (.-which %)\n                                                38 (do\n                                                     (.preventDefault %)\n                                                     (when-not (or @typeahead-hidden? (<= @selected-index 0))\n                                                       (swap! selected-index dec)\n                                                       (scroll-to % @selected-index)))\n                                                40 (do\n                                                     (.preventDefault %)\n                                                     (if @typeahead-hidden?\n                                                       (do\n\n                                                         (reset! selections (data-source :all))\n                                                         (reset! selected-index (get-index (-> %\n                                                                                               value-of\n                                                                                               trim)\n                                                                                           @selections))\n                                                         (reset! typeahead-hidden? false)\n                                                         (scroll-to % @selected-index))\n                                                       (when-not (= @selected-index (dec (count @selections)))\n                                                         (save! id (value-of %))\n                                                         (swap! selected-index inc)\n                                                         (scroll-to % @selected-index))))\n                                                9 (choose-selected)\n                                                13 (do\n                                                     (.preventDefault %)\n                                                     (choose-selected))\n                                                27 (do (reset! typeahead-hidden? true)\n                                                       (reset! selected-index -1))\n                                                \"default\"))}]\n\n                     [:ul {:style          {:display (if (or (empty? @selections) @typeahead-hidden?) :none :block)}\n                           :class          list-class\n                           :on-mouse-enter #(reset! mouse-on-list? true)\n                           :on-mouse-leave #(reset! mouse-on-list? false)}\n                      (doall\n                        (map-indexed\n                          (fn [index result]\n                            [:li {:tab-index     index\n                                  :key           index\n                                  :class         (if (= @selected-index index) highlight-class item-class)\n                                  :on-mouse-over #(do\n                                                    (reset! selected-index (js/parseInt (.getAttribute (.-target %) \"tabIndex\"))))\n                                  :on-click      #(do\n                                                    (.preventDefault %)\n                                                    (reset! typeahead-hidden? true)\n                                                    (save! id result)\n                                                    (choice-fn result))}\n                             (result-fn result)])\n                          @selections))]])))\n\n(defmethod init-field :file\n  [[type {:keys [id] :as attrs}] {:keys [doc save!]}]\n  (render-element attrs doc\n                  [type (merge {:type      :file\n                                :on-change #(save! id (-> % .-target .-files array-seq first))}\n                               attrs)]))\n\n(defmethod init-field :files\n  [[type {:keys [id] :as attrs}] {:keys [doc save!]}]\n  (render-element attrs doc\n                  [type (merge {:type      :file\n                                :multiple  true\n                                :on-change #(save! id (-> % .-target .-files))}\n                               attrs)]))\n\n(defn- group-item\n  [[type {:keys [key touch-event disabled] :as attrs} & body]\n   {:keys [save! multi-select]} selections field id]\n  (letfn [(handle-click! []\n            (if multi-select\n              (do\n                (swap! selections update-in [key] not)\n                (save! id (->> @selections (filter second) (map first))))\n              (let [value (get @selections key)]\n                (reset! selections {key (not value)})\n                (save! id (when (get @selections key) key)))))]\n    (fn []\n      (let [disabled?        (if (fn? disabled) (disabled) disabled)\n            active?          (get @selections key)\n            button-or-input? (let [t (subs (name type) 0 5)]\n                               (or (= t \"butto\") (= t \"input\")))\n            class            (->> [(when active? \"active\")\n                                   (when (and disabled? (not button-or-input?)) \"disabled\")]\n                                  (remove blank?)\n                                  (join \" \"))]\n        [type\n         (dissoc\n           (merge {:class class\n                   (or touch-event :on-click)\n                          (when-not disabled? handle-click!)}\n                  (clean-attrs attrs)\n                  {:disabled disabled?})\n           (when-not button-or-input? :disabled))\n         body]))))\n\n(defn- mk-selections [id selectors {:keys [get multi-select] :as ks}]\n  (let [value (get id)]\n    (reduce\n      (fn [m [_ {:keys [key]}]]\n        (assoc m key (boolean (some #{key} (if multi-select value [value])))))\n      {} selectors)))\n\n(defn extract-selectors\n  \"selectors might be passed in inline or as a collection\"\n  [selectors]\n  (if (keyword? (ffirst selectors))\n    selectors (first selectors)))\n\n(defn- selection-group\n  [[type {:keys [field id] :as attrs} & selection-items] {:keys [get doc] :as opts}]\n  (let [selection-items (extract-selectors selection-items)\n        selections      (atom (mk-selections id selection-items opts))\n        selectors       (map (fn [item]\n                               {:visible? (:visible? (second item))\n                                :selector [(group-item item opts selections field id)]})\n                             selection-items)]\n    (fn []\n      (when-not (get id)\n        (swap! selections #(into {} (map (fn [[k]] [k false]) %))))\n      (into [type (clean-attrs attrs)]\n            (->> selectors\n                 (filter\n                   #(if-let [visible? (:visible? %)]\n                      (call-attr doc visible?)\n                      true))\n                 (map :selector))))))\n\n(defmethod init-field :single-select\n  [[_ attrs :as field] {:keys [doc] :as opts}]\n  (render-element attrs doc\n                  [selection-group field opts]))\n\n(defmethod init-field :multi-select\n  [[_ attrs :as field] {:keys [doc] :as opts}]\n  (render-element attrs doc\n                  [selection-group field (assoc opts :multi-select true)]))\n\n(defn map-options [options]\n  (into\n    {}\n    (for [[_ {:keys [key]} label] options]\n      [(str label) key])))\n\n(defn default-selection [options v]\n  (->> options\n       (filter #(= v (get-in % [1 :key])))\n       (first)\n       (last)))\n\n(defmethod init-field :list\n  [[type {:keys [id] :as attrs} & options] {:keys [doc get save!]}]\n  (let [options        (extract-selectors options)\n        options-lookup (map-options options)\n        selection      (atom (or\n                               (get id)\n                               (get-in (first options) [1 :key])))]\n    (save! id @selection)\n    (render-element attrs doc\n                    [type\n                     (merge\n                       attrs\n                       {:default-value (default-selection options @selection)\n                        :on-change     #(save! id (clojure.core/get options-lookup (value-of %)))})\n                     (doall\n                       (filter\n                         #(if-let [visible (:visible? (second %))]\n                            (call-attr doc visible) true)\n                         options))])))\n\n(defn- field? [node]\n  (and (coll? node)\n       (map? (second node))\n       (contains? (second node) :field)))\n\n(defn make-form\n  [form opts]\n  (postwalk\n    (fn [node]\n      (if (field? node)\n        (let [opts  (wrap-fns opts node)\n              field (init-field node opts)]\n          (if (fn? field) [field] field))\n        node))\n    form))\n\n(defmulti bind-fields\n          \"Creates data bindings between the form fields and the supplied atom or calls\n           the supplied functions (when `doc` is a map) on events triggered by fields.\n           form - the form template with the fields\n           doc - the document that the fields will be bound to\n           events - any events that should be triggered when the document state changes\"\n          (fn [_ doc & _]\n            (type doc)))\n\n(defmethod bind-fields PersistentArrayMap\n  [form opts]\n  (let [form (make-form\n               form\n               (-> opts\n                   (update :get\n                           (fn [get]\n                             (fn [id]\n                               (get (id->path id)))))\n                   (update :save!\n                           (fn [save!]\n                             (fn [id value]\n                               (save! (id->path id) value))))\n                   (update :update!\n                           (fn [update!]\n                             (fn [id save-fn value]\n                               (update! (id->path id) save-fn value))))))]\n    (fn [] form)))\n\n(defmethod bind-fields :default\n  [form doc & events]\n  (let [opts {:doc     doc\n              :get     #(deref (cursor-for-id doc %))\n              :save!   (mk-save-fn doc events)\n              :update! (mk-update-fn doc events)}\n        form (make-form form opts)]\n    (fn [] form)))\n"]}