{"version":3,"sources":["webapp/components/modal.cljs"],"mappings":";AAGA,GAAA,QAAAA,mCAAAC,8CAAAC,oDAAAC;AAAA;AAAA,AAAA,iCAAA,iBAAAC,6BAAA,AAAAC,6CAAA,5HAAUS;IAAVR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,iBAAAC,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,0BAAA,6BAAA,4DAAAJ,wBAAAL,2BAAAE,2BAAAC,2BAAAC,xLAAiBO;;;AACjB,AAAAD,2EAAA,sDAAA,aAAAE,FAAyBG;AAAzB,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAA,AAAAP,4CAAAO,eAAA,lEAAmCG;gBAAnC,AAAAV,4CAAAO,eAAA,vEAAwCI;mBAAxC,AAAAX,4CAAAO,eAAA,1EAAkDK;AAAlD,AACE,IAAMC,qBAAmB,0BAAA,xBAAI,iBAAA,hBAAMD;AAAV,AACG,8BAAA,mFAAA,1GAACE;GADJ;AAAA,AAEG,QAACF,6CAAAA,+CAAAA;;IACvBG,aAAW,6GAAA,mBAAA,9HAAI,kDAAA,lDAACC,6CAAEN;AAHxB,AAAA,0FAAA,yHAAA,2CAAA,aAAA,aAAA,mFAAA,oLAAA,2CAAA,cAAA,OAAA,gGAAA,mFAAA,qGAAA,2CAAA,tQASeG,8TAEH,CAAA,4BAAA,4CAEKE,6BACbJ;;AACN,AAAAP,2EAAA,4DAAA,WAA4BK;AAA5B,AAAA;;AAEA,gCAAA,hCAAMQ;AAAN,AAEE,mBAAA,AAAAC,fAAMC,+BAAc,sDAAA,mFAAA,zIAACC;AAArB,AAAA,0FACGhB,+BAAO,AAAA,wFAASe,cAAcA","names":["js/webapp","js/webapp.components","js/webapp.components.modal","js/webapp.components.modal.markup","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__52160","cljs.core/MultiFn","cljs.core.symbol","webapp.components.modal/markup","cljs.core/identity","p__52161","map__52162","cljs.core/--destructure-map","_","size","component","on-click-out","modal-on-click-out","re-frame.core/dispatch","modal-size","cljs.core._EQ_","webapp.components.modal/modal","cljs.core/deref","modal-status","re_frame.core.subscribe"],"sourcesContent":["(ns webapp.components.modal\n  (:require [re-frame.core :as rf]))\n\n(defmulti markup identity)\n(defmethod markup :open [_ {:keys [size component on-click-out]}]\n  (let [modal-on-click-out (if (nil? on-click-out)\n                             #(rf/dispatch [:close-modal])\n                             #(on-click-out))\n        modal-size (if (= size :large)\n                     \"w-2/3 max-w-full\" \"max-w-xl w-full\")]\n    [:div.fixed.z-20.inset-0.overflow-y-auto\n     {\"aria-modal\" true}\n     [:div.fixed.w-full.h-full.inset-0.bg-gray-100.bg-opacity-90.transition\n      {\"aria-hidden\" \"true\"\n       :on-click modal-on-click-out}]\n     [:div.relative.mb-large.m-auto\n      {:class (str \"bg-white border-2 rounded\"\n                   \"mx-auto mt-large p-regular overflow-auto \"\n                   modal-size)}\n      component]]))\n(defmethod markup :default [_] nil)\n\n(defn modal\n  []\n  (let [modal-status @(rf/subscribe [:modal])]\n    [markup (:status modal-status) modal-status]))\n"]}