{"version":3,"sources":["webapp/connections/views/connection_form_modal.cljs"],"mappings":"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","names":["webapp.connections.views.connection-form-modal/connection-creation","component->config-inputs","script-view","reagent.core.atom","agents-options->get-selected","agents","selected","cljs.core/first","p1__30243#","cljs.core.filter","cljs.core._EQ_","p__30245","map__30246","cljs.core/--destructure-map","cljs.core.get","_","config-values","secret-path-env","secret-provider","agent-tag","connection-name","connection-type","agent-token","agents-options","cljs.core/deref","agent-selected-status","webapp.components.forms/input","v","cljs.core/reset!","webapp.formatters/replace-empty-space->dash","clojure.string/upper-case","webapp.formatters/replace-dash->underline","webapp.components.combobox/main","cljs.core/not-empty","p1__30244#","or__4253__auto__","cljs.core/seq","webapp.components.headings/h4","fexpr__30257","cljs.core.keyword","webapp.connections.constants/connection-config-help-link","webapp.components.tabs/tabs","webapp.connections.views.agent-scripts-tab-view/main","webapp.connections.views.connection-form-modal/form","re_frame.core.subscribe","cljs.core.map","p__30261","map__30262","tags","status","clojure.string/blank?","agent-default","p1__30258#","connection-img","secret-path","configs","webapp.connections.utilities/get-config-keys","create-connection-request","webapp.http.runops-api/request","cljs.core.merge","G__30264","webapp.connections.utilities/config->json-stringify","webapp.connections.views.snackbar/main","res","webapp.components.headings/h2","re-frame.core/dispatch","e","js/setTimeout","webapp.components.divider/main","p1__30259#","webapp.connections.views.connection-card/main","webapp.connections.constants/connections-types-list","webapp.connections.views.configration-inputs/main","webapp.components.button/secondary","webapp.components.button/primary"],"sourcesContent":["(ns webapp.connections.views.connection-form-modal\n  (:require [clojure.string :as cs]\n            [re-frame.core :as rf]\n            [reagent.core :as r]\n            [webapp.components.button :as button]\n            [webapp.components.combobox :as combobox]\n            [webapp.components.divider :as divider]\n            [webapp.components.forms :as forms]\n            [webapp.components.headings :as h]\n            [webapp.components.tabs :as tabs]\n            [webapp.connections.constants :as connections-consts]\n            [webapp.connections.utilities :as utils]\n            [webapp.connections.views.configration-inputs :as config-inputs]\n            [webapp.connections.views.connection-card :as connection-card]\n            [webapp.connections.views.snackbar :as show-snackbar]\n            [webapp.formatters :as f]\n            [webapp.http.runops-api :as runops-api]\n            [webapp.connections.views.agent-scripts-tab-view :as agent-scripts-tab-view]))\n\n(defn connection-creation\n  [component->config-inputs]\n  (let [script-view (r/atom \"Kubernetes - Helm\")\n        agents-options->get-selected (fn [agents selected] (first (filter #(= (:value %) selected) agents)))]\n    (fn [_ {:keys [config-values secret-path-env secret-provider agent-tag connection-name connection-type agent-token agents-options]}]\n      (let [agent-selected-status (:status (agents-options->get-selected agents-options @agent-tag))]\n        [:<>\n         [:section {:class \"my-regular\"}\n          [:div {:class \"grid grid-cols-2 gap-x-regular\"}\n           [forms/input {:label \"Give a nickname for your connection\"\n                         :placeholder \"my-mysql-test\"\n                         :on-change (fn [v]\n                                      (reset! connection-name (f/replace-empty-space->dash (-> v .-target .-value)))\n                                      (reset! secret-path-env (cs/upper-case (f/replace-dash->underline (-> v .-target .-value)))))\n                         :required true\n                         :value @connection-name}]\n\n           [:div\n            [:label {:class \"block text-sm font-medium text-gray-700 mb-1\"}\n             \"Choose an Agent for your connection:\"]\n            [combobox/main {:options agents-options\n                            :placeholder \"Type\"\n                            :name \"connection-type\"\n                            :clear? true\n                            :required? true\n                            :selected @agent-tag\n                            :on-change (fn [v]\n                                         (reset! agent-tag v))}]\n            (when (not-empty @agent-tag) [:small {:class (str \"block p-1 \"\n                                                              (if (= agent-selected-status \"UP\")\n                                                                \"text-green-500\"\n                                                                \"text-red-500\"))}\n                                          (str \"This agent is \" agent-selected-status)])]]]\n\n         (if (= @agent-tag (or \"runops-hosted\" \"test\"))\n           (when (seq (component->config-inputs))\n             [:div {:class \"my-regular\"}\n              [:div {:class \"mb-small\"}\n               [h/h4 \"Configurations of your connection:\"]\n               [:label {:class \"text-xs text-gray-700\"}\n                \"For more details about this connection's configurations access \"]\n               [:a {:class \"text-xs text-magenta underline\"\n                    :href ((keyword @connection-type) connections-consts/connection-config-help-link)\n                    :target \"_blank\"\n                    :rel \"noopener noreferrer\"}\n                \"this link.\"]]\n              [:div {:class \"grid grid-cols-2 gap-x-regular\"}\n               (component->config-inputs)]])\n\n\n           [:section\n            [:div {:class \"my-regular\"}\n             [h/h4 \"Update your Agent\"]\n             [:small {:class \"block mb-regular text-gray-600\"}\n              \"Here's everything you need to get the environment (Agent) update and running.\"]\n\n             [:div {:class \"grid grid-cols-2 gap-x-regular\"}\n              [forms/input {:label \"Secret provider type\"\n                            :disabled true\n                            :value secret-provider}]\n              [forms/input {:label \"Secret path\"\n                            :disabled true\n                            :value @secret-path-env}]]\n\n             [tabs/tabs {:on-change #(reset! script-view %)\n                         :tabs [\"Kubernetes - Helm\" \"Kubernetes - Bash\" \"Localhost - Docker/Bash\"]}]\n             [agent-scripts-tab-view/main @script-view config-values @secret-path-env @agent-tag agent-token]]])]))))\n\n(defn form []\n  (let [agents (rf/subscribe [:agents])\n        agents-options (fn [agents] (map (fn [{:keys [tags status]}] {:value (if (cs/blank? tags) \"unnamed\" tags)\n                                                                      :text (if (cs/blank? tags) \"unnamed\" tags)\n                                                                      :status status}) agents))\n        agent-default (first (filter #(= (:tags %) (or \"runops-hosted\" \"test\")) @agents))\n        connection-type (r/atom \"\")\n        connection-name (r/atom \"\")\n        connection-img (r/atom \"\")\n        agent-tag (r/atom (or (:tags agent-default)\n                              (if (cs/blank? (:tags (first @agents)))\n                                \"unnamed\"\n                                (:tags (first @agents)))))\n        secret-provider (r/atom \"env-var\")\n        secret-path (r/atom \"\")\n        configs (r/atom (utils/get-config-keys (keyword @connection-type)))\n        agent-token (r/atom \"\")\n        create-connection-request #(runops-api/request {:method \"POST\"\n                                                        :uri \"/v1/targets\"\n                                                        :body (merge {:name @connection-name\n                                                                      :type @connection-type\n                                                                      :groups nil\n                                                                      :tags (if (= @agent-tag \"unnamed\") nil @agent-tag)}\n                                                                     (case @agent-tag\n                                                                       \"runops-hosted\" {:secret_provider \"runops\"\n                                                                                        :config (utils/config->json-stringify @configs)}\n                                                                       {:secret_provider @secret-provider\n                                                                        :secret_path @secret-path\n                                                                        :config nil}))\n                                                        :on-failure (fn [_]\n                                                                      (show-snackbar/main :failure))\n                                                        :on-success (fn [_]\n                                                                      (show-snackbar/main :success))})]\n    (fn []\n      (runops-api/request {:method \"GET\"\n                           :uri \"/v1/orgs\"\n                           :on-failure (fn [_]\n                                         (reset! agent-token \"\"))\n                           :on-success (fn [res]\n                                         (reset! agent-token (:agents_token res)))})\n      [:div\n       [:div {:class \"flex justify-between\"}\n        [h/h2 \"Create a new connection\" {:class \"mb-4 col-span-2\"}]\n        [:div {:class \"grid justify-end my-regular\"}\n         [:a\n          {:class \"text-blue-500 text-sm\"\n           :href \"/connections/new\"\n           :on-click #(rf/dispatch [:close-modal])}\n          \"Advanced configurations \u2192\"]]]\n       [:form.mb-regular\n        {:on-submit (fn [e]\n                      (.preventDefault e)\n                      (create-connection-request)\n                      (rf/dispatch [:close-modal])\n                      (js/setTimeout #(rf/dispatch [:get-connections]) 1500))}\n        [:<>\n         (divider/main)\n         [:div\n          (if (cs/blank? @connection-type)\n            [:<>\n             [:p {:class \"mb-large\"}\n              \"What would you like to connect?\"]\n             [:div {:role \"list\"\n                    :class \"grid gap-8 grid-cols-3 xl:grid-cols-4\"}\n              (map #(connection-card/main % connection-type connection-img configs) connections-consts/connections-types-list)]]\n\n            [:<>\n             [:div {:class \"flex gap-4 px-8 mb-regular\"}\n              [:button {:on-click (fn []\n                                    (reset! connection-type \"\")\n                                    (reset! connection-img \"\"))}\n               [:figure {:class \"w-5\"}\n                [:img {:src \"/icons/icon-arrow-left-blue.svg\"}]]]\n              [:img {:src @connection-img\n                     :alt (str \"logo \" @connection-type)}]]\n             [:div {:class \"max-w-7xl px-8 grid gap-16\"}\n              [:main\n               [connection-creation (config-inputs/main configs) {:config-values @configs\n                                                                  :secret-path-env secret-path\n                                                                  :secret-provider @secret-provider\n                                                                  :agent-tag agent-tag\n                                                                  :connection-name connection-name\n                                                                  :connection-type connection-type\n                                                                  :agent-token @agent-token\n                                                                  :agents-options (agents-options @agents)}]\n               (divider/main)\n               [:div.grid.grid-cols-2.gap-regular\n                (button/secondary {:text \"Cancel\"\n                                   :outlined true\n                                   :on-click #(rf/dispatch [:close-modal])})\n                (button/primary {:text \"Create\"\n                                 :type \"submit\"})]]]])]]]])))\n"]}