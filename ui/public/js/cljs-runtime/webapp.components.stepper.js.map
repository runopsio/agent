{"version":3,"sources":["webapp/components/stepper.cljs"],"mappings":";AAEA,4CAAA,5CAAOA;AAAP,AAAA,0FAAA,qDAAA,2CAAA,wDAAA,sHAAA,mFAAA,kDAAA,2CAAA,wDAAA,qBAAA,wDAAA,6BAAA,2DAAA,YAAA,oDAAA,uBAAA,mFAAA,qDAAA,2CAAA,gEAAA,UAAA,+CAAA,qHAAA,8DAAA;;AAWA,2CAAA,3CAAOC;AAAP,AAAA,0FAAA,qDAAA,2CAAA,wDAAA,kHAAA,mFAAA,qDAAA,2CAAA,wDAAA;;AAKA,4CAAA,5CAAOC;AAAP,AAAA,0FAAA,qDAAA,2CAAA,wDAAA,4IAAA,mFAAA,qDAAA,2CAAA,wDAAA;;AAKA;;;;;;;;;;iCAAA,yCAAAC,1EAAMI,mFASyBI;AAT/B,AAAA,IAAAP,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;aAAA,AAAAE,4CAAAF,eAAA,pEASWI;YATX,AAAAF,4CAAAF,eAAA,nEASkBK;WATlB,AAAAH,4CAAAF,eAAA,lEASwBM;AATxB,AAUE,IAAME,mBAAW,AAACC,6CAAEF,eAAe,6CAAKF,mDAAMD;IACxCM,qBAAa,GAAK,oDAAA,pDAACD,6CAAEL;AAD3B,AAAA,2BAAA,mFAAA,gDAAA,2CAAA,qDAAA,OAAA,wDAAA,sCAAA,mFAAA,gDAAA,2CAAA,wDAAA,8eAAA,mFAAA,gDAAA,2CAAA,qDAAA,IAAA,wDAAA,0CAAA,mFAAA,qDAAA,2CAAA,wDAAA,zgCAKkB,yBAAA,AAAA,mFAAA,mDAAA,2CAAA,4KAAA,kEAAA,uBAAA,7cAAM,GAAKI,6PACK,CAAA,oDAAyD,sBAAA,gBAAA,pCAAIE,gvBAK3E,iBAAAC,WAAMP;AAAN,AAAA,QAAAO;KAAA;AAAA,0FACcf;;;KADd;AAAA,0FAEaC;;;KAFb;AAAA,0FAGcC;;;;AAHd,MAAA,KAAAc,MAAA,CAAA,mEAAAD;;;aAXpB,mFAAA,qDAAA,2CAAA,wDAAA,qCAAA,mFAAA,qDAAA,2CAAA,wDAAA,sEAAA,mFAAA,qDAAA,2CAAA,wDAAA,6EAAA,2CAAA,oDAESN,raAeYA,yRAEAC;;AAEvB;;;;;;;;;;;iCAAA,jCAAMO,0EAUHC;AAVH,AAWE,IAAMC,QAAM,AAACC,eAAKF;IACZG,YAAU,AAACC,eAAKH;IAChBR,iBAAe,6CAAK,AAAA,oFAAQU,wDAAW,AAAA,wFAASA;AAFtD,AAGE,mDAAA,WAAAE,vDAACC;AAAD,AAAM,sCAAAD,/BAAChB,gDAAOI;GAAgBQ","names":["webapp.components.stepper/complete-circle","webapp.components.stepper/current-circle","webapp.components.stepper/upcoming-circle","p__36082","map__36083","cljs.core/--destructure-map","cljs.core.get","webapp.components.stepper/step","status","title","text","hash-last-step","last-step?","cljs.core._EQ_","active-step?","G__36084","js/Error","webapp.components.stepper/main","stepper","steps","cljs.core/vals","last-step","cljs.core/last","p1__36086#","cljs.core.map"],"sourcesContent":["(ns webapp.components.stepper)\n\n(defn- complete-circle\n  []\n  [:span {:class \"relative z-10 w-8 h-8 flex items-center justify-center bg-indigo-600 rounded-full group-hover:bg-indigo-800\"}\n   [:svg {:class \"w-5 h-5 text-white\"\n          :xmlns \"http://www.w3.org/2000/svg\"\n          :viewBox \"0 0 20 20\"\n          :fill \"currentColor\"}\n    [:path {:fill-rule \"evenodd\"\n            :d \"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n            :clip-rule \"evenodd\"}]]])\n\n(defn- current-circle\n  []\n  [:span {:class \"relative z-10 w-8 h-8 flex items-center justify-center bg-white border-2 border-indigo-600 rounded-full\"}\n   [:span {:class \"h-2.5 w-2.5 bg-indigo-600 rounded-full\"}]])\n\n(defn- upcoming-circle\n  []\n  [:span {:class \"relative z-10 w-8 h-8 flex items-center justify-center bg-white border-2 border-gray-300 rounded-full group-hover:border-gray-400\"}\n   [:span {:class \"h-2.5 w-2.5 bg-transparent rounded-full bg-gray-300 group-hover:bg-gray-400\"}]])\n\n(defn step\n  \"Element from: https://tailwindui.com/components/application-ui/navigation/steps#component-fe94b9131ea11970b4653b2f0d0c83cd\n  step -> {}, the couple of data which will determine the step.\n  hash-last-step -> string, it is a hash compounding by title and status string together.\n  \n  step is compounding by:\n   status -> enum string (:current :complete :upcoming), the status of the step.\n   title -> string, the title showed in front of step\n   text -> string, the text showed below the title\"\n  [{:keys [status title text]} hash-last-step]\n  (let [last-step? (= hash-last-step (str title status))\n        active-step? (not (= status \"upcoming\"))]\n    ^{:key title} [:ol {:role \"list\"\n                        :class \"overflow-hidden border-none\"}\n                   [:li {:class \"relative pb-10\"}\n                    (when (not last-step?)\n                      [:div {:class (str \"-ml-px absolute mt-0.5 top-4 left-4 w-0.5 h-full \" (if active-step? \"bg-indigo-600\" \"bg-gray-300\"))\n                             :aria-hidden \"true\"}])\n                    [:a {:href \"#\"\n                         :class \"relative flex items-start group\"}\n                     [:span {:class \"h-9 flex items-center\"}\n                      (case status\n                        \"complete\" [complete-circle]\n                        \"current\" [current-circle]\n                        \"upcoming\" [upcoming-circle])]\n                     [:span {:class \"ml-4 min-w-0 flex flex-col\"}\n                      [:span {:class \"text-xs font-semibold tracking-wide uppercase\"}\n                       title]\n                      [:span {:class \"text-sm text-gray-500\"}\n                       text]]]]]))\n\n(defn main\n  \"This function crafts the stepper with steps.\n  stepper -> {(keyword step-name) {:status enum :title string :text string }}, the stepper is the dictionary of steps.\n  \n  Each step inside of steppers is compounding by:\n   status -> enum string (:current :complete :upcoming), the status of the step.\n   title -> string, the title showed in front of step\n   text -> string, the text showed below the title\n   \n  e.g {:agent {:status :complete :title 'your agent' :text 'setup your agent'}}\"\n  [stepper]\n  (let [steps (vals stepper)\n        last-step (last steps)\n        hash-last-step (str (:title last-step) (:status last-step))]\n    (map #(step % hash-last-step) steps)))\n"]}