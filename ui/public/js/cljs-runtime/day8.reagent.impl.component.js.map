{"version":3,"sources":["day8/reagent/impl/component.cljs"],"mappings":"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","names":["day8.reagent.impl.component/operation-name","cljs.core/memoize","c","cljs.core/last","clojure.string.split","reagent.impl.component/component-name","day8.reagent.impl.component/wrap-funs","fmap","compiler","renders","cljs.core/select-keys","render-fun","cljs.core/vals","cljs.core/first","js/Error","cljs.core/not","cljs.core/count","cljs.core/ifn?","cljs.core.pr_str","or__4253__auto__","legacy-render","name","reagent.impl.util/fun-name","cljs.core.gensym","cljs.core/reduce-kv","m","k","v","cljs.core.assoc","reagent.impl.component/get-wrapper","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__37569","re-frame.trace/*current-trace*","*current-trace*-temp-val__37570","re-frame.trace/start-trace","end__27811__auto__","re-frame.interop/now","duration__27812__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","re-frame.trace/run-tracing-callbacks!","temp__5751__auto__","component-name","reagent.impl.util/*non-reactive*","reagent.impl.component/do-render","rat","day8.reagent.impl.component.goog$module$goog$object.get","_","reagent.impl.batching/mark-rendered","res","reagent.ratom/run-in-reaction","reagent.impl.batching/queue-render","reagent.impl.component/rat-opts","cljs-ratom","new-trace__27813__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.dissoc","re-frame.interop/reagent-id","cljs.core.map","day8.reagent.impl.component/patch-wrap-funs","reagent.impl.component/wrap-funs","js/day8","js/day8.reagent","js/day8.reagent.impl","js/day8.reagent.impl.component","js/day8.reagent.impl.component.original-custom-wrapper","day8.reagent.impl.component/original-custom-wrapper","reagent.impl.component/custom-wrapper","day8.reagent.impl.component/custom-wrapper","key","f","G__37574","cljs.core/Keyword","*current-trace*-orig-val__37577","*current-trace*-temp-val__37578","day8.reagent.impl.component/patch-custom-wrapper"],"sourcesContent":["(ns day8.reagent.impl.component\n  (:require\n    [goog.object            :as gobj]\n    [clojure.string         :as string]\n    [re-frame.trace         :as trace :include-macros true]\n    [re-frame.interop       :as interop]\n    [reagent.impl.component :as component]\n    [reagent.impl.batching  :as batch]\n    [reagent.impl.util      :as util]\n    [reagent.ratom          :as ratom]\n    [reagent.debug          :refer-macros [dev? warn error warn-unless assert-callable]]))\n\n(def operation-name (memoize (fn [c] (last (string/split (component/component-name c) #\" > \")))))\n\n;; Monkey patched reagent.impl.component/wrap-funs to hook into render\n(defn wrap-funs [fmap compiler]\n  (when (dev?)\n    (let [renders (select-keys fmap [:render :reagentRender])\n          render-fun (-> renders vals first)]\n      (assert (not (:componentFunction fmap)) \":component-function is no longer supported, use :reagent-render instead.\")\n      (assert (pos? (count renders)) \"Missing reagent-render\")\n      (assert (== 1 (count renders)) \"Too many render functions supplied\")\n      (assert-callable render-fun)))\n  (let [render-fun (or (:reagentRender fmap)\n                       (:render fmap))\n        legacy-render (nil? (:reagentRender fmap))\n        name (or (:displayName fmap)\n                 (util/fun-name render-fun)\n                 (str (gensym \"reagent\")))\n        fmap (reduce-kv (fn [m k v]\n                          (assoc m k (component/get-wrapper k v)))\n                        {} fmap)]\n    (assoc fmap\n      :displayName name\n      :cljsLegacyRender legacy-render\n      :reagentRender render-fun\n      :render (fn render []\n                (this-as c\n                  (trace/with-trace\n                    {:op-type :render\n                     :tags    (if-let [component-name (component/component-name c)]\n                                {:component-name component-name}\n                                {})\n                     :operation (operation-name c)})\n                  (if util/*non-reactive*\n                    (component/do-render c compiler)\n                    (let [^clj rat (gobj/get c \"cljsRatom\")\n                          _        (batch/mark-rendered c)\n                          res      (if (nil? rat)\n                                     (ratom/run-in-reaction #(component/do-render c compiler) c \"cljsRatom\"\n                                                            batch/queue-render component/rat-opts)\n                                     (._run rat false))\n                          cljs-ratom (gobj/get c \"cljsRatom\")]\n                      (trace/merge-trace!\n                        {:tags {:reaction (interop/reagent-id cljs-ratom)\n                                :input-signals (when cljs-ratom\n                                                 (map interop/reagent-id (gobj/get cljs-ratom \"watching\" :none)))}})\n                      res)))))))\n\n(defn patch-wrap-funs\n  []\n  (set! reagent.impl.component/wrap-funs wrap-funs))\n\n(defonce original-custom-wrapper reagent.impl.component/custom-wrapper)\n\n(defn custom-wrapper\n  [key f]\n  (case key\n    :componentWillUnmount\n    (fn componentWillUnmount []\n      (this-as c\n        (trace/with-trace\n          {:op-type   key\n           :operation (last (string/split (component/component-name c) #\" > \"))\n           :tags      {:component-name (component/component-name c)\n                       :reaction (interop/reagent-id (gobj/get c \"cljsRatom\"))}})\n        (.call (original-custom-wrapper key f) c c)))\n    (original-custom-wrapper key f)))\n\n(defn patch-custom-wrapper\n  []\n  (set! reagent.impl.component/custom-wrapper custom-wrapper))"]}