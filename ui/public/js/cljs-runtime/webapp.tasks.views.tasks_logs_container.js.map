{"version":3,"sources":["webapp/tasks/views/tasks_logs_container.cljs"],"mappings":"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","names":["webapp.tasks.views.tasks-logs-container/log-view","reagent.core.atom","webapp.tasks.views.tasks-logs-container/transform-logs->matrix","task-logs","cljs.core.get","cljs.core.js__GT_clj","js/module$node_modules$papaparse$papaparse_min.parse","cljs.core/clj->js","webapp.tasks.views.tasks-logs-container/transform-logs->csv","clojure.string/replace","webapp.tasks.views.tasks-logs-container/open-logs","task-id","p1__50864#","re-frame.core/dispatch","js/window","webapp.tasks.views.tasks-logs-container/item-dropdown","id","logs","connection-type","cljs.core/some","webapp.utilities/download-string-as-csv","p__50870","p__50871","map__50872","cljs.core/--destructure-map","map__50873","p1__50869#","webapp.tasks.views.tasks-logs-container/tab-container","task-logs-heads","task-logs-body","exceed-limit-rows?","fixed-height?","status","classes","webapp.components.tabs/tabs","cljs.core/reset!","G__50883","cljs.core/deref","js/Error","webapp.components.data-grid-table/main","webapp.components.logs-container/container","js/webapp","js/webapp.tasks","js/webapp.tasks.views","js/webapp.tasks.views.tasks-logs-container","js/webapp.tasks.views.tasks-logs-container.logs-view","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","fexpr__50892","cljs.core/MultiFn","cljs.core.symbol","webapp.tasks.views.tasks-logs-container/logs-view","cljs.core/identity","p__50893","map__50894","_","connection","popover-state","webapp.components.popover/right","p__50900","map__50901","webapp.tasks.views.tasks-logs-container/main","p__50902","map__50903","log-status","task-status","elapsed-time","task-logs-transformed","cljs.core/first","cljs.core/next","cljs.core/count","props-log-view","cljs.core._EQ_","G__50913","webapp.formatters/time-elapsed"],"sourcesContent":["(ns webapp.tasks.views.tasks-logs-container\n  (:require [clojure.string :as str]\n            [\"papaparse\" :as papa]\n            [re-frame.core :as rf]\n            [reagent.core :as r]\n            [webapp.formatters :as formatters]\n            [webapp.components.data-grid-table :as data-grid-table]\n            [webapp.components.logs-container :as logs]\n            [webapp.components.popover :as popover]\n            [webapp.components.tabs :as tabs]\n            [webapp.tasks.events :as events]\n            [webapp.utilities :as utils]))\n\n(def log-view (r/atom \"Table\"))\n\n(defn- transform-logs->matrix\n  [task-logs]\n  (when-not (nil? task-logs)\n    (get (js->clj (papa/parse task-logs (clj->js {\"delimiter\" \"\\t\"}))) \"data\")))\n\n(defn transform-logs->csv\n  [task-logs]\n  (str/replace task-logs #\"\\t\" \",\"))\n\n(defn- open-logs [task-id]\n  (rf/dispatch [::events/get-task-logs-url task-id #(.focus (.open js/window (:logs_url %) \"_blank\"))]))\n\n(defn item-dropdown\n  [id logs connection-type]\n  [:ul {:class \"text-right\" :style {}}\n   [:li {:class \"border-b py-small px-regular\"}\n    [:a {:class \"text-sm\"\n         :on-click #(open-logs id)\n         :href \"#\"}\n     \"Open logs in a new tab\"]]\n   (when (some #{connection-type} '(\"mysql\" \"postgres\" \"sql-server\"))\n     [:li {:class \"py-small px-regular\"}\n      [:a {:class \"text-sm\"\n           :href \"#\"\n           :on-click #(utils/download-string-as-csv (transform-logs->csv logs) \"download\")}\n       \"Download logs in CSV\"]])])\n\n(defn tab-container\n  [{:keys [task-logs-heads task-logs-body exceed-limit-rows?]} {:keys [fixed-height? status classes logs]}]\n  [:div {:class \"flex flex-col flex-grow\"}\n   [tabs/tabs {:on-change #(reset! log-view %)\n               :tabs (if exceed-limit-rows? [\"Plain text\"] [\"Table\" \"Plain text\"])}]\n   (case @log-view\n     \"Table\" [:div\n              {:class \"flex flex-col flex-grow\"}\n              [data-grid-table/main task-logs-heads task-logs-body]]\n     \"Plain text\" [logs/container {:fixed-height? fixed-height? :status status :logs logs}])])\n\n(defmulti logs-view identity)\n(defmethod logs-view :sql\n  [_ {:keys [task-id task-logs-heads task-logs-body logs connection status fixed-height? exceed-limit-rows? classes]} popover-state]\n  [:div {:class \"relative h-full flex flex-col\"}\n   [:div {:class \"absolute right-0 top-4\"}\n    [:figure {:class \"w-5 cursor-pointer\" :on-click #(reset! popover-state true)}\n     [:img {:src \"/icons/icon-dots-vertical.svg\"}]]\n    (popover/right {:open @popover-state\n                    :component (item-dropdown task-id logs connection)\n                    :on-click-outside #(reset! popover-state false)})]\n   [tab-container\n    {:task-logs-heads task-logs-heads :task-logs-body task-logs-body :exceed-limit-rows? exceed-limit-rows?}\n    {:fixed-height? fixed-height? :status status :logs logs :classes classes}]])\n\n(defmethod logs-view :not-sql\n  [_ {:keys [task-id logs connection status fixed-height? classes]} popover-state]\n  [:div {:class \"relative pt-12 flex flex-col\"}\n   [:div {:class \"absolute right-0 top-4\"}\n    [:figure {:class \"w-5 cursor-pointer\" :on-click #(reset! popover-state true)}\n     [:img {:src \"/icons/icon-dots-vertical.svg\"}]]\n    (popover/right {:open @popover-state\n                    :component (item-dropdown task-id logs connection)\n                    :on-click-outside #(reset! popover-state false)})]\n   [logs/container {:fixed-height? fixed-height? :status status :logs logs :classes classes}]])\n\n(defn main\n  [_]\n  (let [popover-state (r/atom false)]\n    (fn [{:keys [logs log-status task-status task-id connection classes fixed-height? elapsed-time]}]\n      (let [task-logs-transformed (transform-logs->matrix logs)\n            task-logs-heads (first task-logs-transformed)\n            task-logs-body (next task-logs-transformed)\n            exceed-limit-rows? (> (count task-logs-body) 55000)\n            props-log-view {:task-id task-id\n                            :task-logs-heads task-logs-heads\n                            :task-logs-body task-logs-body\n                            :connection connection\n                            :fixed-height? fixed-height?\n                            :status log-status\n                            :logs logs\n                            :classes classes\n                            :exceed-limit-rows? exceed-limit-rows?}]\n        (reset! log-view (if exceed-limit-rows? \"Plain text\" \"Table\"))\n        [:div {:class \"flex flex-col gap-small h-full\"}\n         [:div {:class \"flex-grow\"}\n          (if (and (= task-status \"success\") (= log-status :success))\n            (case connection\n              \"mysql\" [logs-view :sql props-log-view popover-state]\n              \"postgres\" [logs-view :sql props-log-view popover-state]\n              \"sql-server\" [logs-view :sql props-log-view popover-state]\n              [logs-view :not-sql props-log-view popover-state])\n            [logs-view :not-sql props-log-view popover-state])]\n         (when elapsed-time\n           [:div {:class \"flex-shrink text-xs text-gray-700 text-right px-small\"}\n            (str \"This query took \"\n                 (formatters/time-elapsed elapsed-time)\n                 \" to run\")])]))))\n\n\n"]}