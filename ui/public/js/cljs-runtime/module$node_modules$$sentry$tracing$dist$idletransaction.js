shadow$provide.module$node_modules$$sentry$tracing$dist$idletransaction=function(global,require,module,exports){function clearActiveTransaction(hub){hub&&(hub=hub.getScope())&&hub.getTransaction()&&hub.setSpan(void 0)}Object.defineProperty(exports,"__esModule",{value:!0});var tslib_1=require("module$node_modules$tslib$tslib"),utils_1=require("module$node_modules$$sentry$utils$dist$index"),constants_1=require("module$node_modules$$sentry$tracing$dist$constants");global=require("module$node_modules$$sentry$tracing$dist$span");
var spanstatus_1=require("module$node_modules$$sentry$tracing$dist$spanstatus");require=require("module$node_modules$$sentry$tracing$dist$transaction");exports.DEFAULT_IDLE_TIMEOUT=1E3;exports.HEARTBEAT_INTERVAL=5E3;var IdleTransactionSpanRecorder=function(_super){function IdleTransactionSpanRecorder(_pushActivity,_popActivity,transactionSpanId,maxlen){void 0===transactionSpanId&&(transactionSpanId="");maxlen=_super.call(this,maxlen)||this;maxlen._pushActivity=_pushActivity;maxlen._popActivity=_popActivity;
maxlen.transactionSpanId=transactionSpanId;return maxlen}tslib_1.__extends(IdleTransactionSpanRecorder,_super);IdleTransactionSpanRecorder.prototype.add=function(span){var _this=this;span.spanId!==this.transactionSpanId&&(span.finish=function(endTimestamp){span.endTimestamp="number"===typeof endTimestamp?endTimestamp:utils_1.timestampWithMs();_this._popActivity(span.spanId)},void 0===span.endTimestamp&&this._pushActivity(span.spanId));_super.prototype.add.call(this,span)};return IdleTransactionSpanRecorder}(global.SpanRecorder);
exports.IdleTransactionSpanRecorder=IdleTransactionSpanRecorder;require=function(_super){function IdleTransaction(transactionContext,_idleHub,_idleTimeout,_onScope){void 0===_idleTimeout&&(_idleTimeout=exports.DEFAULT_IDLE_TIMEOUT);void 0===_onScope&&(_onScope=!1);var _this=_super.call(this,transactionContext,_idleHub)||this;_this._idleHub=_idleHub;_this._idleTimeout=_idleTimeout;_this._onScope=_onScope;_this.activities={};_this._heartbeatCounter=0;_this._finished=!1;_this._beforeFinishCallbacks=
[];_idleHub&&_onScope&&(clearActiveTransaction(_idleHub),utils_1.logger.log("Setting idle transaction on scope. Span ID: "+_this.spanId),_idleHub.configureScope(function(scope){return scope.setSpan(_this)}));_this._initTimeout=setTimeout(function(){_this._finished||_this.finish()},_this._idleTimeout);return _this}tslib_1.__extends(IdleTransaction,_super);IdleTransaction.prototype.finish=function(endTimestamp){var _a,_this=this;void 0===endTimestamp&&(endTimestamp=utils_1.timestampWithMs());this._finished=
!0;this.activities={};if(this.spanRecorder){utils_1.logger.log("[Tracing] finishing IdleTransaction",(new Date(1E3*endTimestamp)).toISOString(),this.op);try{for(var _b=tslib_1.__values(this._beforeFinishCallbacks),_c=_b.next();!_c.done;_c=_b.next()){var callback=_c.value;callback(this,endTimestamp)}}catch(e_1_1){var e_1={error:e_1_1}}finally{try{_c&&!_c.done&&(_a=_b.return)&&_a.call(_b)}finally{if(e_1)throw e_1.error;}}this.spanRecorder.spans=this.spanRecorder.spans.filter(function(span){if(span.spanId===
_this.spanId)return!0;span.endTimestamp||(span.endTimestamp=endTimestamp,span.setStatus(spanstatus_1.SpanStatus.Cancelled),utils_1.logger.log("[Tracing] cancelling span since transaction ended early",JSON.stringify(span,void 0,2)));var keepSpan=span.startTimestamp<endTimestamp;keepSpan||utils_1.logger.log("[Tracing] discarding Span since it happened after Transaction was finished",JSON.stringify(span,void 0,2));return keepSpan});utils_1.logger.log("[Tracing] flushing IdleTransaction")}else utils_1.logger.log("[Tracing] No active IdleTransaction");
this._onScope&&clearActiveTransaction(this._idleHub);return _super.prototype.finish.call(this,endTimestamp)};IdleTransaction.prototype.registerBeforeFinishCallback=function(callback){this._beforeFinishCallbacks.push(callback)};IdleTransaction.prototype.initSpanRecorder=function(maxlen){var _this=this;this.spanRecorder||(this.spanRecorder=new IdleTransactionSpanRecorder(function(id){_this._finished||_this._pushActivity(id)},function(id){_this._finished||_this._popActivity(id)},this.spanId,maxlen),
utils_1.logger.log("Starting heartbeat"),this._pingHeartbeat());this.spanRecorder.add(this)};IdleTransaction.prototype._pushActivity=function(spanId){this._initTimeout&&(clearTimeout(this._initTimeout),this._initTimeout=void 0);utils_1.logger.log("[Tracing] pushActivity: "+spanId);this.activities[spanId]=!0;utils_1.logger.log("[Tracing] new activities count",Object.keys(this.activities).length)};IdleTransaction.prototype._popActivity=function(spanId){var _this=this;this.activities[spanId]&&(utils_1.logger.log("[Tracing] popActivity "+
spanId),delete this.activities[spanId],utils_1.logger.log("[Tracing] new activities count",Object.keys(this.activities).length));if(0===Object.keys(this.activities).length){spanId=this._idleTimeout;var end_1=utils_1.timestampWithMs()+spanId/1E3;setTimeout(function(){_this._finished||(_this.setTag(constants_1.FINISH_REASON_TAG,constants_1.IDLE_TRANSACTION_FINISH_REASONS[1]),_this.finish(end_1))},spanId)}};IdleTransaction.prototype._beat=function(){if(!this._finished){var heartbeatString=Object.keys(this.activities).join("");
this._heartbeatCounter=heartbeatString===this._prevHeartbeatString?this._heartbeatCounter+1:1;this._prevHeartbeatString=heartbeatString;3<=this._heartbeatCounter?(utils_1.logger.log("[Tracing] Transaction finished because of no change for 3 heart beats"),this.setStatus(spanstatus_1.SpanStatus.DeadlineExceeded),this.setTag(constants_1.FINISH_REASON_TAG,constants_1.IDLE_TRANSACTION_FINISH_REASONS[0]),this.finish()):this._pingHeartbeat()}};IdleTransaction.prototype._pingHeartbeat=function(){var _this=
this;utils_1.logger.log("pinging Heartbeat -\x3e current counter: "+this._heartbeatCounter);setTimeout(function(){_this._beat()},exports.HEARTBEAT_INTERVAL)};return IdleTransaction}(require.Transaction);exports.IdleTransaction=require}
//# sourceMappingURL=module$node_modules$$sentry$tracing$dist$idletransaction.js.map
