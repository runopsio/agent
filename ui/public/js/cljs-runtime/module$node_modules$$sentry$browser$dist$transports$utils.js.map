{
"version":3,
"file":"module$node_modules$$sentry$browser$dist$transports$utils.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,yDAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA2CtHC,QAASA,6BAA4B,EAAG,CACpC,IAAQC,EACR,IAAIC,eAAJ,CACI,MAAOA,gBAIX,IAAIC,OAAQC,CAAAA,aAAR,CAAsBR,MAAOS,CAAAA,KAA7B,CAAJ,CACI,MAAQH,gBAAR,CAA0BN,MAAOS,CAAAA,KAAMC,CAAAA,IAAb,CAAkBV,MAAlB,CAE9B,KAAIW,SAAWX,MAAOW,CAAAA,QAAtB,CACIC,UAAYZ,MAAOS,CAAAA,KAEvB,IAAuF,UAAvF,GAAI,OAA4B,IAApB,GAAME,QAAN,EAAmC,IAAK,EAAxC,GAAMA,QAAN,CAA4C,IAAK,EAAjD,CAAMA,QAAkDE,CAAAA,aAAhE,CAAJ,CACI,GAAI,CACA,IAAIC,QAAUH,QAASE,CAAAA,aAAT,CAAuB,QAAvB,CACdC,QAAQC,CAAAA,MAAR,CAAiB,CAAA,CACjBJ,SAASK,CAAAA,IAAKC,CAAAA,WAAd,CAA0BH,OAA1B,CACA;GAAqC,IAAjC,IAACT,EAAD,CAAMS,OAAQI,CAAAA,aAAd,GAAgD,IAAK,EAArD,GAAyCb,EAAzC,CAAyD,CAAzD,CAAkEA,EAAGI,CAAAA,KAAzE,CACIG,SAAA,CAAYE,OAAQI,CAAAA,aAAcT,CAAAA,KAEtCE,SAASK,CAAAA,IAAKG,CAAAA,WAAd,CAA0BL,OAA1B,CAPA,CASJ,MAAOM,CAAP,CAAU,CACNb,OAAQc,CAAAA,MAAOC,CAAAA,IAAf,CAAoB,iFAApB,CAAuGF,CAAvG,CADM,CAId,MAAQd,gBAAR,CAA0BM,SAAUF,CAAAA,IAAV,CAAeV,MAAf,CA3BU,CA1CxCuB,MAAOC,CAAAA,cAAP,CAAsBrB,OAAtB,CAA+B,YAA/B,CAA6C,CAAEsB,MAAO,CAAA,CAAT,CAA7C,CACA,KAAIlB,QAAUN,OAAA,CAAQ,8CAAR,CACVD,OAAJ,CAAaO,OAAQmB,CAAAA,eAAR,EACb,KAAIpB,eAqEJH,QAAQC,CAAAA,4BAAR;AAAuCA,4BAyBvCD,QAAQwB,CAAAA,UAAR,CAlBAA,QAAmB,CAACC,GAAD,CAAMC,IAAN,CAAY,CAG3B,GAFqF,oBAErF,GAFsBN,MAAOO,CAAAA,SAAUC,CAAAA,QAASC,CAAAA,IAA1B,CAA+BhC,MAA/B,EAAyCA,MAAOiC,CAAAA,SAAhD,CAEtB,EAD8E,UAC9E,GADuC,MAAOjC,OAAOiC,CAAAA,SAAUC,CAAAA,UAC/D,CAGI,MADiBlC,OAAOiC,CAAAA,SAAUC,CAAAA,UAAWxB,CAAAA,IAA5BwB,CAAiClC,MAAOiC,CAAAA,SAAxCC,CACV,CAAWN,GAAX,CAAgBC,IAAhB,CAEX,IAAItB,OAAQ4B,CAAAA,aAAR,EAAJ,CAA6B,CACzB,IAAIC,QAAUhC,4BAAA,EACd,OAAOG,QAAQ8B,CAAAA,MAAR,CAAeD,OAAA,CAAQR,GAAR,CAAa,CACzBC,IADyB,CAE/BS,OAAQ,MAFuB,CAG/BC,YAAa,MAHkB,CAI/BC,UAAW,CAAA,CAJoB,CAAb,CAAf,CAFkB,CARF,CAhFuF;",
"sources":["node_modules/@sentry/browser/dist/transports/utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$browser$dist$transports$utils\"] = function(global,require,module,exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"@sentry/utils\");\nvar global = utils_1.getGlobalObject();\nvar cachedFetchImpl;\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */\nfunction getNativeFetchImplementation() {\n    var _a, _b;\n    if (cachedFetchImpl) {\n        return cachedFetchImpl;\n    }\n    /* eslint-disable @typescript-eslint/unbound-method */\n    // Fast path to avoid DOM I/O\n    if (utils_1.isNativeFetch(global.fetch)) {\n        return (cachedFetchImpl = global.fetch.bind(global));\n    }\n    var document = global.document;\n    var fetchImpl = global.fetch;\n    // eslint-disable-next-line deprecation/deprecation\n    if (typeof ((_a = document) === null || _a === void 0 ? void 0 : _a.createElement) === \"function\") {\n        try {\n            var sandbox = document.createElement('iframe');\n            sandbox.hidden = true;\n            document.head.appendChild(sandbox);\n            if ((_b = sandbox.contentWindow) === null || _b === void 0 ? void 0 : _b.fetch) {\n                fetchImpl = sandbox.contentWindow.fetch;\n            }\n            document.head.removeChild(sandbox);\n        }\n        catch (e) {\n            utils_1.logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e);\n        }\n    }\n    return (cachedFetchImpl = fetchImpl.bind(global));\n    /* eslint-enable @typescript-eslint/unbound-method */\n}\nexports.getNativeFetchImplementation = getNativeFetchImplementation;\n/**\n * Sends sdk client report using sendBeacon or fetch as a fallback if available\n *\n * @param url report endpoint\n * @param body report payload\n */\nfunction sendReport(url, body) {\n    var isRealNavigator = Object.prototype.toString.call(global && global.navigator) === '[object Navigator]';\n    var hasSendBeacon = isRealNavigator && typeof global.navigator.sendBeacon === 'function';\n    if (hasSendBeacon) {\n        // Prevent illegal invocations - https://xgwang.me/posts/you-may-not-know-beacon/#it-may-throw-error%2C-be-sure-to-catch\n        var sendBeacon = global.navigator.sendBeacon.bind(global.navigator);\n        return sendBeacon(url, body);\n    }\n    if (utils_1.supportsFetch()) {\n        var fetch_1 = getNativeFetchImplementation();\n        return utils_1.forget(fetch_1(url, {\n            body: body,\n            method: 'POST',\n            credentials: 'omit',\n            keepalive: true,\n        }));\n    }\n}\nexports.sendReport = sendReport;\n//# sourceMappingURL=utils.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","getNativeFetchImplementation","_b","cachedFetchImpl","utils_1","isNativeFetch","fetch","bind","document","fetchImpl","createElement","sandbox","hidden","head","appendChild","contentWindow","removeChild","e","logger","warn","Object","defineProperty","value","getGlobalObject","sendReport","url","body","prototype","toString","call","navigator","sendBeacon","supportsFetch","fetch_1","forget","method","credentials","keepalive"]
}
