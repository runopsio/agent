{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$arduino.js",
"lineCount":14,
"mappings":"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",
"sources":["node_modules/highlight_DOT_js/lib/languages/arduino.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$arduino\"] = function(global,require,module,exports) {\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(?:', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: C++\nCategory: common, system\nWebsite: https://isocpp.org\n*/\n\n/** @type LanguageFn */\nfunction cPlusPlus(hljs) {\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\n    contains: [\n      {\n        begin: /\\\\\\n/\n      }\n    ]\n  });\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  const FUNCTION_TYPE_RE = '(?!struct)(' +\n    DECLTYPE_AUTO_RE + '|' +\n    optional(NAMESPACE_RE) +\n    '[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) +\n  ')';\n\n  const CPP_PRIMITIVE_TYPES = {\n    className: 'type',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  const STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"',\n        end: '\"',\n        illegal: '\\\\n',\n        contains: [ hljs.BACKSLASH_ESCAPE ]\n      },\n      {\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + '|.)',\n        end: '\\'',\n        illegal: '.'\n      },\n      hljs.END_SAME_AS_BEGIN({\n        begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n        end: /\\)([^()\\\\ ]{0,16})\"/\n      })\n    ]\n  };\n\n  const NUMBERS = {\n    className: 'number',\n    variants: [\n      {\n        begin: '\\\\b(0b[01\\']+)'\n      },\n      {\n        begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'\n      },\n      {\n        begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n      }\n    ],\n    relevance: 0\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      keyword:\n        'if else elif endif define undef warning error line ' +\n        'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/,\n        relevance: 0\n      },\n      hljs.inherit(STRINGS, {\n        className: 'string'\n      }),\n      {\n        className: 'string',\n        begin: /<.*?>/\n      },\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  const TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n\n  const FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  // https://en.cppreference.com/w/cpp/keyword\n  const RESERVED_KEYWORDS = [\n    'alignas',\n    'alignof',\n    'and',\n    'and_eq',\n    'asm',\n    'atomic_cancel',\n    'atomic_commit',\n    'atomic_noexcept',\n    'auto',\n    'bitand',\n    'bitor',\n    'break',\n    'case',\n    'catch',\n    'class',\n    'co_await',\n    'co_return',\n    'co_yield',\n    'compl',\n    'concept',\n    'const',\n    'const_cast|10',\n    'consteval',\n    'constexpr',\n    'constinit',\n    'continue',\n    'decltype',\n    'default',\n    'delete',\n    'do',\n    'dynamic_cast|10',\n    'else',\n    'enum',\n    'explicit',\n    'export',\n    'extern',\n    'false',\n    'final',\n    'for',\n    'friend',\n    'goto',\n    'if',\n    'import',\n    'inline',\n    'module',\n    'mutable',\n    'namespace',\n    'new',\n    'noexcept',\n    'not',\n    'not_eq',\n    'nullptr',\n    'operator',\n    'or',\n    'or_eq',\n    'override',\n    'private',\n    'protected',\n    'public',\n    'reflexpr',\n    'register',\n    'reinterpret_cast|10',\n    'requires',\n    'return',\n    'signed',\n    'sizeof',\n    'static',\n    'static_assert',\n    'static_cast|10',\n    'struct',\n    'switch',\n    'synchronized',\n    'template',\n    'this',\n    'thread_local',\n    'throw',\n    'transaction_safe',\n    'transaction_safe_dynamic',\n    'true',\n    'try',\n    'typedef',\n    'typeid',\n    'typename',\n    'union',\n    'unsigned',\n    'using',\n    'virtual',\n    'volatile',\n    'while',\n    'xor',\n    'xor_eq,'\n  ];\n\n  // https://en.cppreference.com/w/cpp/keyword\n  const RESERVED_TYPES = [\n    'bool',\n    'char',\n    'char16_t',\n    'char32_t',\n    'char8_t',\n    'double',\n    'float',\n    'int',\n    'long',\n    'short',\n    'void',\n    'wchar_t'\n  ];\n\n  const TYPE_HINTS = [\n    'any',\n    'auto_ptr',\n    'barrier',\n    'binary_semaphore',\n    'bitset',\n    'complex',\n    'condition_variable',\n    'condition_variable_any',\n    'counting_semaphore',\n    'deque',\n    'false_type',\n    'future',\n    'imaginary',\n    'initializer_list',\n    'istringstream',\n    'jthread',\n    'latch',\n    'lock_guard',\n    'multimap',\n    'multiset',\n    'mutex',\n    'optional',\n    'ostringstream',\n    'packaged_task',\n    'pair',\n    'promise',\n    'priority_queue',\n    'queue',\n    'recursive_mutex',\n    'recursive_timed_mutex',\n    'scoped_lock',\n    'set',\n    'shared_future',\n    'shared_lock',\n    'shared_mutex',\n    'shared_timed_mutex',\n    'shared_ptr',\n    'stack',\n    'string_view',\n    'stringstream',\n    'timed_mutex',\n    'thread',\n    'true_type',\n    'tuple',\n    'unique_lock',\n    'unique_ptr',\n    'unordered_map',\n    'unordered_multimap',\n    'unordered_multiset',\n    'unordered_set',\n    'variant',\n    'vector',\n    'weak_ptr',\n    'wstring',\n    'wstring_view'\n  ];\n\n  const FUNCTION_HINTS = [\n    'abort',\n    'abs',\n    'acos',\n    'apply',\n    'as_const',\n    'asin',\n    'atan',\n    'atan2',\n    'calloc',\n    'ceil',\n    'cerr',\n    'cin',\n    'clog',\n    'cos',\n    'cosh',\n    'cout',\n    'declval',\n    'endl',\n    'exchange',\n    'exit',\n    'exp',\n    'fabs',\n    'floor',\n    'fmod',\n    'forward',\n    'fprintf',\n    'fputs',\n    'free',\n    'frexp',\n    'fscanf',\n    'future',\n    'invoke',\n    'isalnum',\n    'isalpha',\n    'iscntrl',\n    'isdigit',\n    'isgraph',\n    'islower',\n    'isprint',\n    'ispunct',\n    'isspace',\n    'isupper',\n    'isxdigit',\n    'labs',\n    'launder',\n    'ldexp',\n    'log',\n    'log10',\n    'make_pair',\n    'make_shared',\n    'make_shared_for_overwrite',\n    'make_tuple',\n    'make_unique',\n    'malloc',\n    'memchr',\n    'memcmp',\n    'memcpy',\n    'memset',\n    'modf',\n    'move',\n    'pow',\n    'printf',\n    'putchar',\n    'puts',\n    'realloc',\n    'scanf',\n    'sin',\n    'sinh',\n    'snprintf',\n    'sprintf',\n    'sqrt',\n    'sscanf',\n    'std',\n    'stderr',\n    'stdin',\n    'stdout',\n    'strcat',\n    'strchr',\n    'strcmp',\n    'strcpy',\n    'strcspn',\n    'strlen',\n    'strncat',\n    'strncmp',\n    'strncpy',\n    'strpbrk',\n    'strrchr',\n    'strspn',\n    'strstr',\n    'swap',\n    'tan',\n    'tanh',\n    'terminate',\n    'to_underlying',\n    'tolower',\n    'toupper',\n    'vfprintf',\n    'visit',\n    'vprintf',\n    'vsprintf'\n  ];\n\n  const LITERALS = [\n    'NULL',\n    'false',\n    'nullopt',\n    'nullptr',\n    'true'\n  ];\n\n  // https://en.cppreference.com/w/cpp/keyword\n  const BUILT_IN = [\n    '_Pragma'\n  ];\n\n  const CPP_KEYWORDS = {\n    type: RESERVED_TYPES,\n    keyword: RESERVED_KEYWORDS,\n    literal: LITERALS,\n    built_in: BUILT_IN,\n    _type_hints: TYPE_HINTS\n  };\n\n  const FUNCTION_DISPATCH = {\n    className: 'function.dispatch',\n    relevance: 0,\n    keywords: {\n      // Only for relevance, not highlighting.\n      _hint: FUNCTION_HINTS\n    },\n    begin: concat(\n      /\\b/,\n      /(?!decltype)/,\n      /(?!if)/,\n      /(?!for)/,\n      /(?!while)/,\n      hljs.IDENT_RE,\n      lookahead(/(<[^<>]+>|)\\s*\\(/))\n  };\n\n  const EXPRESSION_CONTAINS = [\n    FUNCTION_DISPATCH,\n    PREPROCESSOR,\n    CPP_PRIMITIVE_TYPES,\n    C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  const EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [\n      {\n        begin: /=/,\n        end: /;/\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/\n      },\n      {\n        beginKeywords: 'new throw return else',\n        end: /;/\n      }\n    ],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),\n        relevance: 0\n      }\n    ]),\n    relevance: 0\n  };\n\n  const FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [\n      { // to prevent it from being confused as the function title\n        begin: DECLTYPE_AUTO_RE,\n        keywords: CPP_KEYWORDS,\n        relevance: 0\n      },\n      {\n        begin: FUNCTION_TITLE,\n        returnBegin: true,\n        contains: [ TITLE_MODE ],\n        relevance: 0\n      },\n      // needed because we do not have look-behind on the below rule\n      // to prevent it from grabbing the final : in a :: pair\n      {\n        begin: /::/,\n        relevance: 0\n      },\n      // initializers\n      {\n        begin: /:/,\n        endsWithParent: true,\n        contains: [\n          STRINGS,\n          NUMBERS\n        ]\n      },\n      // allow for multiple declarations, e.g.:\n      // extern void f(int), g(char);\n      {\n        relevance: 0,\n        match: /,/\n      },\n      {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: [\n          C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          STRINGS,\n          NUMBERS,\n          CPP_PRIMITIVE_TYPES,\n          // Count matching parentheses.\n          {\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              'self',\n              C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES\n            ]\n          }\n        ]\n      },\n      CPP_PRIMITIVE_TYPES,\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      PREPROCESSOR\n    ]\n  };\n\n  return {\n    name: 'C++',\n    aliases: [\n      'cc',\n      'c++',\n      'h++',\n      'hpp',\n      'hh',\n      'hxx',\n      'cxx'\n    ],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    classNameAliases: {\n      'function.dispatch': 'built_in'\n    },\n    contains: [].concat(\n      EXPRESSION_CONTEXT,\n      FUNCTION_DECLARATION,\n      FUNCTION_DISPATCH,\n      EXPRESSION_CONTAINS,\n      [\n        PREPROCESSOR,\n        { // containers: ie, `vector <int> rooms (9);`\n          begin: '\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\\\s*<',\n          end: '>',\n          keywords: CPP_KEYWORDS,\n          contains: [\n            'self',\n            CPP_PRIMITIVE_TYPES\n          ]\n        },\n        {\n          begin: hljs.IDENT_RE + '::',\n          keywords: CPP_KEYWORDS\n        },\n        {\n          match: [\n            // extra complexity to deal with `enum class` and `enum struct`\n            /\\b(?:enum(?:\\s+(?:class|struct))?|class|struct|union)/,\n            /\\s+/,\n            /\\w+/\n          ],\n          className: {\n            1: 'keyword',\n            3: 'title.class'\n          }\n        }\n      ])\n  };\n}\n\n/*\nLanguage: Arduino\nAuthor: Stefania Mellai <s.mellai@arduino.cc>\nDescription: The Arduino\u00ae Language is a superset of C++. This rules are designed to highlight the Arduino\u00ae source code. For info about language see http://www.arduino.cc.\nWebsite: https://www.arduino.cc\n*/\n\n/** @type LanguageFn */\nfunction arduino(hljs) {\n  const ARDUINO_KW = {\n    type: [\n      \"boolean\",\n      \"byte\",\n      \"word\",\n      \"String\"\n    ],\n    built_in: [\n      \"KeyboardController\",\n      \"MouseController\",\n      \"SoftwareSerial\",\n      \"EthernetServer\",\n      \"EthernetClient\",\n      \"LiquidCrystal\",\n      \"RobotControl\",\n      \"GSMVoiceCall\",\n      \"EthernetUDP\",\n      \"EsploraTFT\",\n      \"HttpClient\",\n      \"RobotMotor\",\n      \"WiFiClient\",\n      \"GSMScanner\",\n      \"FileSystem\",\n      \"Scheduler\",\n      \"GSMServer\",\n      \"YunClient\",\n      \"YunServer\",\n      \"IPAddress\",\n      \"GSMClient\",\n      \"GSMModem\",\n      \"Keyboard\",\n      \"Ethernet\",\n      \"Console\",\n      \"GSMBand\",\n      \"Esplora\",\n      \"Stepper\",\n      \"Process\",\n      \"WiFiUDP\",\n      \"GSM_SMS\",\n      \"Mailbox\",\n      \"USBHost\",\n      \"Firmata\",\n      \"PImage\",\n      \"Client\",\n      \"Server\",\n      \"GSMPIN\",\n      \"FileIO\",\n      \"Bridge\",\n      \"Serial\",\n      \"EEPROM\",\n      \"Stream\",\n      \"Mouse\",\n      \"Audio\",\n      \"Servo\",\n      \"File\",\n      \"Task\",\n      \"GPRS\",\n      \"WiFi\",\n      \"Wire\",\n      \"TFT\",\n      \"GSM\",\n      \"SPI\",\n      \"SD\"\n    ],\n    _hints: [\n      \"setup\",\n      \"loop\",\n      \"runShellCommandAsynchronously\",\n      \"analogWriteResolution\",\n      \"retrieveCallingNumber\",\n      \"printFirmwareVersion\",\n      \"analogReadResolution\",\n      \"sendDigitalPortPair\",\n      \"noListenOnLocalhost\",\n      \"readJoystickButton\",\n      \"setFirmwareVersion\",\n      \"readJoystickSwitch\",\n      \"scrollDisplayRight\",\n      \"getVoiceCallStatus\",\n      \"scrollDisplayLeft\",\n      \"writeMicroseconds\",\n      \"delayMicroseconds\",\n      \"beginTransmission\",\n      \"getSignalStrength\",\n      \"runAsynchronously\",\n      \"getAsynchronously\",\n      \"listenOnLocalhost\",\n      \"getCurrentCarrier\",\n      \"readAccelerometer\",\n      \"messageAvailable\",\n      \"sendDigitalPorts\",\n      \"lineFollowConfig\",\n      \"countryNameWrite\",\n      \"runShellCommand\",\n      \"readStringUntil\",\n      \"rewindDirectory\",\n      \"readTemperature\",\n      \"setClockDivider\",\n      \"readLightSensor\",\n      \"endTransmission\",\n      \"analogReference\",\n      \"detachInterrupt\",\n      \"countryNameRead\",\n      \"attachInterrupt\",\n      \"encryptionType\",\n      \"readBytesUntil\",\n      \"robotNameWrite\",\n      \"readMicrophone\",\n      \"robotNameRead\",\n      \"cityNameWrite\",\n      \"userNameWrite\",\n      \"readJoystickY\",\n      \"readJoystickX\",\n      \"mouseReleased\",\n      \"openNextFile\",\n      \"scanNetworks\",\n      \"noInterrupts\",\n      \"digitalWrite\",\n      \"beginSpeaker\",\n      \"mousePressed\",\n      \"isActionDone\",\n      \"mouseDragged\",\n      \"displayLogos\",\n      \"noAutoscroll\",\n      \"addParameter\",\n      \"remoteNumber\",\n      \"getModifiers\",\n      \"keyboardRead\",\n      \"userNameRead\",\n      \"waitContinue\",\n      \"processInput\",\n      \"parseCommand\",\n      \"printVersion\",\n      \"readNetworks\",\n      \"writeMessage\",\n      \"blinkVersion\",\n      \"cityNameRead\",\n      \"readMessage\",\n      \"setDataMode\",\n      \"parsePacket\",\n      \"isListening\",\n      \"setBitOrder\",\n      \"beginPacket\",\n      \"isDirectory\",\n      \"motorsWrite\",\n      \"drawCompass\",\n      \"digitalRead\",\n      \"clearScreen\",\n      \"serialEvent\",\n      \"rightToLeft\",\n      \"setTextSize\",\n      \"leftToRight\",\n      \"requestFrom\",\n      \"keyReleased\",\n      \"compassRead\",\n      \"analogWrite\",\n      \"interrupts\",\n      \"WiFiServer\",\n      \"disconnect\",\n      \"playMelody\",\n      \"parseFloat\",\n      \"autoscroll\",\n      \"getPINUsed\",\n      \"setPINUsed\",\n      \"setTimeout\",\n      \"sendAnalog\",\n      \"readSlider\",\n      \"analogRead\",\n      \"beginWrite\",\n      \"createChar\",\n      \"motorsStop\",\n      \"keyPressed\",\n      \"tempoWrite\",\n      \"readButton\",\n      \"subnetMask\",\n      \"debugPrint\",\n      \"macAddress\",\n      \"writeGreen\",\n      \"randomSeed\",\n      \"attachGPRS\",\n      \"readString\",\n      \"sendString\",\n      \"remotePort\",\n      \"releaseAll\",\n      \"mouseMoved\",\n      \"background\",\n      \"getXChange\",\n      \"getYChange\",\n      \"answerCall\",\n      \"getResult\",\n      \"voiceCall\",\n      \"endPacket\",\n      \"constrain\",\n      \"getSocket\",\n      \"writeJSON\",\n      \"getButton\",\n      \"available\",\n      \"connected\",\n      \"findUntil\",\n      \"readBytes\",\n      \"exitValue\",\n      \"readGreen\",\n      \"writeBlue\",\n      \"startLoop\",\n      \"IPAddress\",\n      \"isPressed\",\n      \"sendSysex\",\n      \"pauseMode\",\n      \"gatewayIP\",\n      \"setCursor\",\n      \"getOemKey\",\n      \"tuneWrite\",\n      \"noDisplay\",\n      \"loadImage\",\n      \"switchPIN\",\n      \"onRequest\",\n      \"onReceive\",\n      \"changePIN\",\n      \"playFile\",\n      \"noBuffer\",\n      \"parseInt\",\n      \"overflow\",\n      \"checkPIN\",\n      \"knobRead\",\n      \"beginTFT\",\n      \"bitClear\",\n      \"updateIR\",\n      \"bitWrite\",\n      \"position\",\n      \"writeRGB\",\n      \"highByte\",\n      \"writeRed\",\n      \"setSpeed\",\n      \"readBlue\",\n      \"noStroke\",\n      \"remoteIP\",\n      \"transfer\",\n      \"shutdown\",\n      \"hangCall\",\n      \"beginSMS\",\n      \"endWrite\",\n      \"attached\",\n      \"maintain\",\n      \"noCursor\",\n      \"checkReg\",\n      \"checkPUK\",\n      \"shiftOut\",\n      \"isValid\",\n      \"shiftIn\",\n      \"pulseIn\",\n      \"connect\",\n      \"println\",\n      \"localIP\",\n      \"pinMode\",\n      \"getIMEI\",\n      \"display\",\n      \"noBlink\",\n      \"process\",\n      \"getBand\",\n      \"running\",\n      \"beginSD\",\n      \"drawBMP\",\n      \"lowByte\",\n      \"setBand\",\n      \"release\",\n      \"bitRead\",\n      \"prepare\",\n      \"pointTo\",\n      \"readRed\",\n      \"setMode\",\n      \"noFill\",\n      \"remove\",\n      \"listen\",\n      \"stroke\",\n      \"detach\",\n      \"attach\",\n      \"noTone\",\n      \"exists\",\n      \"buffer\",\n      \"height\",\n      \"bitSet\",\n      \"circle\",\n      \"config\",\n      \"cursor\",\n      \"random\",\n      \"IRread\",\n      \"setDNS\",\n      \"endSMS\",\n      \"getKey\",\n      \"micros\",\n      \"millis\",\n      \"begin\",\n      \"print\",\n      \"write\",\n      \"ready\",\n      \"flush\",\n      \"width\",\n      \"isPIN\",\n      \"blink\",\n      \"clear\",\n      \"press\",\n      \"mkdir\",\n      \"rmdir\",\n      \"close\",\n      \"point\",\n      \"yield\",\n      \"image\",\n      \"BSSID\",\n      \"click\",\n      \"delay\",\n      \"read\",\n      \"text\",\n      \"move\",\n      \"peek\",\n      \"beep\",\n      \"rect\",\n      \"line\",\n      \"open\",\n      \"seek\",\n      \"fill\",\n      \"size\",\n      \"turn\",\n      \"stop\",\n      \"home\",\n      \"find\",\n      \"step\",\n      \"tone\",\n      \"sqrt\",\n      \"RSSI\",\n      \"SSID\",\n      \"end\",\n      \"bit\",\n      \"tan\",\n      \"cos\",\n      \"sin\",\n      \"pow\",\n      \"map\",\n      \"abs\",\n      \"max\",\n      \"min\",\n      \"get\",\n      \"run\",\n      \"put\"\n    ],\n    literal: [\n      \"DIGITAL_MESSAGE\",\n      \"FIRMATA_STRING\",\n      \"ANALOG_MESSAGE\",\n      \"REPORT_DIGITAL\",\n      \"REPORT_ANALOG\",\n      \"INPUT_PULLUP\",\n      \"SET_PIN_MODE\",\n      \"INTERNAL2V56\",\n      \"SYSTEM_RESET\",\n      \"LED_BUILTIN\",\n      \"INTERNAL1V1\",\n      \"SYSEX_START\",\n      \"INTERNAL\",\n      \"EXTERNAL\",\n      \"DEFAULT\",\n      \"OUTPUT\",\n      \"INPUT\",\n      \"HIGH\",\n      \"LOW\"\n    ]\n  };\n\n  const ARDUINO = cPlusPlus(hljs);\n\n  const kws = /** @type {Record<string,any>} */ (ARDUINO.keywords);\n\n  kws.type = [ ...kws.type, ...ARDUINO_KW.type ];\n  kws.literal = [ ...kws.literal, ...ARDUINO_KW.literal ];\n  kws.built_in = [ ...kws.built_in, ...ARDUINO_KW.built_in ];\n  kws._hints = ARDUINO_KW._hints;\n\n  ARDUINO.name = 'Arduino';\n  ARDUINO.aliases = ['ino'];\n  ARDUINO.supersetOf = \"cpp\";\n\n  return ARDUINO;\n}\n\nmodule.exports = arduino;\n\n};"],
"names":["shadow$provide","global","require","module","exports","optional","re","concat","args","map","x","source","join","joined","arduino","hljs","C_LINE_COMMENT_MODE","COMMENT","contains","begin","FUNCTION_TYPE_RE","NAMESPACE_RE","TEMPLATE_ARGUMENT_RE","CPP_PRIMITIVE_TYPES","className","STRINGS","variants","end","illegal","BACKSLASH_ESCAPE","END_SAME_AS_BEGIN","NUMBERS","relevance","PREPROCESSOR","keywords","keyword","inherit","C_BLOCK_COMMENT_MODE","TITLE_MODE","IDENT_RE","FUNCTION_TITLE","CPP_KEYWORDS","type","RESERVED_TYPES","RESERVED_KEYWORDS","literal","LITERALS","built_in","BUILT_IN","_type_hints","TYPE_HINTS","FUNCTION_DISPATCH","_hint","FUNCTION_HINTS","EXPRESSION_CONTAINS","EXPRESSION_CONTEXT","beginKeywords","name","aliases","classNameAliases","FUNCTION_DECLARATION","returnBegin","excludeEnd","DECLTYPE_AUTO_RE","endsWithParent","match","kws","ARDUINO","_hints","supersetOf"]
}
