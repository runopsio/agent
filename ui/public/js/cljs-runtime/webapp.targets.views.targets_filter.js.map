{"version":3,"sources":["webapp/targets/views/targets_filter.cljs"],"mappings":";AAOA,2CAAA,3CAAMA;AAAN,AAEE,IAAMC,cAAY,sDAAA,mFAAA,zIAACC;IACbC,SAAO,AAAA,AAAIC;IACXC,oBAAkB,KAAKC,gBAAmBH;IAC1CI,kBAAgB,AAACC,mDAAQ,iBAAAC,qBAAA,iEAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBAk7EkB,AAAAmC,sBAAAxC;IAl7ElBM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,QAAA,AAAAK,eAAAN,gBAAAK,nCAAMU;AAAN,AAAA,AAAA,AAAAR,uBAAAJ,SAA2BY;;AAA3B,eAAA,CAAAV,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,uDAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,QAAA,AAAAS,gBAAAjB,pBAAMoB;AAAN,AAAA,OAAAF,iBAAA,AAAAH,uDAAA,AAAAI,eAAAnB,xEAA2BoB;;;AAA3B;;;;GAAA,KAAA;;AAAA,AAAA,OAAArB,mBAAQJ;;IACjC0B,iBAAe,AAACC,6CAAK,AAACC,uBAAY1B;IAClC2B,gBAAc,AAACC,gDAAO,iBAAAC,mBAAI,2DAAA,3DAACC,4CAAIN;AAAT,AAAA,oBAAAK;AAAAA;;AAAA;;;IACtBE,kBAAgB,AAACH,gDAAO,iBAAAC,mBAAI,2DAAA,3DAACC,4CAAIN;AAAT,AAAA,oBAAAK;AAAAA;;AAAA;;;AAN9B,AAOE;AAAA,AACE,IAAMI,gBAAcC;cAApB,mFAAA,OAAA,SAAA,7GACMC;IACAC,gBAAc,4CAAA,WAAAC,vDAACC;AAAD,AACE,oDAAA,mCAAA,2CAAA,sDAAAD,iBAAA,sDAAAA,xPAACZ;GACFU;AAJrB,AAAA,0FAAA,2DAAA,2CAAA,wDAAA,2BAAA,mHAAA,2CAAA,uEAAA,mEAAA,OAAA,qDAAA,cAAA,yDAAA,KAAA,4DAAA,AAAAH,+BAAA,xbAOEO,oIAAwBN,qSAIEN,8EACA,WAAKa;AAAL,AACE,AAACC,sBAAOd,cAAca;;AACtB,8BAAA,mFAAA,wEAAA,lLAACE,yLAAoCF;mBAdnE,mHAAA,2CAAA,uEAAA,4DAAA,AAAAR,iCAAA,mEAAA,cAAA,qDAAA,gBAAA,yDAAA,KAAA,ncAeEO,oIAAwBH,0FACEL,oSAIA,WAAKS;AAAL,AACE,AAACC,sBAAOV,gBAAgBS;;AACxB,8BAAA,mFAAA,wEAAA,lLAACE,gMAA2CF","names":["webapp.targets.views.targets-filter/main","all-targets","re_frame.core.subscribe","search","js/window","url-search-params","js/URLSearchParams","url-params-list","cljs.core.js__GT_clj","iter__4652__auto__","s__30755","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__30757","cljs.core/chunk-buffer","i__30756","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30754","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","q","url-params-map","cljs.core.into","cljs.core/sorted-map","selected-type","reagent.core.atom","or__4253__auto__","cljs.core.get","selected-review","cljs.core/deref","targets-types","webapp.targets.constants/targets-types-list","reviews","reviews-types","p1__30752#","cljs.core.map","webapp.components.combobox/main","v","cljs.core/reset!","re-frame.core/dispatch","cljs.core/chunk-first"],"sourcesContent":["(ns webapp.targets.views.targets-filter\n  (:require [re-frame.core :as rf]\n            [reagent.core :as r]\n            [webapp.subs :as subs]\n            [webapp.targets.constants :as constants]\n            [webapp.components.combobox :as combobox]))\n\n(defn main []\n  ;; TODO add a searchbox component using all-targets\n  (let [all-targets (rf/subscribe [::subs/all-targets])\n        search (.. js/window -location -search)\n        url-search-params (new js/URLSearchParams search)\n        url-params-list (js->clj (for [q url-search-params] q))\n        url-params-map (into (sorted-map) url-params-list)\n        selected-type (r/atom (or (get url-params-map \"type\") \"\"))\n        selected-review (r/atom (or (get url-params-map \"review_type\") \"\"))]\n    (fn []\n      (let [targets-types constants/targets-types-list\n            reviews [\"none\" \"anyone\" \"team\"]\n            reviews-types (map\n                           #(into {} {:value % :text %})\n                           reviews)]\n      [:section\n       {:class \"flex gap-regular\"}\n       [combobox/main {:options targets-types\n                       :placeholder \"Type\"\n                       :name \"target-type\"\n                       :clear? true\n                       :selected @selected-type\n                       :on-change (fn [v]\n                                    (reset! selected-type v)\n                                    (rf/dispatch [:filter-targets \"type\" v]))}]\n       [combobox/main {:options reviews-types\n                       :selected @selected-review\n                       :placeholder \"Review type\"\n                       :name \"target-review\"\n                       :clear? true\n                       :on-change (fn [v]\n                                    (reset! selected-review v)\n                                    (rf/dispatch [:filter-targets \"review_type\" v]))}]\n       ]))))\n"]}