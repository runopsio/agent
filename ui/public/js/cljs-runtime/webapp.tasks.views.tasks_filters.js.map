{"version":3,"sources":["webapp/tasks/views/tasks_filters.cljs"],"mappings":";AAWA,GAAA,QAAAA,mCAAAC,yCAAAC,+CAAAC,6DAAAC;AAAA;AAAA,AAAA,kDAAA,mFAAA,2CAAA,sDAAA,GAAA,sDAAA,cAAA,2CAAA,sDAAA,UAAA,sDAAA,kBAAA,2CAAA,sDAAA,iBAAA,sDAAA,yBAAA,2CAAA,sDAAA,WAAA,sDAAA,mBAAA,2CAAA,sDAAA,WAAA,sDAAA,mBAAA,2CAAA,sDAAA,QAAA,sDAAA,gBAAA,2CAAA,sDAAA,UAAA,sDAAA,kBAAA,2CAAA,sDAAA,UAAA,sDAAA,kBAAA,2CAAA,sDAAA,UAAA,sDAAA,jsDAASC;;AAWT,wCAAA,xCAAOC,wFAAMC;AAAb,AACE,IAAMC,OAAK,sDAAA,mFAAA,zIAACC;IACNC,QAAM,sDAAA,mFAAA,zIAACD;IACPE,kBAAgB,gDAAA,hDAACC;IACjBC,8BAA4B,gDAAA,hDAACD;IAC7BE,kBAAgB,WAAKC;AAAL,AACE,AAACC,sBAAOL,gBACA,4CAAA,WAAAM,vDAACC;AAAD,AACE,oDAAA,mCAAA,2CAAA,2JAAA,tRAACC,iLACa,AAAA,mFAAAF,wEACD,mJAAA,uJAAA,7PAAK,AAAA,mFAAAA,oEAAe,AAAA,mFAAAA;GAClCF;;AACT,yDAAA,lDAACC,sBAAOH;;IAC1BO,wBAAsB,WAAKC;AAAL,AACE,yGAAA,zGAACC,wIAAuCD;;AACxC,yDAAA,lDAACL,sBAAOH;;0BAdtC,tBAeMU;AAfN,AAe2B,sCAAA,2CAAA,uDAAA,MAAA,mDAAA,uCAAA,iFAAA,lTAACC,kSAEgCV,gFACAM;;IACtDb,QAAE,uBAAA,mFAAA,1GAACkB;AAnBT,AAoBE,kBAAKC;AAAL,AACE,IAAMO,gBAAc,4CAAA,WAAAC,vDAAChB;AAAD,AACE,oDAAA,mCAAA,2CAAA,6JAAA,xRAACC,iLAAgB,AAAA,qFAAAe,wEACD,4CAAK,AAAA,qFAAAA;GAFvB,AAAAP,gBAGEjB;IAChByB,eAAO,eAAA,WAAAC,1BAACC;AAAD,AAAO,oDAAA,QAAAD,rDAACE;GAAa,AAAA,uFAAA,AAAAX,gBAAUnB;IACtC+B,WAAS,wCAAA,oDAAI,iBAAAC,mBAAI,oDAAA,pDAACC,4CAAIf,pIACTgB,xCACAC;AAFA,AAAA,oBAAAH;AAAAA;;AAAA;;;IAGbI,aAAW,wCAAA,oDAAI,iBAAAJ,mBAAI,oDAAA,pDAACC,4CAAIf,pIACTgB,xCACAC;AAFA,AAAA,oBAAAH;AAAAA;;AAAA;;;IAGfK,0BAAqB,WAAKC;AAAL,AACE,OAACC,SAAY,4BAAA,IAAA,hCAACC,uBAAeF;;IACpDG,gBAAc,WAAKC,YAAYC,WAAWC,mBAAmBC;AAA/C,AACE,oBACE,iBAAAb,mBAAI,AAACc,4BAAcH;AAAnB,AAAA,GAAAX;AAAAA;;AAA+Ba;;;AAAwB,8BAAA,mFAAA,oEAAA,2CAAA,2FAAA,pTAAC5B,oOAAuC,0DAAA,bAAKyB,gDACH,0DAAA,bAAKA;;AAFxG,GAGE,AAACI,4BAAcJ;AAAa,8BAAA,mFAAA,oEAAA,2CAAA,yBAAA,lPAACzB,sOAAyCyB,uBAAuBA;;AAH/F,AAIQ,8BAAA,mFAAA,oEAAA,9KAACzB,8NAA4B2B,mBAAmB,0DAAA,bAAKF;;;;;AAlBnF,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,gDAAA,mFAAA,mDAAA,2CAAA,wDAAA,2BAsBI,gCAAA,AAAA,mHAAA,2CAAA,uEAAA,nPAAMf,iGACHqB,oIAAwBvB,0EACC,iBAAAO,mBAAI,oDAAA,pDAACC,4CAAIf;AAAT,AAAA,oBAAAc;AAAAA;;AAAA;;KAF5B,uDAAA,aAAA,yDAAA,KAAA,mEAAA,mBAAA,sEAAA,WAAA,+DAAA,WAAAe;AAAA,AAO8B,8BAAA,mFAAA,oEAAA,2CAAA,aAAAA,tOAAC9B;kGA7BnC,mHAAA,wCAAA,sEAAA,4DAAA,mEAAA,4DAAA,qDAAA,6DAAA,sEAAA,uDAAA,yDAAA,+DAAA,2DAAA,75BAsBI,qDAAA,oCAAA,yFASC+B,svBACyB,iBAAAhB,mBAAI,oDAAA,pDAACC,4CAAIf;AAAT,AAAA,oBAAAc;AAAAA;;AAAA;;KAhC9B,sBAoC8B;AAAA,AACE,AAACjB;;AACD,yDAAA,lDAACP,sBAAOH;GAtCxC,0KAAA,sBAAA,aAAA,AAAAc,iCAAA,WAAAC,5BA+B8BjB,zMAIA,6CAAA,AAAAgB,6CAAA,1FAACW,6DAAGzB;AAnClC,AA0CgC,8BAAA,mFAAA,oEAAA,2CAAA,SAAAe,lOAACH;GA1CjC,uBAAA,mFAAA,mDAAA,2CAAA,wDAAA,mDAAA,kHAAA,2CAAA,uDAAA,YAAA,+DAAA,WAAAI,vNA6CK4B;AA7CL,AA+CkB,8BAAA,mFAAA,oEAAA,2CAAA,zNAAChC,gOAAmC,AAAA,AAAAI;GA/CtD,4DAgDgB,iBAAAW,mBAAI,oDAAA,pDAACC,4CAAIf;AAAT,AAAA,oBAAAc;AAAAA;;AAAA;;KAhDhB,8dAAA,kHAAA,2CAAA,uDAAA,SAAA,+DAAA,WAAAV,5sBAiDe,AAACX,6CAAK,+CAAA,mFAAA,2CAAA,sDAAA,GAAA,sDAAA,5RAACuC,kTAEAC,yJACjBF;AApDL,AAsDkB,8BAAA,mFAAA,oEAAA,2CAAA,zNAAChC,kOAAqC,AAAA,AAAAK;GAtDxD,4DAuDgB,iBAAAU,mBAAI,oDAAA,pDAACC,4CAAIf;AAAT,AAAA,oBAAAc;AAAAA;;AAAA;;KAvDhB,iIAAA,mFAAA,mDAAA,2CAAA,wDAAA,mDAAA,iHAAA,2CAAA,uDAAA,aAAA,qDAAA,OAAA,kDAAA,6DAAA,qDAAA,6DAAA,iEAAA,+DAAA,WAAAT,5+BAwDe1B,ubAGVuD,geAIoBhB;AA/DzB,AAgE8B,4DAAA,rDAACK,cACA,AAAA,AAAAlB,8BACAQ,sBAEA,CAAI,AAACM,wBAAqBN,aAAU,AAACM,wBAAqB,AAAA,AAAAd;mBApEzF,iHAAA,2CAAA,uDAAA,WAAA,qDAAA,OAAA,kDAAA,6DAAA,qDAAA,6DAAA,+DAAA,+DAAA,WAAAC,jjBAsEK4B,8dAIoBrB;AA1EzB,AA2E8B,8DAAA,vDAACU,cACA,AAAA,AAAAjB,8BACAY,sBAEA,CAAI,AAACC,wBAAqB,AAAA,AAAAb,kCAAyB,AAACa,wBAAqBD;;;;AAE9G,iDAAA,jDAAMiB,0GAAetD;AAArB,AACE,kBAAKmB;AAAL,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,2CAAA,mFAEIpB,sCAAKoB","names":["js/webapp","js/webapp.tasks","js/webapp.tasks.views","js/webapp.tasks.views.tasks-filters","js/webapp.tasks.views.tasks-filters.status-options","webapp.tasks.views.tasks-filters/status-options","webapp.tasks.views.tasks-filters/form","_","user","re_frame.core.subscribe","users","all-connections","reagent.core.atom","connections-combobox-status","set-connections","connections","cljs.core/reset!","p1__30293#","cljs.core.map","cljs.core.into","set-connections-error","e","cljs.core.println","get-all-connections","webapp.http.runops-api/request","re-frame.core/dispatch","filters","cljs.core/deref","p1__30303#","p1__30304#","p1__30305#","p1__30306#","p1__30307#","users-options","p1__30296#","admin?","p1__30299#","cljs.core/some","cljs.core._EQ_","end-date","or__4253__auto__","cljs.core.get","webapp.formatters/convert-query-params->datetime","webapp.formatters/remove-time-from-date","start-date","convert-date->number","date","js/parseInt","clojure.string/replace","dispatch-date","filter-date","other-date","filter-date-string","condition-bigger-than?","clojure.string/blank?","p1__30302#","webapp.components.combobox/main","webapp.components.forms/select","cljs.core.concat","webapp.connections.constants/connections-types-list","webapp.components.forms/input","webapp.tasks.views.tasks-filters/tasks-filters"],"sourcesContent":["(ns webapp.tasks.views.tasks-filters\n  (:require [clojure.string :as string]\n            [reagent.core :as r]\n            [re-frame.core :as rf]\n            [webapp.http.runops-api :as runops-api]\n            [webapp.components.combobox :as combobox]\n            [webapp.components.forms :as forms]\n            [webapp.connections.constants :as connections-constants]\n            [webapp.formatters :as formatters]\n            [webapp.subs :as subs]))\n\n(defonce status-options\n  [{:value \"\" :text \"All\"}\n   {:value \"created\" :text \"created\"}\n   {:value \"pending-review\" :text \"pending-review\"}\n   {:value \"approved\" :text \"approved\"}\n   {:value \"rejected\" :text \"rejected\"}\n   {:value \"ready\" :text \"ready\"}\n   {:value \"running\" :text \"running\"}\n   {:value \"success\" :text \"success\"}\n   {:value \"failure\" :text \"failure\"}])\n\n(defn- form [_]\n  (let [user (rf/subscribe [:user])\n        users (rf/subscribe [:users])\n        all-connections (r/atom nil)\n        connections-combobox-status (r/atom nil)\n        set-connections (fn [connections]\n                          (reset! all-connections\n                                  (map\n                                   #(into {}\n                                          {:value (:name %)\n                                           :text (str (:name %) \" (\" (:type %) \")\")})\n                                   connections))\n                          (reset! connections-combobox-status nil))\n        set-connections-error (fn [e]\n                                (println \"couldn't get all connections\" e)\n                                (reset! connections-combobox-status nil))\n        get-all-connections #(runops-api/request {:method \"GET\"\n                                                  :uri \"/v1/targets?limit=2000&status=active\"\n                                                  :on-success set-connections\n                                                  :on-failure set-connections-error})\n        _ (rf/dispatch [:settings->get-users])]\n    (fn [filters]\n      (let [users-options (map\n                           #(into {} {:value (:email %)\n                                      :text (str (:email %))})\n                           @users)\n            admin? (some #(= \"admin\" %) (:groups @user))\n            end-date (-> (or (get filters \"end-date\") \"\")\n                         formatters/convert-query-params->datetime\n                         formatters/remove-time-from-date)\n            start-date (-> (or (get filters \"start-date\") \"\")\n                           formatters/convert-query-params->datetime\n                           formatters/remove-time-from-date)\n            convert-date->number (fn [date]\n                                   (js/parseInt (string/replace date \"-\" \"\")))\n            dispatch-date (fn [filter-date other-date filter-date-string condition-bigger-than?]\n                            (cond\n                              (or (string/blank? other-date) condition-bigger-than?) (rf/dispatch [:filter-tasks {\"end-date\" (str filter-date \" 23:59:59\")\n                                                                                                                  \"start-date\" (str filter-date \" 00:00:00\")}])\n                              (string/blank? filter-date) (rf/dispatch [:filter-tasks {\"start-date\" filter-date \"end-date\" filter-date}])\n                              :else (rf/dispatch [:filter-tasks {filter-date-string (str filter-date \" 00:00:00\")}])))]\n\n        [:div {:class \"flex flex-col sm:flex-row gap-regular\"}\n         [:div {:class \"flex gap-regular\"}\n          (when admin?\n            [combobox/main {:options users-options\n                            :selected (or (get filters \"user-email\") \"\")\n                            :label \"User email\"\n                            :clear? true\n                            :placeholder \"user@company.com\"\n                            :list-classes \"min-w-64\"\n                            :on-change #(rf/dispatch [:filter-tasks {\"user-email\" %}])\n                            :name \"select-user-email\"}])\n          [combobox/main {:options @all-connections\n                          :selected (or (get filters \"target\") \"\")\n                          :label \"Connection\"\n                          :clear? true\n                          :loading? (= @connections-combobox-status :loading)\n                          :on-focus (fn []\n                                      (get-all-connections)\n                                      (reset! connections-combobox-status :loading))\n                          :default-value \"Select a connection\"\n                          :placeholder \"Select a connection\"\n                          :list-classes \"min-w-64\"\n                          :on-change #(rf/dispatch [:filter-tasks {\"target\" %}])\n                          :name \"select-connection\"}]]\n         [:div {:class \"flex flex-grow gap-regular items-stretch\"}\n          [forms/select\n           {:label \"Task type\"\n            :on-change #(rf/dispatch [:filter-tasks {\"type\" (-> % .-target .-value)}])\n            :selected (or (get filters \"type\") \"\")\n            :options (into (concat\n                            [{:value \"\" :text \"All\"}]\n                            connections-constants/connections-types-list))}]\n          [forms/select\n           {:label \"Status\"\n            :on-change #(rf/dispatch [:filter-tasks {\"status\" (-> % .-target .-value)}])\n            :selected (or (get filters \"status\") \"\")\n            :options status-options}]]\n\n         [:div {:class \"flex flex-grow gap-regular items-scretch\"}\n          [forms/input {:label \"Start date\"\n                        :type \"date\"\n                        :id :end-date\n                        :name :end-date\n                        :value start-date\n                        :on-change #(dispatch-date\n                                     (-> % .-target .-value)\n                                     end-date\n                                     \"start-date\"\n                                     (<= (convert-date->number end-date) (convert-date->number (-> % .-target .-value))))}]\n\n          [forms/input {:label \"End date\"\n                        :type \"date\"\n                        :id :end-date\n                        :name :end-date\n                        :value end-date\n                        :on-change #(dispatch-date\n                                     (-> % .-target .-value)\n                                     start-date\n                                     \"end-date\"\n                                     (<= (convert-date->number (-> % .-target .-value)) (convert-date->number start-date)))}]]]))))\n\n(defn tasks-filters [_]\n  (fn [filters]\n    [:div {:class \"w-full relative flex gap-regular\"}\n     [form filters]]))\n"]}