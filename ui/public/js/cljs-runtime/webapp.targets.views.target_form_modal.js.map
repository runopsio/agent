{"version":3,"sources":["webapp/targets/views/target_form_modal.cljs"],"mappings":"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","names":["webapp.targets.views.target-form-modal/section","head","text","child","webapp.components.divider/main","webapp.components.headings/h3","js/webapp","js/webapp.targets","js/webapp.targets.views","js/webapp.targets.views.target-form-modal","js/webapp.targets.views.target-form-modal.header-text","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__30777","cljs.core/MultiFn","cljs.core.symbol","webapp.targets.views.target-form-modal/header-text","cljs.core/identity","_","js/webapp.targets.views.target-form-modal.action-button","fexpr__30779","webapp.targets.views.target-form-modal/action-button","js/webapp.targets.views.target-form-modal.dispatch-form","fexpr__30781","webapp.targets.views.target-form-modal/dispatch-form","form-fields","re-frame.core/dispatch","webapp.targets.views.target-form-modal/get-config-keys","key","webapp.targets.constants/target-configs-required","webapp.targets.views.target-form-modal/add-new-configs","config-map","config-key","config-value","cljs.core/empty?","cljs.core.swap_BANG_","cljs.core/conj","p__30784","map__30785","cljs.core/--destructure-map","webapp.targets.views.target-form-modal/config->inputs","value","index","config","key-val","reagent.core.atom","value-val","save","k","v","cljs.core/assoc-in","p1__30782#","cljs.core/deref","p1__30783#","webapp.components.forms/input","cljs.core/reset!","webapp.targets.views.target-form-modal/config-inputs-for","cljs.core.doall","iter__4652__auto__","s__30787","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__30789","cljs.core/chunk-buffer","i__30788","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30786","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.range","webapp.targets.views.target-form-modal/config->json-stringify","configs","cljs.core.filter","p__30792","map__30793","clojure.string/blank?","cljs.core.map","p__30790","map__30791","cljs.core.reduce","cljs.core/into","cljs.core/clj->js","js/JSON","webapp.targets.views.target-form-modal/json-stringify->config","cljs.core.js__GT_clj","cljs.core.mapv","p__30794","vec__30795","cljs.core.nth","webapp.targets.views.target-form-modal/form","target","groups-flag","re_frame.core.subscribe","name","or__4253__auto__","target-type","tags","secret-provider","secret-path","secrets-host","roles","webapp.formatters/list-to-comma-string","change-target-type","cljs.core.keyword","agent-token","form-type","webapp.http.runops-api/request","res","webapp.components.headings/h2","e","roles-list","webapp.formatters/comma-string-to-list","configurations","cljs.core.conj","cljs.core.merge","G__30800","js/Error","cljs.core/not","p1__30798#","p1__30799#","webapp.formatters/replace-empty-space->dash","cljs.core._EQ_","webapp.components.forms/select","webapp.targets.constants/targets-types-list","webapp.targets.views.secrets-management/main","webapp.components.button/secondary","webapp.components.button/primary","cljs.core/chunk-first"],"sourcesContent":["(ns webapp.targets.views.target-form-modal\n  (:require [clojure.string :as cs]\n            [re-frame.core :as rf]\n            [reagent.core :as r]\n            [webapp.components.button :as button]\n            [webapp.components.divider :as divider]\n            [webapp.components.forms :as forms]\n            [webapp.components.headings :as h]\n            [webapp.formatters :as f]\n            [webapp.http.runops-api :as runops-api]\n            [webapp.subs :as subs]\n            [webapp.targets.constants :as constants]\n            [webapp.targets.events :as events]\n            [webapp.targets.views.secrets-management :as secrets-management]))\n\n(defn section [head text child]\n  [:section\n   (divider/main)\n   [h/h3 head {:class \"text-gray-800\"}]\n   [:small.block.mb-regular.text-gray-600 text]\n   child])\n\n(defmulti header-text identity)\n(defmethod header-text :update [_] \"Update target\")\n(defmethod header-text :default [_] \"Create a new Target\")\n\n(defmulti action-button identity)\n(defmethod action-button :update [_] \"Update\")\n(defmethod action-button :default [_] \"Create\")\n\n(defmulti dispatch-form identity)\n(defmethod dispatch-form :update\n  [_ form-fields]\n  (rf/dispatch [::events/update-target form-fields]))\n(defmethod dispatch-form :create\n  [_ form-fields]\n  (rf/dispatch [::events/create-target form-fields]))\n\n(defn get-config-keys\n  [key]\n  (get constants/target-configs-required key))\n\n(defn add-new-configs\n  [config-map config-key config-value]\n\n  (if-not (or (empty? config-key) (empty? config-value))\n    (swap! config-map conj {:key config-key :value config-value})\n    nil))\n\n(defn config->inputs\n  [{:keys [key value]} index config]\n  (let [key-val (r/atom key)\n        value-val (r/atom value)\n        save (fn [k v] (swap! config assoc-in [index k] v))]\n    (fn []\n      [:<>\n       [forms/input {:classes \"whitespace-pre overflow-x\"\n                     :on-change #(reset! key-val (-> % .-target .-value))\n                     :on-blur #(save :key @key-val)\n                     :value @key-val}]\n       [forms/input {:classes \"whitespace-pre overflow-x\"\n                     :on-change #(reset! value-val (-> % .-target .-value))\n                     :on-blur #(save :value @value-val)\n                     :value @value-val}]])))\n\n(defn config-inputs-for\n  [config]\n  (fn []\n    (doall\n     (for [index (range (count @config))]\n       ^{:key (get @config index)} [config->inputs (get @config index) index config]))))\n\n(defn config->json-stringify\n  [configs]\n  (->> configs\n       (filter (fn [{:keys [key value]}]\n                 (not (or (cs/blank? key) (cs/blank? value)))))\n       (map (fn [{:keys [key value]}] {key value}))\n       (reduce into {})\n       (clj->js)\n       (.stringify js/JSON)))\n\n(defn json-stringify->config\n  [configs]\n  (if (or (cs/blank? configs) (nil? configs))\n    {}\n    (->> configs\n         (.parse js/JSON)\n         (js->clj)\n         (mapv (fn [[key value]] {:key key :value value})))))\n\n(defn form\n  \"Receives two arguments.\n  target -> the target to updated. You can send it as nil when form-type is :create\n  form-type -> :update or :create; when :update, it's required to send target\"\n  [target _]\n  (let [groups-flag (get @(rf/subscribe [::subs/feature-flags]) :groups-flag)\n        name (r/atom (or (:name target) \"\"))\n        target-type (r/atom (or (:type target) \"mysql\"))\n        tags (r/atom (or (:tags target) \"\"))\n        secret-provider (r/atom (or (:secret_provider target) \"env-var\"))\n        secret-path (r/atom (or (:secret_path target) \"ENV_CONFIG\"))\n        config (r/atom (if (empty? (:config target)) (get-config-keys :mysql) (json-stringify->config (:config target))))\n        config-key (r/atom (or (:config-key target) \"\"))\n        config-value (r/atom (or (:config-value target) \"\"))\n        secrets-host (r/atom \"runops\")\n        roles (r/atom (or (f/list-to-comma-string (or (:roles target) (:groups target))) \"\"))\n        change-target-type (fn [value]\n                             (reset! target-type value)\n                             (reset! config (get-config-keys (keyword value))))\n        agent-token (r/atom \"\")]\n    (fn [_ form-type]\n      (runops-api/request {:method \"GET\"\n                           :uri \"/v1/orgs\"\n                           :on-failure (fn [_]\n                                         (reset! agent-token \"\"))\n                           :on-success (fn [res]\n                                         (reset! agent-token (:agents_token res)))})\n      [:div\n       [h/h2 (header-text form-type) {:class \"mb-4 col-span-2\"}]\n       [:form.mb-regular\n        {:on-submit (fn [e]\n                      (.preventDefault e)\n                      (let [roles-list (f/comma-string-to-list @roles)\n                            configurations (conj @config {:key @config-key :value @config-value})]\n                        (dispatch-form form-type\n                                       (merge {:name @name\n                                               :type @target-type\n                                               :tags @tags}\n                                              (case @secrets-host\n                                                \"runops\" {:secret_provider \"runops\"\n                                                          :config (config->json-stringify configurations)}\n                                                \"self\" {:secret_provider @secret-provider\n                                                        :secret_path @secret-path\n                                                        :config nil})\n                                              (when groups-flag {:groups (if (empty? roles-list)\n                                                                           nil\n                                                                           roles-list)})\n                                              (when (not groups-flag) {:roles (if (empty? roles-list)\n                                                                                nil\n                                                                                roles-list)})))))}\n        (section\n         \"Target information\"\n         \"\"\n         [:div\n          [:div.grid.grid-cols-2.gap-regular\n           [forms/input {:label \"Name\"\n                         :on-change #(reset! name (f/replace-empty-space->dash (-> % .-target .-value)))\n                         :placeholder \"Target name\"\n                         :required true\n                         :disabled (= form-type :update)\n                         :value @name}]\n\n           [forms/select {:label \"Target type\"\n                          :on-change #(change-target-type (-> % .-target .-value))\n                          :selected @target-type\n                          :options constants/targets-types-list}]]])\n\n        (section\n         \"Secrets management\"\n         \"Choose your host and set your secret's configurations\"\n         [secrets-management/main\n          {:on-change->secrets-host-ui (fn [value] (reset! secrets-host value))\n           :on-change->secret-provider (fn [value] (reset! secret-provider value))\n           :on-change->secret-path (fn [value] (reset! secret-path value))\n           :on-change->config-key (fn [value] (reset! config-key value))\n           :on-change->config-value (fn [value] (reset! config-value value))\n           :on-click->add-more #(do\n                                  (add-new-configs config @config-key @config-value)\n                                  (reset! config-value \"\")\n                                  (reset! config-key \"\"))\n           :secrets-host-ui @secrets-host\n           :secret-provider @secret-provider\n           :secret-provider-disabled? true\n           :secret-path @secret-path\n           :secret-path-disabled? true\n           :config-key @config-key\n           :config-value @config-value\n           :configs @config\n           :component->config-inputs (config-inputs-for config)\n           :agent-token @agent-token}])\n\n        [:div.grid.justify-end.my-regular\n         [:a.text-blue-500.text-sm\n          {:href \"/targets/new\"\n           :on-click #(rf/dispatch [:close-modal])}\n          \"Advanced configurations \u2192\"]]\n\n        [:div.grid.grid-cols-2.gap-regular\n         (button/secondary {:text \"Cancel\"\n                            :on-click #(rf/dispatch [:close-modal])})\n         (button/primary {:text (action-button form-type)\n                          :type \"submit\"})]]])))\n"]}