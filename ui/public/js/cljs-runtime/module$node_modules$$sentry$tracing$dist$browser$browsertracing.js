shadow$provide.module$node_modules$$sentry$tracing$dist$browser$browsertracing=function(global,require,module,exports){function getHeaderContext(){var header=getMetaContent("sentry-trace");if(header)return utils_2.extractTraceparentData(header)}function getMetaContent(metaName){return(metaName=utils_1.getGlobalObject().document.querySelector("meta[name\x3d"+metaName+"]"))?metaName.getAttribute("content"):null}Object.defineProperty(exports,"__esModule",{value:!0});var tslib_1=require("module$node_modules$tslib$tslib"),
utils_1=require("module$node_modules$$sentry$utils$dist$index"),hubextensions_1=require("module$node_modules$$sentry$tracing$dist$hubextensions");global=require("module$node_modules$$sentry$tracing$dist$idletransaction");var spanstatus_1=require("module$node_modules$$sentry$tracing$dist$spanstatus"),utils_2=require("module$node_modules$$sentry$tracing$dist$utils"),backgroundtab_1=require("module$node_modules$$sentry$tracing$dist$browser$backgroundtab"),metrics_1=require("module$node_modules$$sentry$tracing$dist$browser$metrics"),
request_1=require("module$node_modules$$sentry$tracing$dist$browser$request");require=require("module$node_modules$$sentry$tracing$dist$browser$router");exports.DEFAULT_MAX_TRANSACTION_DURATION_SECONDS=600;var DEFAULT_BROWSER_TRACING_OPTIONS=tslib_1.__assign({idleTimeout:global.DEFAULT_IDLE_TIMEOUT,markBackgroundTransactions:!0,maxTransactionDuration:exports.DEFAULT_MAX_TRANSACTION_DURATION_SECONDS,routingInstrumentation:require.instrumentRoutingWithDefaults,startTransactionOnLocationChange:!0,startTransactionOnPageLoad:!0},
request_1.defaultRequestInstrumentationOptions);require=function(){function BrowserTracing(_options){this.name=BrowserTracing.id;this._emitOptionsWarning=!1;this._configuredIdleTimeout=void 0;var tracingOrigins=request_1.defaultRequestInstrumentationOptions.tracingOrigins;_options&&(this._configuredIdleTimeout=_options.idleTimeout,_options.tracingOrigins&&Array.isArray(_options.tracingOrigins)&&0!==_options.tracingOrigins.length?tracingOrigins=_options.tracingOrigins:this._emitOptionsWarning=!0);
this.options=tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({},DEFAULT_BROWSER_TRACING_OPTIONS),_options),{tracingOrigins});_options=this.options._metricOptions;this._metrics=new metrics_1.MetricsInstrumentation(_options&&_options._reportAllChanges)}BrowserTracing.prototype.setupOnce=function(_,getCurrentHub){var _this=this;this._getCurrentHub=getCurrentHub;this._emitOptionsWarning&&(utils_1.logger.warn("[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace."),
utils_1.logger.warn("[Tracing] We added a reasonable default for you: "+request_1.defaultRequestInstrumentationOptions.tracingOrigins));_=this.options;getCurrentHub=_.routingInstrumentation;var markBackgroundTransactions=_.markBackgroundTransactions,traceFetch=_.traceFetch,traceXHR=_.traceXHR,tracingOrigins=_.tracingOrigins,shouldCreateSpanForRequest=_.shouldCreateSpanForRequest;getCurrentHub(function(context){return _this._createRouteTransaction(context)},_.startTransactionOnPageLoad,_.startTransactionOnLocationChange);
markBackgroundTransactions&&backgroundtab_1.registerBackgroundTabDetection();request_1.instrumentOutgoingRequests({traceFetch,traceXHR,tracingOrigins,shouldCreateSpanForRequest})};BrowserTracing.prototype._createRouteTransaction=function(context){var _this=this;if(this._getCurrentHub){var _a=this.options,beforeNavigate=_a.beforeNavigate,idleTimeout=_a.idleTimeout,maxTransactionDuration=_a.maxTransactionDuration;_a="pageload"===context.op?getHeaderContext():void 0;context=tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({},
context),_a),{trimEnd:!0});beforeNavigate="function"===typeof beforeNavigate?beforeNavigate(context):context;beforeNavigate=void 0===beforeNavigate?tslib_1.__assign(tslib_1.__assign({},context),{sampled:!1}):beforeNavigate;!1===beforeNavigate.sampled&&utils_1.logger.log("[Tracing] Will not send "+beforeNavigate.op+" transaction because of beforeNavigate.");utils_1.logger.log("[Tracing] Starting "+beforeNavigate.op+" transaction on scope");context=this._getCurrentHub();_a=utils_1.getGlobalObject().location;
idleTimeout=hubextensions_1.startIdleTransaction(context,beforeNavigate,idleTimeout,!0,{location:_a});idleTimeout.registerBeforeFinishCallback(function(transaction,endTimestamp){_this._metrics.addPerformanceEntries(transaction);var maxDuration=utils_2.secToMs(maxTransactionDuration),diff=endTimestamp-transaction.startTimestamp;endTimestamp&&(diff>maxDuration||0>diff)&&(transaction.setStatus(spanstatus_1.SpanStatus.DeadlineExceeded),transaction.setTag("maxTransactionDurationExceeded","true"))});idleTimeout.setTag("idleTimeout",
this._configuredIdleTimeout);return idleTimeout}utils_1.logger.warn("[Tracing] Did not create "+context.op+" transaction because _getCurrentHub is invalid.")};BrowserTracing.id="BrowserTracing";return BrowserTracing}();exports.BrowserTracing=require;exports.getHeaderContext=getHeaderContext;exports.getMetaContent=getMetaContent}
//# sourceMappingURL=module$node_modules$$sentry$tracing$dist$browser$browsertracing.js.map
