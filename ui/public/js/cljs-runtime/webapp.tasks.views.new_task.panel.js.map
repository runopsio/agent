{"version":3,"sources":["webapp/tasks/views/new_task/panel.cljs"],"mappings":"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","names":["webapp.tasks.views.new-task.panel/get-code-from-localstorage","item","js/localStorage","object","cljs.core.js__GT_clj","js/JSON","or__4253__auto__","cljs.core.get","webapp.tasks.views.new-task.panel/timer","reagent.core.atom","webapp.tasks.views.new-task.panel/task-description","webapp.tasks.views.new-task.panel/task-type","webapp.tasks.views.new-task.panel/code-saved-status","webapp.tasks.views.new-task.panel/language-parser-map","js/module$node_modules$$codemirror$lang_sql$dist$index_cjs.sql","js/module$node_modules$$codemirror$lang_javascript$dist$index_cjs.javascript","js/module$node_modules$$codemirror$lang_python$dist$index_cjs.python","js/module$node_modules$$codemirror$stream_parser$dist$index_cjs.StreamLanguage","js/module$node_modules$$codemirror$legacy_modes$mode$shell.shell","js/module$node_modules$$codemirror$legacy_modes$mode$ruby.ruby","js/module$node_modules$$codemirror$legacy_modes$mode$clojure.clojure","webapp.tasks.views.new-task.panel/type-language-map","webapp.tasks.views.new-task.panel/manage-language-switch","value","view","language-compartment","selected-language","language-default","cljs.core/reset!","cljs.core/clj->js","webapp.tasks.views.new-task.panel/save-to-localstorage","code-string","code-tmp-db","js/Date","code-tmp-db-json","webapp.tasks.views.new-task.panel/auto-save","view-update","script","cljs.core/deref","js/clearTimeout","js/setTimeout","webapp.tasks.views.new-task.panel/set-type-from-connection","selected-connection-name","success","target","cljs.core.not_EQ_","cljs.core/seq","re-frame.core/dispatch","webapp.http.runops-api/request","cljs.core.println","webapp.tasks.views.new-task.panel/submit-task","e","selected-connection","re_frame.core.subscribe","cljs.core._EQ_","_","webapp.tasks.views.new-task.panel/task-advanced-fields","editor-view","all-connections","connections-combobox-status","set-connections","connections","p1__30353#","cljs.core.map","cljs.core.into","set-connections-error","get-all-connections","p1__30354#","p1__30356#","p1__30357#","p1__30359#","webapp.components.headings/h2","webapp.components.divider/main","webapp.components.headings/h3","webapp.components.combobox/main","webapp.components.forms/select","cljs.core/not","webapp.connections.constants/connections-types-list","webapp.components.forms/textarea","webapp.components.button/secondary","webapp.components.button/primary","webapp.tasks.views.new-task.panel/advanced-task-creation","webapp.tasks.views.new-task.panel/keymap-mod-enter","js/webapp","js/webapp.tasks","js/webapp.tasks.views","js/webapp.tasks.views.new-task","js/webapp.tasks.views.new-task.panel","js/webapp.tasks.views.new-task.panel.saved-status-el","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","fexpr__30362","cljs.core/MultiFn","cljs.core.symbol","webapp.tasks.views.new-task.panel/saved-status-el","cljs.core/identity","webapp.tasks.views.new-task.panel/change-language-select","editor-language","switch-language-fn","p1__30366#","languages","cljs.core/empty?","webapp.components.icon/regular","G__30367","G__30368","iter__4652__auto__","s__30371","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__30373","cljs.core/chunk-buffer","i__30372","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30370","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","option","webapp.tasks.views.new-task.panel/editor-footer","p1__30374#","is-mac?","js/navigator","webapp.tasks.views.new-task.panel/logs-area","new-task","task-logs","webapp.tasks.views.tasks-logs-container/main","webapp.tasks.views.new-task.panel/editor","p1__30375#","theme","js/module$node_modules$$codemirror$basic_setup$dist$index_cjs.EditorView","js/module$node_modules$$codemirror$state$dist$index_cjs.Compartment","res","keymap","extensions","js/module$node_modules$$codemirror$view$dist$index_cjs.keymap","js/module$node_modules$$codemirror$basic_setup$dist$index_cjs.basicSetup","p1__30376#","codemirror-editor","webapp.components.codemirror-editor/editor","js/module$node_modules$$codemirror$state$dist$index_cjs.EditorState","cljs.core.concat","editor-comp","switch-editor-language","parser","js/window","type","lang","connections-options","p1__30377#","connection-type","show-tree?","supported-sql?","webapp.tasks.views.new-task.connection-information-tree/main","webapp.tasks.views.new-task.panel/select-connection-modal","connections-search-status","searched-connections","p1__30378#","webapp.components.searchbox/main","clicked","s__30380","b__30382","i__30381","iter__30379","connection","webapp.tasks.views.new-task.panel/main","p__30383","map__30384","cljs.core/--destructure-map","choose-connection?","webapp.tasks.views.new-task.tasks-list/main","cljs.core/chunk-first"],"sourcesContent":["(ns webapp.tasks.views.new-task.panel\n  (:require\n   [reagent.core :as r]\n   [re-frame.core :as rf]\n   [webapp.subs :as subs]\n   [\"@codemirror/basic-setup\" :as cm]\n   [\"@codemirror/state\" :as cm-state]\n   [\"@codemirror/view\" :as cm-view]\n   [\"@codemirror/lang-javascript\" :as cm-js]\n   [\"@codemirror/lang-sql\" :as cm-sql]\n   [\"@codemirror/lang-python\" :as cm-python]\n   [\"@codemirror/stream-parser\" :as cm-language]\n   [\"@codemirror/legacy-modes/mode/shell\" :as cm-shell]\n   [\"@codemirror/legacy-modes/mode/ruby\" :as cm-ruby]\n   [\"@codemirror/legacy-modes/mode/clojure\" :as cm-clojure]\n   [webapp.http.runops-api :as runops-api]\n   [webapp.tasks.events.new-task]\n   [webapp.components.codemirror-editor :as codemirror-editor]\n   [webapp.components.searchbox :as searchbox]\n   [webapp.components.combobox :as combobox]\n   [webapp.components.forms :as forms]\n   [webapp.components.button :as button]\n   [webapp.components.headings :as h]\n   [webapp.components.divider :as divider]\n   [webapp.components.icon :as icon]\n   [webapp.connections.constants :as connections-constants]\n   [webapp.tasks.views.new-task.tasks-list :as tasks-list]\n   [webapp.tasks.views.tasks-logs-container :as logs-container]\n   [webapp.tasks.views.new-task.connection-information-tree :as connection-information-tree]))\n\n(defn- get-code-from-localstorage []\n  (let [item (.getItem js/localStorage :code-tmp-db)\n        object (js->clj (.parse js/JSON item))]\n    (or (get object \"code\") \"\")))\n\n(def ^:private timer (r/atom nil))\n(def ^:private task-description (r/atom nil))\n(def ^:private task-type (r/atom \"\"))\n(def ^:private code-saved-status (r/atom :saved)) ; :edited | :saved\n\n(def ^:private language-parser-map\n  {\"SQL\" cm-sql/sql\n   \"JavaScript\" cm-js/javascript\n   \"Python\" cm-python/python\n   \"Shell\" #(.define cm-language/StreamLanguage cm-shell/shell)\n   \"Ruby\" #(.define cm-language/StreamLanguage cm-ruby/ruby)\n   \"Clojure\" #(.define cm-language/StreamLanguage cm-clojure/clojure)\n   \"\" #(.define cm-language/StreamLanguage cm-shell/shell)\n   nil #(.define cm-language/StreamLanguage cm-shell/shell)})\n\n(def ^:private type-language-map\n  {\"mysql\" {:language \"SQL\" :parser cm-sql/sql}\n   \"mysql-csv\" {:language \"SQL\" :parser cm-sql/sql}\n   \"postgres\" {:language \"SQL\" :parser cm-sql/sql}\n   \"postgres-csv\" {:language \"SQL\" :parser cm-sql/sql}\n   \"sql-server\" {:language \"SQL\" :parser cm-sql/sql}\n   \"node\" {:language \"JavaScript\" :parser cm-js/javascript}\n   \"mongodb\" {:language \"JavaScript\" :parser cm-js/javascript}\n   \"python\" {:language \"Python\" :parser cm-python/python}\n   \"bash\" {:language \"Shell\" :parser #(.define cm-language/StreamLanguage cm-shell/shell)}\n   \"rails\" {:language \"Shell\" :parser #(.define cm-language/StreamLanguage cm-shell/shell)}\n   \"rails-console\" {:language \"Shell\" :parser #(.define cm-language/StreamLanguage cm-shell/shell)}\n   \"rails-console-k8s\" {:language \"Shell\" :parser #(.define cm-language/StreamLanguage cm-shell/shell)}\n   \"rails-console-ecs\" {:language \"Shell\" :parser #(.define cm-language/StreamLanguage cm-shell/shell)}\n   \"k8s\" {:language \"Shell\" :parser #(.define cm-language/StreamLanguage cm-shell/shell)}\n   \"k8s-apply\" {:language \"Shell\" :parser #(.define cm-language/StreamLanguage cm-shell/shell)}\n   \"k8s-exec\" {:language \"Shell\" :parser #(.define cm-language/StreamLanguage cm-shell/shell)}\n   \"ecs-exec\" {:language \"Shell\" :parser #(.define cm-language/StreamLanguage cm-shell/shell)}\n   \"hashicorp-vault\" {:language \"Shell\" :parser #(.define cm-language/StreamLanguage cm-shell/shell)}\n   \"aws-ecs-exec\" {:language \"Shell\" :parser #(.define cm-language/StreamLanguage cm-shell/shell)}\n   nil {:language \"Shell\" :parser #(.define cm-language/StreamLanguage cm-shell/shell)}\n   \"\" {:language \"Shell\" :parser #(.define cm-language/StreamLanguage cm-shell/shell)}})\n\n(defn- manage-language-switch [value view language-compartment]\n  (let [selected-language (:parser (get type-language-map value))\n        language-default (get type-language-map \"\")]\n    (reset! task-type value)\n    (.dispatch\n     view (clj->js {:effects (.reconfigure\n                              language-compartment\n                              (if (nil? selected-language)\n                                (language-default)\n                                (selected-language)))}))))\n\n(defn- save-to-localstorage [code-string]\n  (let [code-tmp-db {:date (.now js/Date)\n                     :code code-string}\n        code-tmp-db-json (.stringify js/JSON (clj->js code-tmp-db))]\n    (.setItem js/localStorage :code-tmp-db code-tmp-db-json)\n    (reset! code-saved-status :saved)))\n\n(defn- auto-save [^cm/EditorView.ViewUpdate view-update script]\n  (when (.-docChanged view-update)\n    (reset! code-saved-status :edited)\n    (let [code-string (.toString (.-doc (.-state (.-view view-update))))]\n      (when @timer (js/clearTimeout @timer))\n      (reset! timer (js/setTimeout #(save-to-localstorage code-string) 1000))\n      (reset! script code-string))))\n\n(defn- set-type-from-connection\n  [selected-connection-name view language-compartment]\n  (let [success (fn [target]\n                  (when (and (not= (:review_type target) \"none\") (seq target))\n                    (rf/dispatch [:show-snackbar\n                                  {:level :info\n                                   :text (str \"This connection requires review. \"\n                                              \"Your task won't run until it gets reviewed\")}]))\n                  (rf/dispatch [:new-task->get-connection selected-connection-name])\n                  (manage-language-switch (or (:type target) \"\") view language-compartment))]\n    (runops-api/request {:method \"GET\"\n                         :uri (str \"/v1/targets/\" selected-connection-name)\n                         :on-success success\n                         :on-failure #(println \"couldn't get connection\")})))\n\n(defn- submit-task [e script]\n  (when (.-preventDefault e) (.preventDefault e))\n  (let [selected-connection (rf/subscribe [:new-task->selected-connection])]\n    (if (= (:name selected-connection) \"\")\n      (rf/dispatch [:show-snackbar {:level :info\n                                    :text \"You must choose a connection\"}])\n      (let [_ (rf/dispatch [:create-new-task {:type @task-type\n                                              :description @task-description\n                                              :script @script}])\n            _ (rf/dispatch [:close-modal])\n            _ (rf/dispatch [:show-snackbar {:level :success\n                                            :text \"Task created!\"}])]))\n    true))\n\n(defn- task-advanced-fields [editor-view language-compartment script]\n  (let [all-connections (r/atom nil)\n        connections-combobox-status (r/atom nil)\n        set-connections (fn [connections]\n                          (reset! all-connections\n                                  (map\n                                   #(into {}\n                                          {:value (:name %)\n                                           :text (str (:name %) \" (\" (:type %) \")\")})\n                                   connections))\n                          (reset! connections-combobox-status nil))\n        set-connections-error (fn [e]\n                                (println \"couldn't get all connections\" e)\n                                (reset! connections-combobox-status nil))\n        get-all-connections #(runops-api/request {:method \"GET\"\n                                                  :uri \"/v1/targets?limit=2000&status=active\"\n                                                  :on-success set-connections\n                                                  :on-failure set-connections-error})\n        selected-connection (rf/subscribe [:new-task->selected-connection])]\n    (fn []\n      [:form\n       {:on-submit #(submit-task % script)}\n       [:div\n        [:header.mb-regular\n         [h/h2 \"Create your task\" {}]]\n        [divider/main]\n        [:div {:class \"mb-small\"}\n         [:header.mb-small\n          [h/h3 \"Connection name\" {:class \"mb-small\"}]\n          [:footer.text-xs.text-gray-500\n           \"Get the name for your connection\"]]\n         [combobox/main {:options @all-connections\n                         :selected (:name @selected-connection)\n                         :default-value \"Select a connection\"\n                         :placeholder \"Your-connection-name* (required)\"\n                         :loading? (= @connections-combobox-status :loading)\n                         :on-focus (fn []\n                                     (get-all-connections)\n                                     (reset! connections-combobox-status :loading))\n                         :on-change #(set-type-from-connection %\n                                                               editor-view\n                                                               language-compartment)\n                         :name \"select-connection\"}]]\n        [:div\n         [:header.mb-small\n          [h/h3 \"Task type\" {:class \"mb-small\"}]\n          [:footer.text-xs.text-gray-500\n           (if (:override_type @selected-connection)\n             \"Leave it blank for using the default for the connection or select a different one if your connection allows it\"\n             [:div {:class \"text-xs text-red-600\"}\n              \"It's not possible to override the type for this connection\"])]]\n         [forms/select {:on-change #(reset! task-type (-> % .-target .-value))\n                        :disabled (not (:override_type @selected-connection))\n                        :selected (or @task-type \"\")\n                        :options connections-constants/connections-types-list}]]\n        [:div\n         [:header.mb-small\n          [h/h3 \"Task description\" {:class \"mb-small\"}]\n          [:footer.text-xs.text-gray-500\n           \"Optional field for adding a description so your peers can get a better understanding of what you're doing\"]]\n         [forms/textarea\n          {:placeholder \"Add your description here\"\n           :on-change #(reset! task-description (-> % .-target .-value))\n           :autoFocus true\n           :value @task-description\n           :defaultValue \"\"}]]\n        [divider/main]\n        [:footer.grid.grid-cols-2.gap-small\n         [:div\n          [button/secondary {:text \"Cancel\"\n                             :on-click #(rf/dispatch [:close-modal])}]]\n         [:div\n          [button/primary {:text \"Create task\"\n                           :type \"submit\"\n                           :disabled (or (= (:name @selected-connection) nil)\n                                         (= (:name @selected-connection) \"\"))}]]]]])))\n\n(defn- advanced-task-creation [view language-compartment script]\n  (rf/dispatch [:open-modal [task-advanced-fields view language-compartment script]]))\n\n(defn- keymap-mod-enter [view language-compartment script]\n  (advanced-task-creation view language-compartment script)\n  true)\n\n(defmulti ^:private saved-status-el identity)\n(defmethod ^:private saved-status-el :saved [_]\n  [:div.flex.flex-row-reverse\n   [:div.flex.items-center\n    [:figure.w-5\n     [:img {:src \"/icons/icon-check-green.svg\"}]]\n    [:span.text-xs.text-gray-500 \"Saved!\"]]])\n(defmethod ^:private saved-status-el :edited [_]\n  [:div.flex.flex-row-reverse\n   [:div.flex.items-center.gap-small\n    [:figure.w-3\n     [:img {:src \"/icons/icon-loader-circle.svg\"\n            :class \"animate-spin\"}]]\n    [:span.text-xs.text-gray-500.italic\n     \"Edited\"]]])\n\n(defn- change-language-select []\n  (let [editor-language (rf/subscribe [:new-task->editor-language])]\n  (fn [selected-language switch-language-fn]\n    (let [languages [\"SQL\" \"JavaScript\" \"Python\"\n                     \"Shell\" \"Ruby\" \"Clojure\"]]\n      [:div {:class \"relative cursor-pointer\"}\n       [:label {:for \"change-language-select\"}\n        [:div\n         {:class (str \"flex items-center cursor-pointer \"\n                      \"text-gray-600 text-xs hover:underline \")}\n         [:span\n          (if (or (not selected-language)\n                  (empty? selected-language))\n            \"Loading editor...\"\n            @editor-language)]\n         [icon/regular {:icon-name \"cheveron-down\"}]]]\n       [:select\n        {:class \"absolute w-full inset-0 opacity-0 cursor-pointer\"\n         :on-change #(switch-language-fn (-> % .-target .-value) false)\n         :name \"change-language-select\"\n         :id \"change-language-select\"\n         :value (or @editor-language \"\")}\n        [:option {:value \"\"\n                  :disabled true\n                  :label \"Choose a syntax for the editor\"}]\n        (for [option languages]\n          ^{:key option}\n          [:option option])]]))))\n\n(defn- editor-footer []\n  (fn [editor-view language-compartment script selected-language switch-language-fn]\n    (let [is-mac? (>= (.indexOf (.toUpperCase (.-platform js/navigator)) \"MAC\") 0)]\n      [:footer {:class \"flex p-small\"}\n       [:div {:class \"flex-shrink\"}\n        [saved-status-el @code-saved-status]]\n       [:div\n        {:class \"flex gap-regular flex-grow justify-end\"}\n        [change-language-select selected-language switch-language-fn]\n        [:div\n         {:class (str \"flex items-center cursor-pointer \"\n                      \"text-gray-800 hover:underline \")\n          :on-click #(advanced-task-creation editor-view language-compartment script)}\n         [:figure {:class \"w-5\"}\n          [:img {:src \"/icons/icon-plus-dark-gray.svg\"}]]\n         [:span {:class \"text-xs\"}\n          (str \"Advanced fields \" (if is-mac?\n                                    \"(Shift+Cmd+Enter)\"\n                                    \"(Shift+Ctrl+Enter)\"))]]\n        [:div\n         {:class (str \"flex items-center cursor-pointer \"\n                      \"text-blue-700 hover:underline\")\n          :on-click #(submit-task % script)}\n         [:figure {:class \"w-5\"}\n          [:img {:src \"/icons/icon-play-blue.svg\"}]]\n         [:span {:class \"text-xs\"}\n          (str \"Create \" (if is-mac?\n                           \"(Cmd+Enter)\"\n                           \"(Ctrl+Enter)\"))]]]])))\n\n(defn- logs-area []\n  (let [new-task (rf/subscribe [::subs/new-task])]\n    (fn []\n      (let [task-logs (:task-logs @new-task)]\n        [:div {:class \"h-full px-small\"}\n         [logs-container/main\n          {:logs (:logs task-logs)\n           :log-status (:status task-logs)\n           :elapsed-time (-> @new-task :result :elapsed_time_ms)\n           :task-status (:status (:result @new-task))\n           :classes \"h-full\"\n           :fixed-height? true\n           :task-id (:id (:result @new-task))\n           :connection (:type (:result @new-task))} \"new-task-logs-container\"]]))))\n\n(defn- editor []\n  (let [theme (.theme cm/EditorView\n                      (clj->js {\"&\" {:fontSize \"15px\"\n                                     :height \"calc(60vh - 90px)\"\n                                     :background-color \"white\"}\n                                \".cm-gutters\" {:background-color \"white\"\n                                               :color \"rgb(107, 114, 128)\"}}))\n        script (r/atom (get-code-from-localstorage))\n        language-compartment (new cm-state/Compartment)\n        selected-connection (rf/subscribe [:new-task->selected-connection])\n        connections (r/atom nil)\n        connections-combobox-status (r/atom nil)\n        set-connections (fn [res]\n                          (reset! connections res)\n                          (reset! connections-combobox-status nil))\n        set-connections-error (fn [e]\n                                (println \"couldn't get all connections\" e)\n                                (reset! connections-combobox-status nil))\n        get-all-connections #(runops-api/request {:method \"GET\"\n                                                  :uri \"/v1/targets?limit=2000&status=active\"\n                                                  :on-success set-connections\n                                                  :on-failure set-connections-error})\n        keymap [{:key \"Shift-Mod-Enter\"\n                 :run #(keymap-mod-enter % language-compartment script)}\n                {:key \"Mod-Enter\"\n                 :run #(submit-task {} script)}]\n        selected-language (:parser (get type-language-map @task-type))\n        extensions [(.of cm-view/keymap (clj->js keymap))\n                    cm/basicSetup\n                    (.of (.-updateListener cm/EditorView) #(auto-save % script))\n                    theme]\n        codemirror-editor (codemirror-editor/editor\n                           {:state #(.create\n                                     cm-state/EditorState\n                                     (clj->js {:doc @script\n                                               :extensions (concat [(.of language-compartment (selected-language))]\n                                                                   extensions)}))})\n        editor-comp (:editor-component codemirror-editor)\n        editor-view (:editor-view codemirror-editor)\n        switch-editor-language (fn [value]\n                                 (let [parser (get language-parser-map value)\n                                       language-default (get language-parser-map \"\")]\n                                   (rf/dispatch [:new-task->set-editor-language value])\n                                   (.dispatch\n                                    (:current @editor-view)\n                                    (clj->js {:effects (.reconfigure\n                                                        language-compartment\n                                                        (if (nil? parser)\n                                                          (language-default)\n                                                          (parser)))}))))]\n    ;; we need to force this fixed time (which is much more than enough)\n    ;; to the editor build itself and we have @editor-view available\n    ;; not ideal, but we can do it right another time\n    (.setTimeout\n     js/window\n     (fn []\n       (let [type (:type @selected-connection)\n             lang (:language (get type-language-map type))]\n         (reset! task-type type)\n         (switch-editor-language lang)))\n     500)\n\n    (fn []\n      (let [connections-options (map\n                                 #(into {}\n                                        {:value (:name %)\n                                         :text (str (:name %) \" (\" (:type %) \")\")})\n                                 @connections)\n            connection-type (:type @selected-connection)\n            show-tree? (and\n                        (= (:review_type @selected-connection) \"none\")\n                        (or (= connection-type \"mysql\")\n                            (= connection-type \"mongodb\")\n                            (= connection-type \"postgres\")))\n            supported-sql? (or (= connection-type \"mysql\")\n                               (= connection-type \"mongodb\")\n                               (= connection-type \"postgres\"))]\n        [:div {:class \"grid grid-cols-7\"}\n         [:div\n          [:div {:class \"col-span-1 h-full\"}\n           [:div\n            {:class \"mb-regular px-small\"}\n            [:header\n             [combobox/main {:options connections-options\n                             :selected (:name @selected-connection)\n                             :placeholder \"Select a connection\"\n                             :list-classes \"min-w-64\"\n                             :size :small\n                             :on-change (fn [value]\n                                          (set-type-from-connection value\n                                                                    (:current @editor-view)\n                                                                    language-compartment)\n                                          (rf/dispatch\n                                           [:navigate :new-task-with-connection {} :connection-name value]))\n                             :loading? (= @connections-combobox-status :loading)\n                             :on-focus (fn []\n                                         (get-all-connections)\n                                         (reset! connections-combobox-status :loading))\n                             :on-blur #(reset! connections nil)\n                             :name \"select-connection\"}]]]\n           [:section\n            {:class \"px-small overflow-auto h-new-task__tree-container\"}\n            (when (and (not supported-sql?) (not show-tree?))\n              [:div\n               {:class \"text-xs px-small text-gray-500\"}\n               [:span\n                \"Displaying schemas are only supported on MySQL, Postgres and MongoDB\"]])\n            (when (and supported-sql? (not show-tree?))\n              [:div\n               {:class \"text-xs px-small text-gray-500\"}\n               [:span\n                \"Schema not available when the connection requires review.\"]])\n            (when show-tree?\n              [connection-information-tree/main @selected-connection])]]]\n         [:div\n          {:class (str \"flex flex-col justify-items-start col-span-6\"\n                       \" pl-small h-new-task__screen-container\")}\n          [:div {:class \"h-3/5\"}\n           [editor-comp]\n           [editor-footer editor-view language-compartment script\n            @task-type switch-editor-language]]\n          [:div {:class \"h-2/5\"}\n           [logs-area]]]]))))\n\n(defn- select-connection-modal []\n  (let [all-connections (r/atom nil)\n        connections-search-status (r/atom :loading)\n        searched-connections (r/atom nil)\n        set-connections (fn [connections]\n                          (reset! all-connections connections)\n                          (reset! connections-search-status nil))\n        set-connections-error (fn [e]\n                                (println \"couldn't get all connections\" e)\n                                (reset! connections-search-status nil))]\n    (runops-api/request {:method \"GET\"\n                         :uri \"/v1/targets?limit=2000&status=active\"\n                         :on-success set-connections\n                         :on-failure set-connections-error})\n    (fn []\n      [:div\n       [:header {:class \"mb-regular\"}\n        [h/h3 \"Choose a connection\"]]\n\n       [:div {:class \"mb-regular\"}\n        [searchbox/main {:options @all-connections\n                         :meta-display-keys [:type]\n                         :display-key :name\n                         :searchable-keys [:name :review_type :redact :type]\n                         :placeholder \"Type \\\"/\\\" to search and go to your connection\"\n                         :name \"connection-search\"\n                         :clear? true\n                         :on-change-results-cb #(reset! searched-connections %)\n                         :hide-results-list true\n                         :loading? (= @connections-search-status :loading)\n                         :selected \"\"\n                         ;; :on-focus (fn []\n                         ;;             (reset! connections-search-status :loading)\n                         ;;             (get-all-connections))\n                         :list-classes \"min-w-96\"\n                         :on-select-result (fn [clicked]\n                                             (rf/dispatch [:close-modal])\n                                             (rf/dispatch [:navigate\n                                                           :new-query-with-connection\n                                                           {}\n                                                           :connection-name (:name clicked)]))}]]\n       [:section\n        {:class \"h-96 overflow-auto relative\"}\n        (when (= @connections-search-status :loading)\n          [:div {:class \"flex items-center justify-center pt-large\"}\n           [:div {:class (str \"w-5 h-5 inset-y-4 right-10\"\n                             \" opacity-50 animate-spin origin-center\")}\n           [icon/regular {:size 5\n                          :icon-name \"loader-circle\"}]]])\n        (for [connection (or @searched-connections @all-connections)]\n          ^{:key (:name connection)}\n          [:div {:class (str \"px-small py-regular border-b border-gray-100 \"\n                             \"transition hover:bg-gray-50 bg-white \"\n                             \"cursor-pointer text-gray-800 text-sm\")\n                 :on-click (fn []\n                             (rf/dispatch [:close-modal])\n                             (rf/dispatch [:navigate\n                                           :new-query-with-connection\n                                           {}\n                                           :connection-name (:name connection)]))}\n           [:div\n            [:span\n             (:name connection)\n             [:small {:class \"text-gray-500\"}\n              [:i (str \" (\" (:type connection) \")\")]]]]])]])))\n\n(defn main []\n  (let [selected-connection (rf/subscribe [:new-task->selected-connection])]\n    (fn [{:keys [choose-connection?]}]\n      (when choose-connection?\n        (rf/dispatch [:open-modal\n                      [select-connection-modal]\n                      :small\n                      (fn []\n                        (rf/dispatch [:navigate :tasks])\n                        (rf/dispatch [:close-modal]))]))\n      (if @selected-connection\n        [:div {:class \"grid grid-cols-8 box-border h-new-task__screen-container\"}\n         [:div {:class \"grid grid-rows-1 col-span-7\"}\n          [editor]]\n         [:div\n          {:class \"h-new-task__screen-container col-span-1 overflow-auto\"}\n          [tasks-list/main]]]\n        [:div {:class \"flex gap-small items-center justify-center\"}\n         [:div {:class (str \"w-5 h-5 inset-y-4 right-10\"\n                            \" opacity-70 animate-spin origin-center\")}\n          [icon/regular {:size 5\n                         :icon-name \"loader-circle\"}]]\n         [:span {:class \"text-sm\"}\n          \"Loading the editor...\"]]))))\n"]}