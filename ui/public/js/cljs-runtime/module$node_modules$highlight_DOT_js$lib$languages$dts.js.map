{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$dts.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAwKnHD,MAAOC,CAAAA,OAAP,CA9JAC,QAAY,CAACC,IAAD,CAAO,CACjB,MAAMC,QAAU,CACdC,UAAW,QADG,CAEdC,SAAU,CACRH,IAAKI,CAAAA,OAAL,CAAaJ,IAAKK,CAAAA,iBAAlB,CAAqC,CACnCC,MAAO,eAD4B,CAArC,CADQ,CAIR,CACEA,MAAO,YADT,CAEEC,IAAK,GAFP,CAGEC,SAAU,CAACR,IAAKS,CAAAA,gBAAN,CAHZ,CAJQ,CASR,CACEH,MAAO,SADT,CAEEC,IAAK,GAFP,CAGEG,QAAS,GAHX,CATQ,CAFI,CAAhB,CAmBMC,QAAU,CACdT,UAAW,QADG,CAEdC,SAAU,CACR,CACEG,MAAO,gDADT,CADQ,CAIR,CACEA,MAAON,IAAKY,CAAAA,WADd,CAJQ,CAFI,CAUdC,UAAW,CAVG,CAnBhB,CAgCMC,aAAe,CACnBZ,UAAW,MADQ;AAEnBI,MAAO,GAFY,CAGnBC,IAAK,GAHc,CAInBQ,SAAU,CACRC,QAAS,8CADD,CAJS,CAOnBR,SAAU,CACR,CACEF,MAAO,MADT,CAEEO,UAAW,CAFb,CADQ,CAKR,CACEI,cAAe,SADjB,CAEEV,IAAK,GAFP,CAGEQ,SAAU,CACRC,QAAS,SADD,CAHZ,CAMER,SAAU,CACRR,IAAKI,CAAAA,OAAL,CAAaH,OAAb,CAAsB,CACpBC,UAAW,QADS,CAAtB,CADQ,CAIR,CACEA,UAAW,QADb,CAEEI,MAAO,MAFT,CAGEC,IAAK,MAHP,CAIEG,QAAS,KAJX,CAJQ,CANZ,CALQ,CAuBRT,OAvBQ,CAwBRD,IAAKkB,CAAAA,mBAxBG,CAyBRlB,IAAKmB,CAAAA,oBAzBG,CAPS,CAhCrB,CAoEMC,UAAY,CAChBlB,UAAW,UADK,CAEhBI,MAAO,cAFS,CAgElB,OAAO,CACLe,KAAM,aADD,CAELb,SAAU,CAnCMc,CAChBpB,UAAW,aADKoB,CAEhBhB,MAAO,cAFSgB,CAGhBT,UAAW,EAHKS,CAmCN;AAERF,SAFQ,CA7DIG,CACdrB,UAAW,SADGqB,CAEdjB,MAAO,mBAFOiB,CA6DJ,CAxDEC,CACZtB,UAAW,QADCsB,CAEZlB,MAAO,8BAFKkB,CAwDF,CAxCCC,CACXvB,UAAW,aADAuB,CAEXnB,MAAO,iCAFImB,CAwCD,CAtBCC,CACXb,UAAW,CADAa,CAEXC,MAAO,CACL,eADK,CAEL,KAFK,CAGL,GAHK,CAFID,CAOXE,MAAO,CACL,EAAG,MADE,CAEL,EAAG,UAFE,CAPIF,CAsBD,CA3BUG,CACpBF,MAAO,oBADaE,CAEpBhB,UAAW,CAFSgB,CAGpBD,MAAO,MAHaC,CA2BV,CAnDUC,CACpB5B,UAAW,QADS4B,CAEpBjB,UAAW,CAFSiB,CAGpBxB,MAAO,MAHawB,CAIpBvB,IAAK,MAJeuB,CAKpBtB,SAAU,CACRG,OADQ,CAERS,SAFQ,CALUU,CAmDV,CASR9B,IAAKkB,CAAAA,mBATG,CAURlB,IAAKmB,CAAAA,oBAVG,CAWRR,OAXQ,CAYRV,OAZQ,CAaRa,YAbQ,CATCiB,CACXH,MAAO,aADIG;AAEXlB,UAAW,CAFAkB,CAIXJ,MAAO,WAJII,CASD,CAeR,CACEzB,MAAON,IAAKgC,CAAAA,QAAZ1B,CAAuB,IADzB,CAEES,SAAU,EAFZ,CAfQ,CAFL,CArIU,CAVgG;",
"sources":["node_modules/highlight_DOT_js/lib/languages/dts.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$dts\"] = function(global,require,module,exports) {\n/*\nLanguage: Device Tree\nDescription: *.dts files used in the Linux kernel\nAuthor: Martin Braun <martin.braun@ettus.com>, Moritz Fischer <moritz.fischer@ettus.com>\nWebsite: https://elinux.org/Device_Tree_Reference\nCategory: config\n*/\n\n/** @type LanguageFn */\nfunction dts(hljs) {\n  const STRINGS = {\n    className: 'string',\n    variants: [\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        begin: '((u8?|U)|L)?\"'\n      }),\n      {\n        begin: '(u8?|U)?R\"',\n        end: '\"',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n      {\n        begin: '\\'\\\\\\\\?.',\n        end: '\\'',\n        illegal: '.'\n      }\n    ]\n  };\n\n  const NUMBERS = {\n    className: 'number',\n    variants: [\n      {\n        begin: '\\\\b(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)(u|U|l|L|ul|UL|f|F)'\n      },\n      {\n        begin: hljs.C_NUMBER_RE\n      }\n    ],\n    relevance: 0\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: '#',\n    end: '$',\n    keywords: {\n      keyword: 'if else elif endif define undef ifdef ifndef'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/,\n        relevance: 0\n      },\n      {\n        beginKeywords: 'include',\n        end: '$',\n        keywords: {\n          keyword: 'include'\n        },\n        contains: [\n          hljs.inherit(STRINGS, {\n            className: 'string'\n          }),\n          {\n            className: 'string',\n            begin: '<',\n            end: '>',\n            illegal: '\\\\n'\n          }\n        ]\n      },\n      STRINGS,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  const REFERENCE = {\n    className: 'variable',\n    begin: /&[a-z\\d_]*\\b/\n  };\n\n  const KEYWORD = {\n    className: 'keyword',\n    begin: '/[a-z][a-z\\\\d-]*/'\n  };\n\n  const LABEL = {\n    className: 'symbol',\n    begin: '^\\\\s*[a-zA-Z_][a-zA-Z\\\\d_]*:'\n  };\n\n  const CELL_PROPERTY = {\n    className: 'params',\n    relevance: 0,\n    begin: '<',\n    end: '>',\n    contains: [\n      NUMBERS,\n      REFERENCE\n    ]\n  };\n\n  const NODE = {\n    className: 'title.class',\n    begin: /[a-zA-Z_][a-zA-Z\\d_@-]*(?=\\s\\{)/\n  };\n\n  const ROOT_NODE = {\n    className: 'title.class',\n    begin: /^\\/(?=\\s*\\{)/,\n    relevance: 10\n  };\n\n  // TODO: `attribute` might be the right scope here, unsure\n  // I'm not sure if all these key names have semantic meaning or not\n  const ATTR_NO_VALUE = {\n    match: /[a-z][a-z-,]+(?=;)/,\n    relevance: 0,\n    scope: \"attr\"\n  };\n  const ATTR = {\n    relevance: 0,\n    match: [\n      /[a-z][a-z-,]+/,\n      /\\s*/,\n      /=/\n    ],\n    scope: {\n      1: \"attr\",\n      3: \"operator\"\n    }\n  };\n\n  const PUNC = {\n    scope: \"punctuation\",\n    relevance: 0,\n    // `};` combined is just to avoid tons of useless punctuation nodes\n    match: /\\};|[;{}]/\n  };\n\n  return {\n    name: 'Device Tree',\n    contains: [\n      ROOT_NODE,\n      REFERENCE,\n      KEYWORD,\n      LABEL,\n      NODE,\n      ATTR,\n      ATTR_NO_VALUE,\n      CELL_PROPERTY,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      NUMBERS,\n      STRINGS,\n      PREPROCESSOR,\n      PUNC,\n      {\n        begin: hljs.IDENT_RE + '::',\n        keywords: \"\"\n      }\n    ]\n  };\n}\n\nmodule.exports = dts;\n\n};"],
"names":["shadow$provide","global","require","module","exports","dts","hljs","STRINGS","className","variants","inherit","QUOTE_STRING_MODE","begin","end","contains","BACKSLASH_ESCAPE","illegal","NUMBERS","C_NUMBER_RE","relevance","PREPROCESSOR","keywords","keyword","beginKeywords","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","REFERENCE","name","ROOT_NODE","KEYWORD","LABEL","NODE","ATTR","match","scope","ATTR_NO_VALUE","CELL_PROPERTY","PUNC","IDENT_RE"]
}
