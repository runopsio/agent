{
"version":3,
"file":"module$node_modules$readable_stream$node_modules$string_decoder$lib$string_decoder.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/readable-stream/node_modules/string_decoder/lib/string_decoder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$readable_stream$node_modules$string_decoder$lib$string_decoder\"] = function(global,require,module,exports) {\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_normalizeEncoding","enc","retried","toLowerCase","StringDecoder","encoding","nenc","Buffer","isEncoding","Error","text","utf16Text","end","utf16End","nb","fillLast","utf8FillLast","base64Text","base64End","write","simpleWrite","simpleEnd","lastTotal","lastNeed","lastChar","allocUnsafe","utf8CheckByte","byte","utf8CheckIncomplete","self","buf","i","j","length","p","undefined","r","copy","toString","c","charCodeAt","slice","n","prototype","StringDecoder.prototype.write","utf8End","utf8Text","total","StringDecoder.prototype.fillLast"]
}
