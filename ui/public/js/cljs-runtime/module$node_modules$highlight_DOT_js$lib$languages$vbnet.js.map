{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$vbnet.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/highlight_DOT_js/lib/languages/vbnet.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$vbnet\"] = function(global,require,module,exports) {\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\nfunction stripOptionsFromArgs(args) {\n  const opts = args[args.length - 1];\n\n  if (typeof opts === 'object' && opts.constructor === Object) {\n    args.splice(args.length - 1, 1);\n    return opts;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const opts = stripOptionsFromArgs(args);\n  const joined = '(' +\n    (opts.capture ? \"\" : \"?:\") +\n    args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/*\nLanguage: Visual Basic .NET\nDescription: Visual Basic .NET (VB.NET) is a multi-paradigm, object-oriented programming language, implemented on the .NET Framework.\nAuthors: Poren Chiang <ren.chiang@gmail.com>, Jan Pilzer\nWebsite: https://docs.microsoft.com/dotnet/visual-basic/getting-started\nCategory: common\n*/\n\n/** @type LanguageFn */\nfunction vbnet(hljs) {\n  /**\n   * Character Literal\n   * Either a single character (\"a\"C) or an escaped double quote (\"\"\"\"C).\n   */\n  const CHARACTER = {\n    className: 'string',\n    begin: /\"(\"\"|[^/n])\"C\\b/\n  };\n\n  const STRING = {\n    className: 'string',\n    begin: /\"/,\n    end: /\"/,\n    illegal: /\\n/,\n    contains: [\n      {\n        // double quote escape\n        begin: /\"\"/\n      }\n    ]\n  };\n\n  /** Date Literals consist of a date, a time, or both separated by whitespace, surrounded by # */\n  const MM_DD_YYYY = /\\d{1,2}\\/\\d{1,2}\\/\\d{4}/;\n  const YYYY_MM_DD = /\\d{4}-\\d{1,2}-\\d{1,2}/;\n  const TIME_12H = /(\\d|1[012])(:\\d+){0,2} *(AM|PM)/;\n  const TIME_24H = /\\d{1,2}(:\\d{1,2}){1,2}/;\n  const DATE = {\n    className: 'literal',\n    variants: [\n      {\n        // #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)\n        begin: concat(/# */, either(YYYY_MM_DD, MM_DD_YYYY), / *#/)\n      },\n      {\n        // #H:mm[:ss]# (24h Time)\n        begin: concat(/# */, TIME_24H, / *#/)\n      },\n      {\n        // #h[:mm[:ss]] A# (12h Time)\n        begin: concat(/# */, TIME_12H, / *#/)\n      },\n      {\n        // date plus time\n        begin: concat(\n          /# */,\n          either(YYYY_MM_DD, MM_DD_YYYY),\n          / +/,\n          either(TIME_12H, TIME_24H),\n          / *#/\n        )\n      }\n    ]\n  };\n\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      {\n        // Float\n        begin: /\\b\\d[\\d_]*((\\.[\\d_]+(E[+-]?[\\d_]+)?)|(E[+-]?[\\d_]+))[RFD@!#]?/\n      },\n      {\n        // Integer (base 10)\n        begin: /\\b\\d[\\d_]*((U?[SIL])|[%&])?/\n      },\n      {\n        // Integer (base 16)\n        begin: /&H[\\dA-F_]+((U?[SIL])|[%&])?/\n      },\n      {\n        // Integer (base 8)\n        begin: /&O[0-7_]+((U?[SIL])|[%&])?/\n      },\n      {\n        // Integer (base 2)\n        begin: /&B[01_]+((U?[SIL])|[%&])?/\n      }\n    ]\n  };\n\n  const LABEL = {\n    className: 'label',\n    begin: /^\\w+:/\n  };\n\n  const DOC_COMMENT = hljs.COMMENT(/'''/, /$/, {\n    contains: [\n      {\n        className: 'doctag',\n        begin: /<\\/?/,\n        end: />/\n      }\n    ]\n  });\n\n  const COMMENT = hljs.COMMENT(null, /$/, {\n    variants: [\n      {\n        begin: /'/\n      },\n      {\n        // TODO: Use multi-class for leading spaces\n        begin: /([\\t ]|^)REM(?=\\s)/\n      }\n    ]\n  });\n\n  const DIRECTIVES = {\n    className: 'meta',\n    // TODO: Use multi-class for indentation once available\n    begin: /[\\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\\b/,\n    end: /$/,\n    keywords: {\n      keyword:\n        'const disable else elseif enable end externalsource if region then'\n    },\n    contains: [ COMMENT ]\n  };\n\n  return {\n    name: 'Visual Basic .NET',\n    aliases: [ 'vb' ],\n    case_insensitive: true,\n    classNameAliases: {\n      label: 'symbol'\n    },\n    keywords: {\n      keyword:\n        'addhandler alias aggregate ansi as async assembly auto binary by byref byval ' + /* a-b */\n        'call case catch class compare const continue custom declare default delegate dim distinct do ' + /* c-d */\n        'each equals else elseif end enum erase error event exit explicit finally for friend from function ' + /* e-f */\n        'get global goto group handles if implements imports in inherits interface into iterator ' + /* g-i */\n        'join key let lib loop me mid module mustinherit mustoverride mybase myclass ' + /* j-m */\n        'namespace narrowing new next notinheritable notoverridable ' + /* n */\n        'of off on operator option optional order overloads overridable overrides ' + /* o */\n        'paramarray partial preserve private property protected public ' + /* p */\n        'raiseevent readonly redim removehandler resume return ' + /* r */\n        'select set shadows shared skip static step stop structure strict sub synclock ' + /* s */\n        'take text then throw to try unicode until using when where while widening with withevents writeonly yield' /* t-y */,\n      built_in:\n        // Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators\n        'addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor ' +\n        // Type Conversion Functions https://docs.microsoft.com/dotnet/visual-basic/language-reference/functions/type-conversion-functions\n        'cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort',\n      type:\n        // Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types\n        'boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort',\n      literal: 'true false nothing'\n    },\n    illegal:\n      '//|\\\\{|\\\\}|endif|gosub|variant|wend|^\\\\$ ' /* reserved deprecated keywords */,\n    contains: [\n      CHARACTER,\n      STRING,\n      DATE,\n      NUMBER,\n      LABEL,\n      DOC_COMMENT,\n      COMMENT,\n      DIRECTIVES\n    ]\n  };\n}\n\nmodule.exports = vbnet;\n\n};"],
"names":["shadow$provide","global","require","module","exports","concat","args","map","x","source","join","joined","stripOptionsFromArgs","opts","length","constructor","Object","splice","either","capture","vbnet","hljs","MM_DD_YYYY","YYYY_MM_DD","TIME_12H","TIME_24H","DATE","className","variants","begin","DOC_COMMENT","COMMENT","contains","end","name","aliases","case_insensitive","classNameAliases","label","keywords","keyword","built_in","type","literal","illegal","CHARACTER","STRING","NUMBER","relevance","LABEL","DIRECTIVES"]
}
