{"version":3,"sources":["webapp/http/request.cljs"],"mappings":"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","names":["webapp.http.request/error-handling","error","re-frame.core/dispatch","p__30588","map__30589","cljs.core/--destructure-map","cljs.core.get","webapp.http.request/not-ok","status","on-failure","cljs.core._EQ_","pathname","js/window","search","_","js/localStorage","js/webapp","js/webapp.http","js/webapp.http.request","js/webapp.http.request.response-parser","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","fexpr__30591","cljs.core/MultiFn","cljs.core.symbol","webapp.http.request/response-parser","cljs.core/identity","response","on-success","json","payload","cljs.core.js__GT_clj","cljs.core/not","js/Error","G__30593","G__30594","cljs.core.println","text","G__30595","G__30596","webapp.http.request/query-params-parser","queries","url-search-params","js/URLSearchParams","cljs.core/clj->js","and__4251__auto__","cljs.core/empty?","p__30598","map__30599","webapp.http.request/request","method","url","body","query-params","options","json-body","js/JSON","p1__30597#","js/fetch","cljs.core.merge","or__4253__auto__","temp__5753__auto__","cljs.core.not_EQ_"],"sourcesContent":["(ns webapp.http.request\n\n  (:require\n   [re-frame.core :as rf]))\n\n(defn error-handling\n  [error]\n  (rf/dispatch [:show-snackbar {:level :error :text (.-message error)}]))\n\n(defn not-ok\n  \"This functions has two possible outcomes:\n  1 - When the status is 401 (Unauthorized), it saves the requested path so the user can be redirected to it later (see in [webapp.app] namespace, in auth-callback-panel function), then it dispatches the :logout event so the application clean up old tokens and ask to the user to login again;\n  2 - when the status is 399 or below, it executes a on-failure function, that is provided by upperscope.\"\n  [{:keys  [status on-failure]}]\n  (when (= status 401) (let [pathname (.. js/window -location -pathname)\n                             search (.. js/window -location -search)\n                             _ (.setItem js/localStorage\n                                         \"redirect-after-auth\"\n                                         (str pathname search))\n                             _ (rf/dispatch [:logout])]))\n  (when (> status 399) (on-failure)))\n\n(defmulti response-parser identity)\n(defmethod response-parser \"application/json\" [_ response on-success]\n  (.then\n   (.json response)\n   (fn [json]\n     (let [payload (js->clj json :keywordize-keys true)]\n       (when (not (.-ok response)) (not-ok {:status (.-status response)\n                                            :on-failure #(throw (js/Error. (:message payload)))}))\n       (on-success payload (.-headers response))\n       payload))))\n\n;;TODO send headers object as second param of on-success and on-failure\n(defmethod response-parser :default [_ response on-success]\n  (println :headers :content-range (.get (.-headers response) \"Content-Range\"))\n  (.then\n   (.text response)\n   (fn [text]\n     (when (not (.-ok response)) (not-ok {:status (.-status response)\n                                          :on-failure #(throw (js/Error. text))}))\n     (on-success text (.-headers response))\n     text)))\n\n(defn query-params-parser\n  [queries]\n  (let [url-search-params (new js/URLSearchParams (clj->js queries))]\n    (if (and (not (empty? (.toString url-search-params))) queries)\n      (str \"?\" (.toString url-search-params))\n      \"\")))\n\n(defn request\n  \"request abstraction for making a http request\n\n  This functions receives one argument with the following keys:\n  :method -> string of a http verb (GET, POST, PUT, DELETE, etc). If nil, defaults to GET\n  :url -> URL to be called\n  :body -> a clojure map of the body structure\n  :on-sucess -> callback that receives as argument the response payload\n  :on-failure -> callback that has one argument that is the error message to treat 4xx and 5xx status codes. If not provided, a default callback will be called\n  :options -> this is a map of options, like headers\n\n  it returns a promise with the response in a clojure map and executes a on-sucess callback\"\n  [{:keys [method url body query-params on-success on-failure options]}]\n  (let [json-body (.stringify js/JSON (clj->js body))]\n    (.catch\n     (.then\n      (js/fetch (str url (query-params-parser query-params))\n                (clj->js (merge options\n                                {:method (or method \"GET\")}\n                                (when-let [_ (and (not= method \"GET\")\n                                                  (not= method \"HEAD\"))]\n                                  {:body json-body}))))\n      #(response-parser\n        (:accept (:headers options))\n        %\n        on-success))\n     (fn [error]\n       (if (= on-failure nil) (error-handling error) (on-failure error))))))\n"]}