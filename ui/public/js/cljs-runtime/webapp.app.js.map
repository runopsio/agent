{"version":3,"sources":["webapp/app.cljs"],"mappings":"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","names":["webapp.app/initialize-sentry","js/module$node_modules$$sentry$browser$dist$index.init","cljs.core/clj->js","webapp.config/sentry","js/module$node_modules$$sentry$tracing$dist$index.Integrations.BrowserTracing","js/window.addEventListener","webapp.app/auth-callback-panel","search-string","js/window","url-params","js/URLSearchParams","token","slack-param","goog.crypt.base64/decodeString","error","redirect-after-auth","js/localStorage","destiny","cljs.core/empty?","cljs.core._EQ_","re-frame.core/dispatch","_","js/webapp","js/webapp.app","js/webapp.app.layout","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__30171","cljs.core/MultiFn","cljs.core.symbol","webapp.app/layout","cljs.core/identity","panels","webapp.components.modal/modal","webapp.components.dialog/dialog","webapp.components.snackbar/snackbar","webapp.components.loaders/over-page-loader","webapp.shared-ui.header/header","webapp.routes/panels","webapp.settings.views.main/main","webapp.views.home/home-panel","pathname","current-route","cljs.core/deref","bidi.bidi/match-route","webapp.routes/routes","template-dir","template-file","webapp.templates.views.panel/panel","webapp.secrets.views.main/panel","webapp.connections.views.main/panel","webapp.connections.views.connection-form/main","name","connection-name","webapp.tasks.views.main/panel","webapp.dashboard.queries.panel/panel","webapp.reviews.views.panel/panel","webapp.tasks.views.new-task.panel/main","task-id","webapp.tasks.views.task-details/main","webapp.auth.views.login-panel/panel","webapp.auth.views.signup-panel/panel","webapp.integrations.slack/slack-panel","webapp.settings.views.slack-integration-callback/main","webapp.app/app","webapp.app/main-panel","active-panel","re_frame.core.subscribe"],"sourcesContent":["(ns webapp.app\n  (:require\n   [webapp.config :as config]\n   [re-frame.core :as rf]\n   [bidi.bidi :as bidi]\n   [\"@sentry/browser\" :as sentry]\n   [\"@sentry/tracing\" :as sentry-tracing]\n   [goog.crypt.base64 :as b64]\n   [webapp.routes :as routes]\n   [webapp.shared-ui.header :as header]\n   [webapp.views.home :as home]\n   [webapp.templates.views.panel :as templates]\n   [webapp.connections.views.main :as connections]\n   [webapp.secrets.views.main :as secrets]\n   [webapp.dashboard.queries.panel :as queries-dashboard]\n   [webapp.connections.views.connection-form :as connection-form]\n   [webapp.tasks.views.main :as tasks]\n   [webapp.tasks.views.new-task.panel :as new-task-panel]\n   [webapp.settings.views.main :as settings]\n   [webapp.tasks.views.task-details :as task-details]\n   [webapp.reviews.views.panel :as reviews]\n   [webapp.auth.views.login-panel :as login-panel]\n   [webapp.auth.views.signup-panel :as signup-panel]\n   [webapp.integrations.slack :as integrations]\n   [webapp.settings.views.slack-integration-callback :as slack-cb-panel]\n   [webapp.events]\n   [webapp.auth.events :as auth-events]\n   [webapp.connections.events :as connections-events]\n   [webapp.components.modal :as modals]\n   [webapp.components.dialog :as dialog]\n   [webapp.components.snackbar :as snackbar]\n   [webapp.components.loaders :as loaders]\n   [webapp.subs :as subs]))\n\n(defn initialize-sentry []\n  (sentry/init (clj->js {:dsn (:dsn config/sentry)\n                         :integrations [(sentry-tracing/Integrations.BrowserTracing.)]\n                         :tracesSampleRate (:trace-sample-rate config/sentry)})))\n\n(js/window.addEventListener \"load\" initialize-sentry)\n\n(defn auth-callback-panel\n  \"This panel works for receiving the token and storing in the session for later requests\"\n  []\n  (let [search-string (.. js/window -location -search)\n        url-params (new js/URLSearchParams search-string)\n        token (.get url-params \"token\")\n        slack-param (b64/decodeString (.get url-params \"slack\"))\n        error (.get url-params \"error\")\n        redirect-after-auth (.getItem js/localStorage \"redirect-after-auth\")\n        destiny (if error :login (if (empty? slack-param) :home :slack-integration))]\n    (.removeItem js/localStorage \"email_mismatch\")\n    (when (= error \"email_mismatch\")\n      (.setItem js/localStorage \"email_mismatch\" true))\n    (rf/dispatch [:set-slack-integration-url slack-param])\n    (.setItem js/localStorage \"jwt-token\" token)\n    (if (nil? redirect-after-auth)\n      (rf/dispatch [:navigate destiny])\n      (let [_ (.replace (. js/window -location) redirect-after-auth)\n            _ (.removeItem js/localStorage \"redirect-after-auth\")]))\n    (when error (rf/dispatch [::auth-events/login-error error]))\n\n    [:div \"Verifying authentication\"\n     [:span.w-16\n      [:img.inline.animate-spin {:src \"/icons/icon-refresh.svg\"}]]]))\n\n(defmulti layout identity)\n(defmethod layout :application [_ panels]\n  [:section.min-h-screen.h-full.antialiased.bg-gray-50\n   (modals/modal)\n   (dialog/dialog)\n   [snackbar/snackbar]\n   (loaders/over-page-loader)\n   [:main\n    [header/header]\n    [:section\n     {:class (str \"container min-w-app__container \"\n                  \"rounded-lg bg-white \"\n                  \"py-regular px-large mx-auto mb-x-large\")}\n     panels]]])\n(defmethod layout :application-full [_ panels]\n  [:section\n   {:class (str \"min-h-screen h-full min-w-app__container \"\n                \"antialiased bg-white\")}\n   [modals/modal]\n   (dialog/dialog)\n   [snackbar/snackbar]\n   (loaders/over-page-loader)\n   [:main\n    [header/header]\n    [:section.mb-x-large.w-full panels]]])\n(defmethod layout :auth [_ panels]\n  [:section.min-h-screen.antialiased.bg-gray-50\n   (snackbar/snackbar)\n   [:section.container.rounded-main-large.p-large.mx-auto\n    panels]])\n\n(defmethod routes/panels :settings-panel []\n  [layout :application-full [settings/main]])\n(defmethod routes/panels :home-panel []\n  (layout :application [home/home-panel]))\n(defmethod routes/panels :templates-panel []\n  (let [pathname (.. js/window -location -pathname)\n        current-route (bidi/match-route @routes/routes pathname)\n        template-dir (:template-dir (:route-params current-route))\n        template-file (:template-file (:route-params current-route))]\n    (when template-file\n      (rf/dispatch [:templates->get-template-by-name\n                    (if template-dir\n                      (str template-dir \"/\" template-file)\n                      template-file)]))\n    (rf/dispatch [:get-templates])\n    [layout :application-full [templates/panel]]))\n(defmethod routes/panels :secrets-panel []\n  (rf/dispatch [:close-page-loader])\n  (layout :application-full [secrets/panel]))\n(defmethod routes/panels :connections-panel []\n  (layout :application-full [connections/panel]))\n(defmethod routes/panels :connection-create-panel []\n  (layout :application-full [connection-form/main :create]))\n(defmethod routes/panels :connection-edit-panel [_ name]\n  (let [pathname (.. js/window -location -pathname)\n        current-route (bidi/match-route @routes/routes pathname)\n        connection-name (:name (:route-params current-route))]\n    (rf/dispatch [::connections-events/get-connection {:connection-name connection-name}])\n    (layout :application-full [connection-form/main :update])))\n\n(defmethod routes/panels :tasks-panel []\n  (rf/dispatch [:get-tasks])\n  (layout :application-full [tasks/panel]))\n\n(defmethod routes/panels :dashboard-queries-panel []\n  [layout :application-full [queries-dashboard/panel]])\n\n(defmethod routes/panels :reviews-panel []\n  (rf/dispatch [:get-reviews])\n  [layout :application-full [reviews/panel]])\n(defmethod routes/panels :new-task-panel []\n  [layout :application-full [new-task-panel/main {:choose-connection? true}]])\n(defmethod routes/panels :new-task-with-connection-panel [_]\n  (let [pathname (.. js/window -location -pathname)\n        current-route (bidi/match-route @routes/routes pathname)\n        connection-name (-> current-route :route-params :connection-name)\n        _ (rf/dispatch [:new-task->get-connection connection-name])]\n    [layout :application-full [new-task-panel/main {:connection-name connection-name}]]))\n(defmethod routes/panels :new-query-with-connection-panel [_]\n  (let [pathname (.. js/window -location -pathname)\n        current-route (bidi/match-route @routes/routes pathname)\n        connection-name (-> current-route :route-params :connection-name)\n        _ (rf/dispatch [:new-task->get-connection connection-name])]\n    [layout :application-full [new-task-panel/main {:connection-name connection-name}]]))\n(defmethod routes/panels :task-detail-panel [_]\n  (let [pathname (.. js/window -location -pathname)\n        current-route (bidi/match-route @routes/routes pathname)\n        task-id (:id (:route-params current-route))]\n    (rf/dispatch [:get-task-by-id {:id task-id}])\n    (layout :application [task-details/main {:copy-to-new-script? true}])))\n(defmethod routes/panels :auth-callback-panel []\n  [auth-callback-panel])\n(defmethod routes/panels :login-panel []\n  (layout :auth [login-panel/panel]))\n(defmethod routes/panels :signup-panel []\n  (layout :auth [signup-panel/panel]))\n(defmethod routes/panels :slack-integration-panel []\n  (layout :auth [integrations/slack-panel]))\n(defmethod routes/panels :slack-cb-panel []\n  (layout :auth [slack-cb-panel/main]))\n\n(defn app [panels] panels)\n\n(defn main-panel []\n  (let [active-panel (rf/subscribe [::subs/active-panel])]\n    [app [routes/panels @active-panel]]))\n"]}