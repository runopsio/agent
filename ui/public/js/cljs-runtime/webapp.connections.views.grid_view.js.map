{"version":3,"sources":["webapp/connections/views/grid_view.cljs"],"mappings":"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","names":["js/webapp","js/webapp.connections","js/webapp.connections.views","js/webapp.connections.views.grid-view","js/webapp.connections.views.grid-view.item-state","webapp.connections.views.grid-view/item-state","reagent.core.atom","webapp.connections.views.grid-view/close-modal-dialog","dialog-text","on-success-dialog","re-frame.core/dispatch","open-dialog","webapp.connections.views.grid-view/toggle-dropdown-status","item","cljs.core.swap_BANG_","cljs.core/assoc-in","cljs.core/not","cljs.core/deref","cljs.core.get_in","webapp.connections.views.grid-view/change-status","webapp.connections.views.connection-change-status/confirm-target-change-status","webapp.connections.views.grid-view/item-dropdown","cljs.core._EQ_","webapp.connections.views.grid-view/connection-card-popover","connection","webapp.components.popover/right","webapp.connections.views.grid-view/card-empty-connections","webapp.connections.views.connection-form-modal/form","webapp.connections.views.grid-view/connection-card","admin?","active?","iter__4652__auto__","s__30277","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__30279","cljs.core/chunk-buffer","i__30278","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30276","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","group","webapp.components.badge/basic","webapp.connections.views.grid-view/main","_","user","re_frame.core.subscribe","connections","cljs.core/some","cljs.core.partial","cljs.core/=","cljs.core/empty?","s__30281","b__30283","i__30282","iter__30280","cljs.core/chunk-first"],"sourcesContent":["(ns webapp.connections.views.grid-view\n  (:require [re-frame.core :as rf]\n            [reagent.core :as r]\n            [webapp.components.badge :as badge]\n            [webapp.components.popover :as popover]\n            [webapp.connections.views.connection-change-status :as change-status]\n            [webapp.connections.views.connection-form-modal :as connection-form-modal]\n            [webapp.subs :as subs]))\n\n(defonce item-state (r/atom {}))\n\n(defn close-modal-dialog []\n  (let [dialog-text (str \"Are you sure you want to discard this new connection?\")\n        on-success-dialog #(rf/dispatch [:close-modal])\n        open-dialog #(rf/dispatch [:open-dialog {:text dialog-text\n                                                 :on-success on-success-dialog}])]\n    (open-dialog)))\n\n;; TODO find a better place to this kind of logic to be placed\n(defn toggle-dropdown-status [item]\n  (swap! item-state assoc-in\n         [(:name item) :dropdown-status]\n         (not (get-in @item-state [(:name item) :dropdown-status]))))\n\n(defn change-status [item]\n  (toggle-dropdown-status item)\n  (rf/dispatch [:open-modal (change-status/confirm-target-change-status (:status item) item)]))\n\n(defn item-dropdown [item]\n  [:ul.text-right\n   [:li.border-b.py-small.px-regular\n    [:a.text-sm\n     {:href (str \"/connections/\" (:name item))\n      :on-click #(toggle-dropdown-status item)}\n     \"Edit\"]]\n   [:li.py-small.px-regular\n    (if  (= \"active\" (:status item))\n      [:a.text-red-600.text-sm\n       {:href \"#\"\n        :on-click #(change-status item)}\n       \"Deactivate\"]\n      [:a.text-green-600.text-sm\n       {:href \"#\"\n        :on-click #(change-status item)}\n       \"Activate\"])]])\n\n(defn- connection-card-popover [connection]\n  [:div\n   {:class \"absolute right-small top-regular\"}\n   [:figure\n    {:class \"w-5 cursor-pointer\"\n     :on-click #(swap! item-state assoc-in\n                       [(:name connection) :dropdown-status]\n                       (not (get-in @item-state [(:name connection) :dropdown-status])))}\n    [:img {:src \"/icons/icon-dots-vertical.svg\"}]]\n   (popover/right {:open (get-in @item-state [(:name connection) :dropdown-status])\n                   :component (item-dropdown connection)\n                   :on-click-outside #(swap! item-state assoc-in\n                                             [(:name connection) :dropdown-status]\n                                             false)})])\n\n(defn- card-empty-connections []\n  [:a {:class (str \"group flex flex-col justify-center items-center cursor-pointer\"\n                   \" p-regular bg-white rounded-lg h-32\"\n                   \" border shadow-0 hover:shadow transition\")\n       :on-click #(rf/dispatch [:open-modal [connection-form-modal/form nil :create] :large close-modal-dialog])}\n   [:figure {:class \"w-16 opacity-40 group-hover:opacity-50 transition\"}\n    [:img {:class \"w-full\"\n           :src \"/icons/icon-plus-blue.svg\"}]]\n   [:span {:class \"text-xs text-blue-500\"}\n    \"Create a connection\"]])\n\n(defn- connection-card [connection admin?]\n  (let [active? (= (:status connection) \"active\")]\n    [:div {:class \"relative\"}\n     [:a {:class (str \"group flex flex-col relative p-regular bg-white rounded-lg\"\n                      \" border shadow-0 hover:shadow transition h-full\")\n          :href (str \"/connections/\" (:name connection) \"/queries/new\")}\n      [:div\n       {:class (str \"text-sm text-gray-900\"\n                    (when (not active?) \" opacity-50 italic\"))}\n       (:name connection)\n       (when (not active?)\n         [:span\n          {:class \"font-italic text-xs text-gray-600\"}\n          \" (inactive)\"])]\n      [:div\n       {:class \"text-xs text-gray-500\"}\n       (:type connection)]\n\n      [:div {:class \"flex items-start py-regular gap-small\"}\n       [:div\n        {:class \"flex flex-wrap gap-small\"}\n        (for [group (:groups connection)]\n          ^{:key group}\n          [badge/basic group])]]\n      [:div {:class \"flex flex-grow justify-end items-end\"}\n       [:span {:class \"flex items-center gap-x-small text-xs text-blue-500\"}\n        [:span \"Open\"]\n        [:figure {:class \"w-3 transform group-hover:translate-x-0.5 transition\"}\n         [:img {:src \"/icons/icon-arrow-right-blue.svg\"}]]]]]\n     (when admin? [connection-card-popover connection])]))\n\n(defn main [_]\n  (let [user (rf/subscribe [::subs/user])]\n    (fn [connections]\n      (let [admin? (some (partial = \"admin\") (:groups @user))]\n        [:section\n         {:class (str \"grid grid-cols-3 gap-regular \"\n                      \"2xl:grid-cols-4\")}\n         (when (empty? connections)\n           (if admin?\n             [card-empty-connections]\n             [:div\n              {:class (str \"col-span-3 text-center p-x-large\"\n                           \" text-sm text-gray-400 font-semibold\")}\n              (str \"You have no connections. \"\n                   \"If you need access to some, contact the admin\")]))\n         (for [connection connections]\n           ^{:key (:name connection)}\n           [connection-card connection admin?])]))))\n"]}