{"version":3,"sources":["webapp/components/combobox.cljs"],"mappings":"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","names":["webapp.components.combobox/combobox-icon","webapp.components.combobox/combobox-list-icon","p__49957","map__49959","cljs.core/--destructure-map","cljs.core.get","webapp.components.combobox/combobox-item","item","selected","on-change","close-list","cljs.core._EQ_","G__49960","webapp.components.combobox/search-options","options","pattern","p1__49965#","cljs.core.filter","clojure.string/includes?","p__49966","map__49967","webapp.components.combobox/main","list-status","reagent.core.atom","cljs.core/reset!","open-list","searched-options","input-value","p__49968","map__49969","size","name","label","list-classes","placeholder","clear?","loading?","required?","on-focus","on-blur","lifecycle-iterable","cljs.core/deref","cljs.core/empty?","or__4253__auto__","e","value","js/setTimeout","js/document","cljs.core/not","iter__4652__auto__","s__49973","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__49975","cljs.core/chunk-buffer","i__49974","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__49972","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","option","cljs.core/chunk-first"],"sourcesContent":["(ns webapp.components.combobox\n  (:require\n   [clojure.string :as string]\n   [reagent.core :as r]))\n\n(defn- combobox-icon []\n  [:svg {:class \"h-5 w-5 text-gray-400\"\n         :xmlns \"http://www.w3.org/2000/svg\"\n         :viewBox \"0 0 20 20\"\n         :fill \"currentColor\"\n         :aria-hidden \"true\"}\n   [:path {:fill-rule \"evenodd\"\n           :d \"M10 3a1 1 0 01.707.293l3 3a1 1 0 01-1.414 1.414L10 5.414 7.707 7.707a1 1 0 01-1.414-1.414l3-3A1 1 0 0110 3zm-3.707 9.293a1 1 0 011.414 0L10 14.586l2.293-2.293a1 1 0 011.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z\"\n           :clip-rule \"evenodd\"}]])\n\n(defn- combobox-list-icon []\n  [:svg {:class \"h-5 w-5\"\n         :xmlns \"http://www.w3.org/2000/svg\"\n         :viewBox \"0 0 20 20\"\n         :fill \"currentColor\"\n         :aria-hidden \"true\"}\n   [:path {:fill-rule \"evenodd\"\n           :d \"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n           :clip-rule \"evenodd\"}]])\n\n(defn- combobox-item [{:keys [item selected on-change close-list]}]\n  [:li {:class (str \"relative select-none text-gray-900 \"\n                    \"py-2 pl-3 pr-9 text-xs \"\n                    \"hover:bg-gray-100 cursor-pointer \"\n                    (when (= (:value item) selected) \"bg-gray-100 cursor-default \"))\n        :on-click (fn []\n                    (on-change (:value item))\n                    (close-list))\n        :role \"option\"\n        :tabIndex \"-1\"}\n   [:span {:class \"block truncate\"}\n    (:text item)]\n   (when (= (:value item) selected)\n     [:span {:class \"absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600\"}\n      [combobox-list-icon]])])\n\n(defn- search-options [options pattern]\n  (filter #(string/includes? (:value %) pattern) options))\n\n(defn main\n  \"size -> a variation property for a regular sized or a small one. Valid option is :small, if anything else is passed, it will consider the regular\n  name -> form name property;\n  label -> for adding a label to the combobox. If not provided, the <label> tag won't be rendered;\n  options -> a list of values to be rendered. The expected structure is {:value \\\"\\\", :text \\\"\\\"}, where value is the metadata for the selected information and text is anything you want to show in the option for that value;\n  list-classes -> to provide some specific stylezation to the list of options, it is expected to be passed CSS classes;\n  placeholder -> placeholder form property for input;\n  clear? -> a boolean to set a clear first option in the list\n  loading? -> a boolean to manage a loading status for the list\n  required? -> a boolean to manage if the input is required or not in the form\n  selected -> a string with the selected value (see options);\n  on-blur -> a function that will be executed on the input on-blur\n  on-focus -> a function that will be executed on the input on-focus\n  on-change -> a function triggered whenever the user clicks on another option.\"\n  [{:keys [options]}]\n  (let [list-status (r/atom :closed)\n        close-list #(reset! list-status :closed)\n        open-list #(reset! list-status :open)\n        searched-options (r/atom options)\n        input-value (r/atom nil)]\n    (fn [{:keys [size name label options list-classes placeholder clear? selected loading? required?\n                 on-focus on-blur on-change]}]\n      ;; lifecycle-iterable was created to manage first render.\n      ;; options is a value that gets always the right value, but search-options is from\n      ;; upperscope and needs iteration on events to be available. So, in first render\n      ;; and input-value empty we show `options`, otherwise we show search-options\n      (let [lifecycle-iterable (if (empty? @searched-options)\n                                 options\n                                 @searched-options)]\n        [:div\n         (when label\n           [:label {:for name\n                    :class \"block text-sm font-medium text-gray-700 mb-x-small\"}\n            label])\n         [:div {:class \"relative\"}\n          [:input {:class (str \"w-full rounded-md border shadow-sm h-12 \"\n                               \"border-gray-300 bg-white \"\n                               \"pl-3 pr-12 \"\n                               (if (= size :small) \"py-1 \" \"py-3 \")\n                               \"focus:border-indigo-500 focus:outline-none \"\n                               \"focus:ring-1 focus:ring-indigo-500 \"\n                               \"sm:text-sm \")\n                   :placeholder placeholder\n                   :id name\n                   :name name\n                   :required (or required? false)\n                   :value (or @input-value selected)\n                   :autoComplete \"off\"\n                   :on-keyDown (fn [e]\n                                 (when (= (.-keyCode e) 27)\n                                   (close-list)))\n                   :on-change (fn [e]\n                                (let [value (-> e .-target .-value)]\n                                  (reset! input-value value)\n                                  (reset! searched-options\n                                          (search-options options value))))\n                 ;; the line below had to be that way because blur event is\n                 ;; triggered before the change, so the list stay in there long\n                 ;; enough so the clicked item can be captured before it's unmounted\n                   :on-blur (fn []\n                              (when on-blur (js/setTimeout on-blur 150))\n                              (js/setTimeout close-list 150))\n                   :on-focus (fn []\n                               (when on-focus (on-focus))\n                               (open-list)\n                               (reset! searched-options options))}]\n          [:button {:type \"button\"\n                    :on-click (fn []\n                                (open-list)\n                                (.focus (. js/document (getElementById name))))\n                    :class (str \"absolute flex items-center rounded-r-md \"\n                                \"inset-y-0 right-0 px-2 focus:outline-none \")}\n           [combobox-icon]]\n          (when (= @list-status :open)\n            [:ul {:class (str \"absolute overflow-auto rounded-md bg-white \"\n                              \"shadow-lg ring-1 ring-black ring-opacity-5 \"\n                              \"z-10 mt-1 max-h-60 w-full py-1 \"\n                              \"text-base focus:outline-none sm:text-sm \"\n                              (when list-classes list-classes))\n                  :id \"options\"\n                  :role \"listbox\"}\n             (when clear?\n               [:li {:class (str \"relative select-none text-gray-500 \"\n                                 \"py-1 pl-3 pr-9 text-xs \"\n                                 \"hover:bg-gray-100 cursor-pointer \"\n                                 \"border-b\")\n                     :on-click (fn []\n                                 (on-change \"\")\n                                 (reset! input-value \"\")\n                                 (close-list))\n                     :role \"option\"\n                     :tabIndex \"-1\"}\n                [:span {:class \"block truncate\"}\n                 \"Clear\"]])\n           ;; TODO when searched-options is empty, show a \"not found\" result\n             (when loading?\n               [:div {:class \"p-small text-xs italic text-gray-500\"}\n                \"loading...\"])\n             (when (not loading?)\n               (for [option lifecycle-iterable]\n                 ^{:key option}\n                 [combobox-item {:item option\n                                 :on-change (fn [value]\n                                              (on-change value)\n                                              (reset! input-value value))\n                                 :close-list close-list\n                                 :selected selected}]))])]]))))\n"]}