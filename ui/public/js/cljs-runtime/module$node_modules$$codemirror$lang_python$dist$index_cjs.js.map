{
"version":3,
"file":"module$node_modules$$codemirror$lang_python$dist$index_cjs.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/@codemirror/lang-python/dist/index.cjs"],
"sourcesContent":["shadow$provide[\"module$node_modules$$codemirror$lang_python$dist$index_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar python$1 = require('@lezer/python');\nvar language = require('@codemirror/language');\nvar highlight = require('@codemirror/highlight');\n\nfunction indentBody(context, node) {\n    let base = context.lineIndent(node.from);\n    let line = context.lineAt(context.pos, -1), to = line.from + line.text.length;\n    // Don't consider blank, deindented lines at the end of the\n    // block part of the block\n    if (!/\\S/.test(line.text) &&\n        context.node.to < to + 100 &&\n        !/\\S/.test(context.state.sliceDoc(to, context.node.to)) &&\n        context.lineIndent(context.pos, -1) <= base)\n        return null;\n    // A normally deindenting keyword that appears at a higher\n    // indentation than the block should probably be handled by the next\n    // level\n    if (/^\\s*(else:|elif |except |finally:)/.test(context.textAfter) && context.lineIndent(context.pos, -1) > base)\n        return null;\n    return base + context.unit;\n}\n/**\nA language provider based on the [Lezer Python\nparser](https://github.com/lezer-parser/python), extended with\nhighlighting and indentation information.\n*/\nconst pythonLanguage = language.LRLanguage.define({\n    parser: python$1.parser.configure({\n        props: [\n            language.indentNodeProp.add({\n                Body: context => { var _a; return (_a = indentBody(context, context.node)) !== null && _a !== void 0 ? _a : context.continue(); },\n                IfStatement: cx => /^\\s*(else:|elif )/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),\n                TryStatement: cx => /^\\s*(except |finally:)/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),\n                \"TupleExpression ComprehensionExpression ParamList ArgList ParenthesizedExpression\": language.delimitedIndent({ closing: \")\" }),\n                \"DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression\": language.delimitedIndent({ closing: \"}\" }),\n                \"ArrayExpression ArrayComprehensionExpression\": language.delimitedIndent({ closing: \"]\" }),\n                Script: context => {\n                    if (context.pos + /\\s*/.exec(context.textAfter)[0].length >= context.node.to) {\n                        let endBody = null;\n                        for (let cur = context.node, to = cur.to;;) {\n                            cur = cur.lastChild;\n                            if (!cur || cur.to != to)\n                                break;\n                            if (cur.type.name == \"Body\")\n                                endBody = cur;\n                        }\n                        if (endBody) {\n                            let bodyIndent = indentBody(context, endBody);\n                            if (bodyIndent != null)\n                                return bodyIndent;\n                        }\n                    }\n                    return context.continue();\n                }\n            }),\n            language.foldNodeProp.add({\n                \"ArrayExpression DictionaryExpression\": language.foldInside,\n                Body: (node, state) => ({ from: node.from + 1, to: node.to - (node.to == state.doc.length ? 0 : 1) })\n            }),\n            highlight.styleTags({\n                \"async '*' '**' FormatConversion\": highlight.tags.modifier,\n                \"for while if elif else try except finally return raise break continue with pass assert await yield\": highlight.tags.controlKeyword,\n                \"in not and or is del\": highlight.tags.operatorKeyword,\n                \"from def class global nonlocal lambda\": highlight.tags.definitionKeyword,\n                import: highlight.tags.moduleKeyword,\n                \"with as print\": highlight.tags.keyword,\n                self: highlight.tags.self,\n                Boolean: highlight.tags.bool,\n                None: highlight.tags.null,\n                VariableName: highlight.tags.variableName,\n                \"CallExpression/VariableName\": highlight.tags.function(highlight.tags.variableName),\n                \"FunctionDefinition/VariableName\": highlight.tags.function(highlight.tags.definition(highlight.tags.variableName)),\n                \"ClassDefinition/VariableName\": highlight.tags.definition(highlight.tags.className),\n                PropertyName: highlight.tags.propertyName,\n                \"CallExpression/MemberExpression/PropertyName\": highlight.tags.function(highlight.tags.propertyName),\n                Comment: highlight.tags.lineComment,\n                Number: highlight.tags.number,\n                String: highlight.tags.string,\n                FormatString: highlight.tags.special(highlight.tags.string),\n                UpdateOp: highlight.tags.updateOperator,\n                ArithOp: highlight.tags.arithmeticOperator,\n                BitOp: highlight.tags.bitwiseOperator,\n                CompareOp: highlight.tags.compareOperator,\n                AssignOp: highlight.tags.definitionOperator,\n                Ellipsis: highlight.tags.punctuation,\n                At: highlight.tags.meta,\n                \"( )\": highlight.tags.paren,\n                \"[ ]\": highlight.tags.squareBracket,\n                \"{ }\": highlight.tags.brace,\n                \".\": highlight.tags.derefOperator,\n                \", ;\": highlight.tags.separator\n            })\n        ],\n    }),\n    languageData: {\n        closeBrackets: { brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"'''\", '\"\"\"'] },\n        commentTokens: { line: \"#\" },\n        indentOnInput: /^\\s*([\\}\\]\\)]|else:|elif |except |finally:)$/\n    }\n});\n/**\nPython language support.\n*/\nfunction python() {\n    return new language.LanguageSupport(pythonLanguage);\n}\n\nexports.python = python;\nexports.pythonLanguage = pythonLanguage;\n\n};"],
"names":["shadow$provide","global","require","module","exports","indentBody","context","node","base","lineIndent","from","line","lineAt","pos","to","text","length","test","state","sliceDoc","textAfter","unit","Object","defineProperty","value","python$1","language","highlight","pythonLanguage","LRLanguage","define","parser","configure","props","indentNodeProp","add","Body","_a","continue","IfStatement","cx","baseIndent","TryStatement","delimitedIndent","closing","Script","exec","endBody","cur","lastChild","type","name","bodyIndent","foldNodeProp","foldInside","doc","styleTags","tags","modifier","controlKeyword","operatorKeyword","definitionKeyword","import","moduleKeyword","keyword","self","Boolean","bool","None","null","VariableName","variableName","function","definition","className","PropertyName","propertyName","Comment","lineComment","Number","number","String","string","FormatString","special","UpdateOp","updateOperator","ArithOp","arithmeticOperator","BitOp","bitwiseOperator","CompareOp","compareOperator","AssignOp","definitionOperator","Ellipsis","punctuation","At","meta","paren","squareBracket","brace","derefOperator","separator","languageData","closeBrackets","brackets","commentTokens","indentOnInput","python","LanguageSupport"]
}
