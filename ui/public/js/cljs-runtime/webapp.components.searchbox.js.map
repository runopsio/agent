{"version":3,"sources":["webapp/components/searchbox.cljs"],"mappings":"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","names":["webapp.components.searchbox/searchbox-icon","webapp.components.searchbox/no-results","webapp.components.searchbox/searchbox-list-icon","p__49868","map__49869","cljs.core/--destructure-map","cljs.core.get","webapp.components.searchbox/searchbox-item","item","display-key","meta-display-keys","selected","on-change","close-list","searchable-keys","meta-values-string","clojure.string.join","p1__49863#","cljs.core.map","cljs.core._EQ_","iter__4652__auto__","s__49873","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__49875","cljs.core/chunk-buffer","i__49874","vec__49878","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__49872","cljs.core/chunk-rest","vec__49881","cljs.core/first","cljs.core/cons","cljs.core/rest","item-key","item-value","p1__49866#","cljs.core/some","webapp.components.searchbox/search-options","options","pattern","p1__49886#","cljs.core.filter","clojure.string/includes?","clojure.string/replace","cljs.core/vals","cljs.core/select-keys","p__49888","map__49889","webapp.components.searchbox/main","list-status","reagent.core.atom","cljs.core/reset!","open-list","searched-options","input-value","p__49890","map__49891","size","name","label","list-classes","placeholder","clear?","loading?","on-select-result","on-change-results-cb","hide-results-list","on-focus","on-blur","lifecycle-iterable","cljs.core/deref","cljs.core/empty?","no-results?","or__4253__auto__","e","value","results","cljs.core/not","js/setTimeout","webapp.components.icon/regular","js/document","s__49900","b__49902","i__49901","iter__49899","option","cljs.core/chunk-first"],"sourcesContent":["(ns webapp.components.searchbox\n  (:require\n   [clojure.string :as string]\n   [reagent.core :as r]\n   [webapp.components.icon :as icon]))\n\n(defn- searchbox-icon []\n  [:svg {:class \"h-5 w-5 text-gray-400\"\n         :xmlns \"http://www.w3.org/2000/svg\"\n         :viewBox \"0 0 20 20\"\n         :fill \"none\"\n         :aria-hidden \"true\"}\n   [:circle {:cx \"8.5\"\n             :cy \"8.5\"\n             :r \"5.75\"\n             :stroke \"currentColor\"\n             :stroke-width \"1.5\"\n             :stroke-linecap \"round\"\n             :stroke-linejoin \"round\"}]\n   [:path {:d \"M17.25 17.25L13 13\"\n           :stroke \"currentColor\"\n           :stroke-width \"1.5\"\n           :stroke-linecap \"round\"\n           :stroke-linejoin \"round\"}]])\n\n(defn- no-results []\n  [:div {:class \"flex gap-regular items-center\"}\n   [:figure\n    {:class \"flex-shrink w-32 mx-auto p-regular\"}\n    [:img {:src \"/images/runops-illustrations/pc+monitor.svg\"\n           :class \"w-full\"}]]\n   [:div {:class \"flex-grow\"}\n    [:div {:class \"text-gray-700 text-sm font-bold\"}\n     \"No results with this criteria.\"]\n    [:div {:class \"text-gray-300 text-xs pb-x-small\"}\n     \"Maybe some typo?\"]\n    [:div {:class \"text-gray-500 text-xs\"}\n     \"We do not consider spaces, traces (-) or underscores (_).\"]]])\n\n(defn- searchbox-list-icon []\n  [:svg {:class \"h-5 w-5\"\n         :xmlns \"http://www.w3.org/2000/svg\"\n         :viewBox \"0 0 20 20\"\n         :fill \"currentColor\"\n         :aria-hidden \"true\"}\n   [:path {:fill-rule \"evenodd\"\n           :d \"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n           :clip-rule \"evenodd\"}]])\n\n(defn- searchbox-item [{:keys [item display-key meta-display-keys selected on-change close-list searchable-keys]}]\n  (let [meta-values-string (string/join \" \" (map #(str (% item)) meta-display-keys))]\n    [:li {:class (str \"relative select-none text-gray-900 \"\n                      \"py-2 pl-3 pr-9 text-xs \"\n                      \"hover:bg-gray-100 cursor-pointer \"\n                      (when (= (:value item) selected) \"bg-gray-100 cursor-default \"))\n          :on-click (fn []\n                      (on-change item)\n                      (close-list))\n          :role \"option\"\n          :tabIndex \"-1\"}\n     [:span {:class \"block truncate\"}\n      (display-key item)\n      (when meta-display-keys\n        [:span {:class \"text-gray-500 italic\"}\n         (str \" \" meta-values-string)])]\n     [:div {:class \"gap-small text-xxs\"}\n      [:span {:class \"font-bold text-gray-500 pr-x-small\"} \"{\"]\n      (for [[item-key item-value] item]\n        (when (some #(= item-key %) searchable-keys)\n          [:span {:key (str item-key item-value)\n                  :class \"flex-shrink gap-x-small whitespace-normal\"}\n           [:span {:class \"text-gray-500 pr-x-small\"} item-key]\n           [:span {:class \"font-bold text-gray-500 pr-x-small\"} item-value]]))\n      [:span {:class \"font-bold text-gray-500\"} \"}\"]]\n     (when (= (:value item) selected)\n       [:span {:class \"absolute inset-y-0 right-0 flex items-center pr-4 text-indigo-600\"}\n        [searchbox-list-icon]])]))\n\n(defn- search-options [options pattern searchable-keys]\n  (filter #(string/includes?\n            (string/replace (string/join \" \" (vals\n                                              (select-keys % searchable-keys)))\n                            #\"-|_\" \"\")\n            (string/replace pattern #\" |-|_\" \"\")) options))\n\n(defn main\n  \" SEARCHBOX component searches for an item with by a set of values from a shallow object.\n  EXAMPLE: given the map {:name :john :last-name :doe :nationality :brazilian}, every value (pointed by searchable-keys) is searchable and will point to its choosen key\n  size -> a variation property for a regular sized or a small one. Valid option is :small, if anything else is passed, it will consider the regular\n  name -> form name property;\n  label -> for adding a label to the combobox. If not provided, the <label> tag won't be rendered;\n  list-classes -> to provide some specific stylezation to the list of options, it is expected to be passed CSS classes;\n  placeholder -> placeholder form property for input;\n  clear? -> a boolean to set a clear first option in the list\n  loading? -> a boolean for managing a loading status in the search box list\n  selected -> a string with the selected value (see options);\n  on-select-result -> a function triggered whenever the user clicks on an result.\n  on-change-results-cb -> a callback function to be used on upperscope to have access to the results and manage anything that might be of the upperscope interest\n  hide-results-list -> a boolean used to do not show the results list. Usually useful with `on-change-results-cb` and the list is not necessary because the results are shown in the upperscope\n  on-focus -> a function that will be executed on input focus\n  on-blur -> a function that will be executed on input blur\n  options -> a list of hashmaps to be rendered searched. Example [{:name \\\"name\\\" :type \\\"type\\\" :review_type \\\"review_type\\\" :redact \\\"redact\\\"}]\n  display-key -> the key that will be used to display information in an user friendly way. This key must be from a valid key from options. Example :name\n  meta-display-keys -> meta information keys from a option that you want to put to the side of display-key. Example: [:name :type]\n  searchable-keys -> the keys from the options that you want to be searchable. Example: [:name :type :review_type :redact]\n  \"\n  [{:keys [options]}]\n\n  (let [list-status (r/atom :closed)\n        close-list #(reset! list-status :closed)\n        open-list #(reset! list-status :open)\n        searched-options (r/atom options)\n        input-value (r/atom nil)]\n    (fn [{:keys [size\n                 name\n                 label\n                 list-classes\n                 placeholder\n                 clear?\n                 loading?\n                 selected\n                 on-select-result\n                 on-change-results-cb\n                 hide-results-list\n                 on-focus\n                 on-blur\n                 options\n                 display-key\n                 meta-display-keys\n                 searchable-keys]}]\n      ;; lifecycle-iterable was created to manage first render.\n      ;; options is a value that gets always the right value, but search-options is from\n      ;; upperscope and needs iteration on events to be available. So, in first render\n      ;; and input-value empty we show `options`, otherwise we show search-options\n      (let [lifecycle-iterable (if (empty? @searched-options)\n                                 options\n                                 @searched-options)\n            no-results? (and (empty? @searched-options)\n                             (> (count @input-value) 0))]\n        [:div\n         (when label\n           [:label {:for name\n                    :class \"block text-sm font-medium text-gray-700 mb-x-small\"}\n            label])\n         [:div {:class \"relative\"}\n          [:input {:class (str \"w-full rounded-md border shadow-sm h-12 \"\n                               \"border-gray-300 bg-white \"\n                               \"pl-3 pr-12 \"\n                               (if (= size :small) \"py-1 \" \"py-3 \")\n                               \"focus:border-indigo-500 focus:outline-none \"\n                               \"focus:ring-1 focus:ring-indigo-500 \"\n                               \"sm:text-sm \")\n                   :placeholder placeholder\n                   :id name\n                   :name name\n                   :value (or @input-value selected)\n                   :autoComplete \"off\"\n                   :on-keyDown (fn [e]\n                                 (when (= (.-keyCode e) 27)\n                                   (close-list)))\n                   :on-change (fn [e]\n                                (let [value (-> e .-target .-value)\n                                      results (search-options options\n                                                              value\n                                                              searchable-keys)]\n                                  (reset! input-value value)\n                                  (when (not loading?)\n                                    (reset! searched-options results)\n                                    (when on-change-results-cb\n                                      (on-change-results-cb results)))))\n                 ;; the line below had to be that way because blur event is\n                 ;; triggered before the change, so the list stay in there long\n                 ;; enough so the clicked item can be captured before it's unmounted\n                   :on-blur (fn []\n                              (when on-blur (on-blur))\n                              (js/setTimeout close-list 150))\n                   :on-focus (fn []\n                               (when on-focus (on-focus))\n                               (open-list)\n                               (reset! searched-options options))}]\n          (when loading?\n            [:div {:class \"absolute w-4 h-4 inset-y-4 right-10 opacity-50 animate-spin origin-center\"}\n             [icon/regular {:size 4\n                            :icon-name \"loader-circle\"}]])\n          [:button {:type \"button\"\n                    :on-click (fn []\n                                (open-list)\n                                (.focus (. js/document (getElementById name))))\n                    :class (str \"absolute flex items-center rounded-r-md \"\n                                \"inset-y-0 right-0 px-2 focus:outline-none \")}\n           [searchbox-icon]]\n          (when (and\n                 (= @list-status :open)\n                 (not hide-results-list))\n            [:ul {:class (str \"absolute overflow-auto rounded-md bg-white \"\n                              \"shadow-lg ring-1 ring-black ring-opacity-5 \"\n                              \"z-10 mt-1 max-h-80 w-full py-1 \"\n                              \"text-base focus:outline-none sm:text-sm \"\n                              (when list-classes list-classes))\n                  :id \"options\"\n                  :role \"listbox\"}\n             (when clear?\n               [:li {:class (str \"relative select-none text-gray-500 \"\n                                 \"py-1 pl-3 pr-9 text-xs \"\n                                 \"hover:bg-gray-100 cursor-pointer \"\n                                 \"border-b\")\n                     :on-click (fn []\n                                 (on-select-result \"\")\n                                 (reset! input-value \"\")\n                                 (close-list))\n                     :role \"option\"\n                     :tabIndex \"-1\"}\n                [:span {:class \"block truncate\"}\n                 \"Clear\"]])\n             (when no-results?\n               [no-results])\n             (when loading?\n               [:div {:class \"text-xs text-gray-500 italic p-small\"}\n                \"loading...\"])\n             (when (and (not loading?)\n                        (not no-results?))\n               (for [option lifecycle-iterable]\n                 ^{:key (:name option)}\n                 [searchbox-item {:item option\n                                  :meta-display-keys meta-display-keys\n                                  :display-key display-key\n                                  :searchable-keys searchable-keys\n                                  :on-change (fn [value]\n                                               (reset! input-value (display-key value))\n                                               (on-select-result value))\n                                  :close-list close-list\n                                  :selected selected}]))])]]))))\n"]}