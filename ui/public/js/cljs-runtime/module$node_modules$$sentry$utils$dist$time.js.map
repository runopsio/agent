{
"version":3,
"file":"module$node_modules$$sentry$utils$dist$time.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/@sentry/utils/dist/time.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$utils$dist$time\"] = function(global,require,module,exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar global_1 = require(\"./global\");\nvar node_1 = require(\"./node\");\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\nvar dateTimestampSource = {\n    nowSeconds: function () { return Date.now() / 1000; },\n};\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction getBrowserPerformance() {\n    var performance = global_1.getGlobalObject().performance;\n    if (!performance || !performance.now) {\n        return undefined;\n    }\n    // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n    //\n    // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n    // performance.now() gives a date arbitrarily in the past.\n    //\n    // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n    // undefined.\n    //\n    // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n    // interact with data coming out of performance entries.\n    //\n    // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n    // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n    // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n    // observed skews that can be as long as days, weeks or months.\n    //\n    // See https://github.com/getsentry/sentry-javascript/issues/2590.\n    //\n    // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n    // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n    // transactions of long-lived web pages.\n    var timeOrigin = Date.now() - performance.now();\n    return {\n        now: function () { return performance.now(); },\n        timeOrigin: timeOrigin,\n    };\n}\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\nfunction getNodePerformance() {\n    try {\n        var perfHooks = node_1.dynamicRequire(module, 'perf_hooks');\n        return perfHooks.performance;\n    }\n    catch (_) {\n        return undefined;\n    }\n}\n/**\n * The Performance API implementation for the current platform, if available.\n */\nvar platformPerformance = node_1.isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\nvar timestampSource = platformPerformance === undefined\n    ? dateTimestampSource\n    : {\n        nowSeconds: function () { return (platformPerformance.timeOrigin + platformPerformance.now()) / 1000; },\n    };\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexports.dateTimestampInSeconds = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexports.timestampInSeconds = timestampSource.nowSeconds.bind(timestampSource);\n// Re-exported with an old name for backwards-compatibility.\nexports.timestampWithMs = exports.timestampInSeconds;\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\nexports.usingPerformanceAPI = platformPerformance !== undefined;\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexports.browserPerformanceTimeOrigin = (function () {\n    // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n    // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n    // data as reliable if they are within a reasonable threshold of the current time.\n    var performance = global_1.getGlobalObject().performance;\n    if (!performance || !performance.now) {\n        exports._browserPerformanceTimeOriginMode = 'none';\n        return undefined;\n    }\n    var threshold = 3600 * 1000;\n    var performanceNow = performance.now();\n    var dateNow = Date.now();\n    // if timeOrigin isn't available set delta to threshold so it isn't used\n    var timeOriginDelta = performance.timeOrigin\n        ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n        : threshold;\n    var timeOriginIsReliable = timeOriginDelta < threshold;\n    // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n    // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n    // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n    // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n    // Date API.\n    // eslint-disable-next-line deprecation/deprecation\n    var navigationStart = performance.timing && performance.timing.navigationStart;\n    var hasNavigationStart = typeof navigationStart === 'number';\n    // if navigationStart isn't available set delta to threshold so it isn't used\n    var navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n    var navigationStartIsReliable = navigationStartDelta < threshold;\n    if (timeOriginIsReliable || navigationStartIsReliable) {\n        // Use the more reliable time origin\n        if (timeOriginDelta <= navigationStartDelta) {\n            exports._browserPerformanceTimeOriginMode = 'timeOrigin';\n            return performance.timeOrigin;\n        }\n        else {\n            exports._browserPerformanceTimeOriginMode = 'navigationStart';\n            return navigationStart;\n        }\n    }\n    // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n    exports._browserPerformanceTimeOriginMode = 'dateNow';\n    return dateNow;\n})();\n//# sourceMappingURL=time.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","getBrowserPerformance","performance","global_1","getGlobalObject","now","timeOrigin","Date","Object","defineProperty","value","node_1","dateTimestampSource","nowSeconds","isNodeEnv","dynamicRequire","perfHooks","_","platformPerformance","timestampSource","undefined","dateTimestampInSeconds","bind","timestampInSeconds","timestampWithMs","usingPerformanceAPI","browserPerformanceTimeOrigin","performanceNow","dateNow","timeOriginDelta","Math","abs","threshold","navigationStart","timing","navigationStartDelta","_browserPerformanceTimeOriginMode"]
}
