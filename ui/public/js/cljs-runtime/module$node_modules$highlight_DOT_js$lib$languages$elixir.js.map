{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$elixir.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/highlight_DOT_js/lib/languages/elixir.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$elixir\"] = function(global,require,module,exports) {\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: Elixir\nAuthor: Josh Adams <josh@isotope11.com>\nDescription: language definition for Elixir source code files (.ex and .exs).  Based on ruby language support.\nCategory: functional\nWebsite: https://elixir-lang.org\n*/\n\n/** @type LanguageFn */\nfunction elixir(hljs) {\n  const ELIXIR_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_.]*(!|\\\\?)?';\n  const ELIXIR_METHOD_RE = '[a-zA-Z_]\\\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\\\*\\\\*|[-/+%^&*~`|]|\\\\[\\\\]=?';\n  const KEYWORDS = [\n    \"after\",\n    \"alias\",\n    \"and\",\n    \"case\",\n    \"catch\",\n    \"cond\",\n    \"defstruct\",\n    \"do\",\n    \"else\",\n    \"end\",\n    \"fn\",\n    \"for\",\n    \"if\",\n    \"import\",\n    \"in\",\n    \"not\",\n    \"or\",\n    \"quote\",\n    \"raise\",\n    \"receive\",\n    \"require\",\n    \"reraise\",\n    \"rescue\",\n    \"try\",\n    \"unless\",\n    \"unquote\",\n    \"unquote_splicing\",\n    \"use\",\n    \"when\",\n    \"with|0\"\n  ];\n  const LITERALS = [\n    \"false\",\n    \"nil\",\n    \"true\"\n  ];\n  const KWS = {\n    $pattern: ELIXIR_IDENT_RE,\n    keyword: KEYWORDS,\n    literal: LITERALS\n  };\n  const SUBST = {\n    className: 'subst',\n    begin: /#\\{/,\n    end: /\\}/,\n    keywords: KWS\n  };\n  const NUMBER = {\n    className: 'number',\n    begin: '(\\\\b0o[0-7_]+)|(\\\\b0b[01_]+)|(\\\\b0x[0-9a-fA-F_]+)|(-?\\\\b[0-9][0-9_]*(\\\\.[0-9_]+([eE][-+]?[0-9]+)?)?)',\n    relevance: 0\n  };\n  // TODO: could be tightened\n  // https://elixir-lang.readthedocs.io/en/latest/intro/18.html\n  // but you also need to include closing delemeters in the escape list per\n  // individual sigil mode from what I can tell,\n  // ie: \\} might or might not be an escape depending on the sigil used\n  const ESCAPES_RE = /\\\\[\\s\\S]/;\n  // const ESCAPES_RE = /\\\\[\"'\\\\abdefnrstv0]/;\n  const BACKSLASH_ESCAPE = {\n    match: ESCAPES_RE,\n    scope: \"char.escape\",\n    relevance: 0\n  };\n  const SIGIL_DELIMITERS = '[/|([{<\"\\']';\n  const SIGIL_DELIMITER_MODES = [\n    {\n      begin: /\"/,\n      end: /\"/\n    },\n    {\n      begin: /'/,\n      end: /'/\n    },\n    {\n      begin: /\\//,\n      end: /\\//\n    },\n    {\n      begin: /\\|/,\n      end: /\\|/\n    },\n    {\n      begin: /\\(/,\n      end: /\\)/\n    },\n    {\n      begin: /\\[/,\n      end: /\\]/\n    },\n    {\n      begin: /\\{/,\n      end: /\\}/\n    },\n    {\n      begin: /</,\n      end: />/\n    }\n  ];\n  const escapeSigilEnd = (end) => {\n    return {\n      scope: \"char.escape\",\n      begin: concat(/\\\\/, end),\n      relevance: 0\n    };\n  };\n  const LOWERCASE_SIGIL = {\n    className: 'string',\n    begin: '~[a-z]' + '(?=' + SIGIL_DELIMITERS + ')',\n    contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,\n      {\n        contains: [\n          escapeSigilEnd(x.end),\n          BACKSLASH_ESCAPE,\n          SUBST\n        ]\n      }\n    ))\n  };\n\n  const UPCASE_SIGIL = {\n    className: 'string',\n    begin: '~[A-Z]' + '(?=' + SIGIL_DELIMITERS + ')',\n    contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,\n      {\n        contains: [ escapeSigilEnd(x.end) ]\n      }\n    ))\n  };\n\n  const REGEX_SIGIL = {\n    className: 'regex',\n    variants: [\n      {\n        begin: '~r' + '(?=' + SIGIL_DELIMITERS + ')',\n        contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,\n          {\n            end: concat(x.end, /[uismxfU]{0,7}/),\n            contains: [\n              escapeSigilEnd(x.end),\n              BACKSLASH_ESCAPE,\n              SUBST\n            ]\n          }\n        ))\n      },\n      {\n        begin: '~R' + '(?=' + SIGIL_DELIMITERS + ')',\n        contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,\n          {\n            end: concat(x.end, /[uismxfU]{0,7}/),\n            contains: [ escapeSigilEnd(x.end) ]\n          })\n        )\n      }\n    ]\n  };\n\n  const STRING = {\n    className: 'string',\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      SUBST\n    ],\n    variants: [\n      {\n        begin: /\"\"\"/,\n        end: /\"\"\"/\n      },\n      {\n        begin: /'''/,\n        end: /'''/\n      },\n      {\n        begin: /~S\"\"\"/,\n        end: /\"\"\"/,\n        contains: [] // override default\n      },\n      {\n        begin: /~S\"/,\n        end: /\"/,\n        contains: [] // override default\n      },\n      {\n        begin: /~S'''/,\n        end: /'''/,\n        contains: [] // override default\n      },\n      {\n        begin: /~S'/,\n        end: /'/,\n        contains: [] // override default\n      },\n      {\n        begin: /'/,\n        end: /'/\n      },\n      {\n        begin: /\"/,\n        end: /\"/\n      }\n    ]\n  };\n  const FUNCTION = {\n    className: 'function',\n    beginKeywords: 'def defp defmacro defmacrop',\n    end: /\\B\\b/, // the mode is ended by the title\n    contains: [\n      hljs.inherit(hljs.TITLE_MODE, {\n        begin: ELIXIR_IDENT_RE,\n        endsParent: true\n      })\n    ]\n  };\n  const CLASS = hljs.inherit(FUNCTION, {\n    className: 'class',\n    beginKeywords: 'defimpl defmodule defprotocol defrecord',\n    end: /\\bdo\\b|$|;/\n  });\n  const ELIXIR_DEFAULT_CONTAINS = [\n    STRING,\n    REGEX_SIGIL,\n    UPCASE_SIGIL,\n    LOWERCASE_SIGIL,\n    hljs.HASH_COMMENT_MODE,\n    CLASS,\n    FUNCTION,\n    {\n      begin: '::'\n    },\n    {\n      className: 'symbol',\n      begin: ':(?![\\\\s:])',\n      contains: [\n        STRING,\n        {\n          begin: ELIXIR_METHOD_RE\n        }\n      ],\n      relevance: 0\n    },\n    {\n      className: 'symbol',\n      begin: ELIXIR_IDENT_RE + ':(?!:)',\n      relevance: 0\n    },\n    NUMBER,\n    {\n      className: 'variable',\n      begin: '(\\\\$\\\\W)|((\\\\$|@@?)(\\\\w+))'\n    },\n    {\n      begin: '->'\n    }\n  ];\n  SUBST.contains = ELIXIR_DEFAULT_CONTAINS;\n\n  return {\n    name: 'Elixir',\n    aliases: ['ex', 'exs'],\n    keywords: KWS,\n    contains: ELIXIR_DEFAULT_CONTAINS\n  };\n}\n\nmodule.exports = elixir;\n\n};"],
"names":["shadow$provide","global","require","module","exports","concat","args","map","x","source","join","joined","elixir","hljs","KWS","$pattern","ELIXIR_IDENT_RE","keyword","KEYWORDS","literal","LITERALS","SUBST","className","begin","end","keywords","BACKSLASH_ESCAPE","match","ESCAPES_RE","scope","relevance","SIGIL_DELIMITER_MODES","escapeSigilEnd","LOWERCASE_SIGIL","contains","inherit","UPCASE_SIGIL","REGEX_SIGIL","variants","STRING","FUNCTION","beginKeywords","TITLE_MODE","endsParent","CLASS","ELIXIR_DEFAULT_CONTAINS","HASH_COMMENT_MODE","ELIXIR_METHOD_RE","NUMBER","name","aliases"]
}
