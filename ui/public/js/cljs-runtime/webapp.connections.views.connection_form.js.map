{"version":3,"sources":["webapp/connections/views/connection_form.cljs"],"mappings":"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","names":["webapp.connections.views.connection-form/section","head","text","child","webapp.components.divider/main","webapp.components.headings/h3","js/webapp","js/webapp.connections","js/webapp.connections.views","js/webapp.connections.views.connection-form","js/webapp.connections.views.connection-form.header-text","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__30315","cljs.core/MultiFn","cljs.core.symbol","webapp.connections.views.connection-form/header-text","cljs.core/identity","_","js/webapp.connections.views.connection-form.action-button","fexpr__30316","webapp.connections.views.connection-form/action-button","js/webapp.connections.views.connection-form.dispatch-form","fexpr__30317","webapp.connections.views.connection-form/dispatch-form","form-fields","re-frame.core/dispatch","webapp.connections.views.connection-form/get-config-keys","key","webapp.connections.constants/connection-configs-required","webapp.connections.views.connection-form/add-new-configs","config-map","config-key","config-value","cljs.core/empty?","cljs.core.swap_BANG_","cljs.core/conj","p__30320","map__30321","cljs.core/--destructure-map","webapp.connections.views.connection-form/config->inputs","value","index","config","key-val","reagent.core.atom","value-val","save","k","v","cljs.core/assoc-in","p1__30318#","cljs.core/deref","p1__30319#","webapp.components.forms/input","cljs.core/reset!","webapp.connections.views.connection-form/config-inputs-for","cljs.core.doall","iter__4652__auto__","s__30323","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__30325","cljs.core/chunk-buffer","i__30324","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30322","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.range","webapp.connections.views.connection-form/config->json-stringify","configs","cljs.core.filter","p__30328","map__30329","clojure.string/blank?","cljs.core.map","p__30326","map__30327","cljs.core.reduce","cljs.core/into","cljs.core/clj->js","js/JSON","webapp.connections.views.connection-form/json-stringify->config","cljs.core.js__GT_clj","cljs.core.mapv","p__30330","vec__30331","cljs.core.nth","webapp.connections.views.connection-form/form","connection","feature-flags","re_frame.core.subscribe","agents","name","or__4253__auto__","description","connection-type","override-type","templates_only","review-type","channel-name","reviewers","redact","secret-provider","secret-path","groups","webapp.formatters/list-to-comma-string","secrets-host","cljs.core._EQ_","change-connection-type","cljs.core.keyword","agent-token","agent-default","p1__30334#","agent-tag","agents-options->get-selected","selected","p1__30335#","form-type","p1__30339#","p1__30340#","p1__30345#","agents-options","p__30348","map__30349","tags","status","agent-selected-status","webapp.http.runops-api/request","res","webapp.components.headings/h2","e","groups-list","webapp.formatters/comma-string-to-list","configurations","cljs.core.conj","cljs.core.merge","G__30350","js/Error","p1__30336#","p1__30337#","p1__30338#","webapp.formatters/replace-empty-space->dash","webapp.components.forms/select","webapp.connections.constants/connections-types-list","webapp.components.forms/textarea","webapp.components.headings/h4","p1__30341#","p1__30342#","p1__30343#","cljs.core.not_EQ_","p1__30344#","webapp.connections.views.secrets-management/main","webapp.components.combobox/main","cljs.core/not-empty","webapp.components.button/secondary","webapp.components.button/primary","webapp.connections.views.connection-form/main","G__30351","cljs.core/Keyword","cljs.core/chunk-first"],"sourcesContent":["(ns webapp.connections.views.connection-form\n  (:require [clojure.string :as cs]\n            [re-frame.core :as rf]\n            [reagent.core :as r]\n            [webapp.components.button :as button]\n            [webapp.components.combobox :as combobox]\n            [webapp.components.divider :as divider]\n            [webapp.components.forms :as forms]\n            [webapp.components.headings :as h]\n            [webapp.connections.constants :as constants]\n            [webapp.connections.events :as events]\n            [webapp.connections.views.secrets-management :as secrets-management]\n            [webapp.formatters :as f]\n            [webapp.http.runops-api :as runops-api]\n            [webapp.subs :as subs]))\n\n(defn section [head text child]\n  [:section\n   [divider/main]\n   [:div {:class \"grid grid-cols-3 gap-large my-large\"}\n    [:div {:class \"col-span-1\"}\n     [h/h3 head {:class \"text-gray-800\"}]\n     [:small {:class \"block mb-regular text-gray-600\"} text]]\n    [:div {:class \"col-span-2\"}\n     child]]])\n\n(defmulti header-text identity)\n(defmethod header-text :update [_] \"Update connection\")\n(defmethod header-text :default [_] \"Create a new Connection\")\n\n(defmulti action-button identity)\n(defmethod action-button :update [_] \"Update\")\n(defmethod action-button :default [_] \"Create\")\n\n(defmulti dispatch-form identity)\n(defmethod dispatch-form :update\n  [_ form-fields]\n  (rf/dispatch [::events/update-connection form-fields]))\n(defmethod dispatch-form :create\n  [_ form-fields]\n  (rf/dispatch [::events/create-connection form-fields]))\n\n(defn get-config-keys\n  [key]\n  (get constants/connection-configs-required key))\n\n(defn add-new-configs\n  [config-map config-key config-value]\n\n  (if-not (or (empty? config-key) (empty? config-value))\n    (swap! config-map conj {:key config-key :value config-value})\n    nil))\n\n(defn config->inputs\n  [{:keys [key value]} index config]\n  (let [key-val (r/atom key)\n        value-val (r/atom value)\n        save (fn [k v] (swap! config assoc-in [index k] v))]\n    (fn []\n      [:<>\n       [forms/input {:classes \"whitespace-pre overflow-x\"\n                     :on-change #(reset! key-val (-> % .-target .-value))\n                     :on-blur #(save :key @key-val)\n                     :value @key-val}]\n       [forms/input {:classes \"whitespace-pre overflow-x\"\n                     :on-change #(reset! value-val (-> % .-target .-value))\n                     :on-blur #(save :value @value-val)\n                     :type \"password\"\n                     :value @value-val}]])))\n\n(defn config-inputs-for\n  [config]\n  (fn []\n    (doall\n     (for [index (range (count @config))]\n       ^{:key (get @config index)} [config->inputs (get @config index) index config]))))\n\n(defn config->json-stringify\n  [configs]\n  (->> configs\n       (filter (fn [{:keys [key value]}]\n                 (not (or (cs/blank? key) (cs/blank? value)))))\n       (map (fn [{:keys [key value]}] {key value}))\n       (reduce into {})\n       (clj->js)\n       (.stringify js/JSON)))\n\n(defn json-stringify->config\n  [configs]\n  (if (or (cs/blank? configs) (nil? configs))\n    {}\n    (->> configs\n         (.parse js/JSON)\n         (js->clj)\n         (mapv (fn [[key value]] {:key key :value value})))))\n\n(defn form\n  \"Receives two arguments.\n  connection -> the connection to updated. You can send it as nil when form-type is :create\n  form-type -> :update or :create; when :update, it's required to send connection\"\n  [connection _]\n  (let [feature-flags (rf/subscribe [:feature-flags])\n        agents (rf/subscribe [:agents])\n        name (r/atom (or (:name connection) \"\"))\n        description (r/atom (or (:message connection) \"\"))\n        connection-type (r/atom (or (:type connection) \"bash\"))\n        override-type (r/atom (if (:override_type connection) \"Allow\" \"Do not allow\"))\n        templates_only (r/atom (if (:templates_only connection) \"Allow\" \"Do not allow\"))\n        review-type (r/atom (or (:review_type connection) \"none\"))\n        channel-name (r/atom (or (:channel_name connection) \"\"))\n        reviewers (r/atom (or (:reviewers connection) \"\"))\n        redact (r/atom (or (:redact connection) \"all\"))\n        secret-provider (r/atom (or (:secret_provider connection) \"\"))\n        secret-path (r/atom (or (:secret_path connection) \"ENV_CONFIG\"))\n        config (r/atom (if (empty? (:config connection)) (get-config-keys :bash) (json-stringify->config (:config connection))))\n        config-key (r/atom (or (:config-key connection) \"\"))\n        config-value (r/atom (or (:config-value connection) \"\"))\n        groups (r/atom (or (f/list-to-comma-string (:groups connection)) \"\"))\n        secrets-host (r/atom (if (= \"runops\" (:secret_provider connection)) \"runops\" \"self\"))\n        change-connection-type (fn [value]\n                                 (reset! connection-type value)\n                                 (reset! config (get-config-keys (keyword value))))\n        agent-token (r/atom \"\")\n        agent-default (first (filter #(= (:tags %) (or \"runops-hosted\" \"test\")) @agents))\n        agent-tag (r/atom (or (:tags connection)\n                              (:tags agent-default)\n                              (if (cs/blank? (:tags (first @agents)))\n                                \"unnamed\"\n                                (:tags (first @agents)))))\n        agents-options->get-selected (fn [agents selected] (first (filter #(= (:value %) selected) agents)))]\n\n    (fn [_ form-type]\n      (let [agents-options (map (fn [{:keys [tags status]}] {:value (if (cs/blank? tags) \"unnamed\" tags)\n                                                             :text (if (cs/blank? tags) \"unnamed\" tags)\n                                                             :status status}) @agents)\n            agent-selected-status (:status (agents-options->get-selected agents-options @agent-tag))]\n        (when @feature-flags (rf/dispatch [:settings->get-agents (if (:agents-events @feature-flags) :new :vintage)]))\n        (runops-api/request {:method \"GET\"\n                             :uri \"/v1/orgs\"\n                             :on-failure (fn [_]\n                                           (reset! agent-token \"\"))\n                             :on-success (fn [res]\n                                           (reset! agent-token (:agents_token res)))})\n        [:div {:class \"px-large\"}\n         [h/h2 (header-text form-type) {:class \"mb-4\"}]\n         [:form\n          {:class \"mb-regular\"\n           :on-submit (fn [e]\n                        (.preventDefault e)\n                        (let [groups-list (f/comma-string-to-list @groups)\n                              configurations (conj @config {:key @config-key :value @config-value})]\n                          (dispatch-form form-type\n                                         (merge {:name @name\n                                                 :message @description\n                                                 :type @connection-type\n                                                 :review_type @review-type\n                                                 :channel_name @channel-name\n                                                 :override_type (if (= @override-type \"Allow\") true false)\n                                                 :templates_only (if (= @templates_only \"Allow\") true false)\n                                                 :reviewers @reviewers\n                                                 :tags (if (= @agent-tag \"unnamed\") nil @agent-tag)\n                                                 :redact @redact\n                                                 :groups (if (empty? groups-list) nil groups-list)}\n                                                (case @secrets-host\n                                                  \"runops\" {:secret_provider \"runops\"\n                                                            :config (config->json-stringify configurations)}\n                                                  \"self\" {:secret_provider @secret-provider\n                                                          :secret_path @secret-path\n                                                          :config nil})))))}\n          (section\n           \"Informations\"\n           \"General informations of your connection\"\n           [:div {:class \"grid grid-cols-4 gap-x-regular\"}\n            [:div {:class \"col-span-2\"}\n             [forms/input {:label \"Name\"\n                           :on-change #(reset! name (f/replace-empty-space->dash (-> % .-target .-value)))\n                           :placeholder \"Connection name\"\n                           :required true\n                           :disabled (= form-type :update)\n                           :value @name}]]\n\n            [:div {:class \"col-span-2\"}\n             [forms/select {:label \"connection type\"\n                            :on-change #(change-connection-type (-> % .-target .-value))\n                            :selected @connection-type\n                            :required true\n                            :options constants/connections-types-list}]]\n\n            [:div {:class \"col-span-3\"}\n             [forms/textarea {:label \"Description\"\n                              :on-change #(reset! description (-> % .-target .-value))\n                              :placeholder \"Add a description to your connection\"\n                              :rows 2\n                              :value @description}]]])\n\n          [section\n           \"Permission management\"\n           \"Management who can access the connection and the behavior of task's review in this connection\"\n           [:<>\n            [:div {:class \"grid grid-cols-2 gap-x-regular mb-regular\"}\n             [:div {:class \"col-span-2 mb-regular\"}\n              [h/h4 \"Access control\"]]\n\n             [:div {:class \"col-span-1\"}\n              [forms/input {:label \"Groups\"\n                            :on-change #(reset! groups (-> % .-target .-value))\n                            :placeholder \"Comma separated string\"\n                            :value @groups}]]\n\n             [:div {:class \"col-span-1\"}\n              [forms/select {:label \"Allow run only in templates\"\n                             :on-change #(reset! templates_only (-> % .-target .-value))\n                             :selected @templates_only\n                             :required true\n                             :options [{:text \"Allow\" :value \"Allow\"}\n                                       {:text \"Do not allow\" :value \"Do not allow\"}]}]]]\n\n            [:div {:class \"grid grid-cols-2 gap-x-regular mb-regular\"}\n             [:div {:class \"col-span-2 mb-regular\"}\n              [h/h4 \"Review control\"]]\n\n             (forms/select {:label \"Who approves\"\n                            :on-change #(do\n                                          (reset! review-type (-> % .-target .-value))\n                                          (reset! reviewers \"\")\n                                          (reset! channel-name \"\"))\n                            :selected @review-type\n                            :options [{:value \"none\" :text \"none\"}\n                                      {:value \"anyone\" :text \"anyone\"}\n                                      {:value \"team\" :text \"groups\"}]})\n\n             (when (= @review-type \"team\")\n               [forms/input {:label \"Reviewer's groups\"\n                             :on-change #(reset! reviewers (-> % .-target .-value))\n                             :placeholder \"Comma separated string\"\n                             :value @reviewers}])\n\n             (when (not= @review-type \"none\")\n               [forms/input {:label \"Slack channel name\"\n                             :on-change #(reset! channel-name (-> % .-target .-value))\n                             :placeholder \"Slack channel name\"\n                             :value @channel-name}])]\n\n            [:div {:class \"grid grid-cols-2 gap-x-regular mb-regular\"}\n             [:div {:class \"col-span-2 mb-regular\"}\n              [h/h4 \"Data control\"]]\n\n             [:div.col-span-1\n              (forms/select {:label \"Redact sensitive data\"\n                             :on-change #(reset! redact (-> % .-target .-value))\n                             :selected @redact\n                             :options [{:value \"all\" :text \"all\"}\n                                       {:value \"none\" :text \"none\"}]})]]\n            [:div {:class \"grid grid-cols-2 mb-regular\"}\n             [:header {:class \"col-span-2 mb-regular\"}\n              [h/h4 \"Connection type restriction\"]\n              [:span {:class \"text-xs text-gray-600\"}\n               (str \"You can configure so people won't be able to run queries \"\n                    \"that are not the exact same type of this connection\")]]\n             [:div {:class \"col-span-1\"}\n              [forms/select {:label \"Allow queries with any type\"\n                             :on-change #(reset! override-type (-> % .-target .-value))\n                             :selected @override-type\n                             :required true\n                             :options [{:text \"Allow\" :value \"Allow\"}\n                                       {:text \"Do not allow\" :value \"Do not allow\"}]}]]]]]\n\n          (section\n           \"Secrets management\"\n           \"Choose your host and set your secret's configurations\"\n           [secrets-management/main\n            {:on-change->secrets-host-ui (fn [value] (reset! secrets-host value))\n             :on-change->secret-provider (fn [value] (reset! secret-provider value))\n             :on-change->secret-path (fn [value] (reset! secret-path value))\n             :on-change->config-key (fn [value] (reset! config-key value))\n             :on-change->config-value (fn [value] (reset! config-value value))\n             :on-click->add-more #(do\n                                    (add-new-configs config @config-key @config-value)\n                                    (reset! config-value \"\")\n                                    (reset! config-key \"\"))\n             :secrets-host-ui @secrets-host\n             :secret-provider @secret-provider\n             :secret-provider-disabled? false\n             :secret-path @secret-path\n             :secret-path-disabled? false\n             :config-key @config-key\n             :config-value @config-value\n             :configs @config\n             :component->config-inputs (config-inputs-for config)\n             :agent-token @agent-token\n             :agent-tag @agent-tag}])\n\n          (section\n           \"Agents\"\n           \"Select the agent for your connection\"\n           [:div {:class \"grid grid-cols-2 gap-regular mb-regular items-baseline\"}\n            [:div\n             [combobox/main {:options agents-options\n                             :placeholder \"Type\"\n                             :name \"connection-type\"\n                             :clear? true\n                             :selected @agent-tag\n                             :required? true\n                             :on-change (fn [v]\n                                          (reset! agent-tag v))}]\n             (when (not-empty @agent-tag) [:small {:class (str \"block p-1 \"\n                                                               (if (= agent-selected-status \"UP\")\n                                                                 \"text-green-500\"\n                                                                 \"text-red-500\"))}\n                                           (str \"This agent is \" agent-selected-status)])]])\n\n          [section\n           \"\"\n           \"\"\n           [:div {:class \"grid grid-cols-2 gap-x-regular\"}\n            (button/secondary {:text \"Back\"\n                               :on-click #(rf/dispatch [:navigate :connections])})\n            (button/primary {:text (action-button form-type)\n                             :type \"submit\"})]]]]))))\n\n(defn main [form-type]\n  (let [connection @(rf/subscribe [::subs/updating-connection])]\n    (case form-type\n      :create [form nil :create]\n      :update (if (true? (:loading connection))\n                nil\n                [form (:data connection) :update]))))\n"]}