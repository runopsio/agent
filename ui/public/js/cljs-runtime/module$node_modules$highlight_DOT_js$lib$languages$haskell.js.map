{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$haskell.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/highlight_DOT_js/lib/languages/haskell.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$haskell\"] = function(global,require,module,exports) {\n/*\nLanguage: Haskell\nAuthor: Jeremy Hull <sourdrums@gmail.com>\nContributors: Zena Treep <zena.treep@gmail.com>\nWebsite: https://www.haskell.org\nCategory: functional\n*/\n\nfunction haskell(hljs) {\n  const COMMENT = {\n    variants: [\n      hljs.COMMENT('--', '$'),\n      hljs.COMMENT(\n        /\\{-/,\n        /-\\}/,\n        {\n          contains: ['self']\n        }\n      )\n    ]\n  };\n\n  const PRAGMA = {\n    className: 'meta',\n    begin: /\\{-#/,\n    end: /#-\\}/\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: '^#',\n    end: '$'\n  };\n\n  const CONSTRUCTOR = {\n    className: 'type',\n    begin: '\\\\b[A-Z][\\\\w\\']*', // TODO: other constructors (build-in, infix).\n    relevance: 0\n  };\n\n  const LIST = {\n    begin: '\\\\(',\n    end: '\\\\)',\n    illegal: '\"',\n    contains: [\n      PRAGMA,\n      PREPROCESSOR,\n      {\n        className: 'type',\n        begin: '\\\\b[A-Z][\\\\w]*(\\\\((\\\\.\\\\.|,|\\\\w+)\\\\))?'\n      },\n      hljs.inherit(hljs.TITLE_MODE, {\n        begin: '[_a-z][\\\\w\\']*'\n      }),\n      COMMENT\n    ]\n  };\n\n  const RECORD = {\n    begin: /\\{/,\n    end: /\\}/,\n    contains: LIST.contains\n  };\n\n  /* See:\n\n     - https://www.haskell.org/onlinereport/lexemes.html\n     - https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/binary_literals.html\n     - https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/numeric_underscores.html\n     - https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/hex_float_literals.html\n\n  */\n  const decimalDigits = '([0-9]_*)+';\n  const hexDigits = '([0-9a-fA-F]_*)+';\n  const binaryDigits = '([01]_*)+';\n  const octalDigits = '([0-7]_*)+';\n\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      // decimal floating-point-literal (subsumes decimal-literal)\n      {\n        match: `\\\\b(${decimalDigits})(\\\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\\\b`\n      },\n      // hexadecimal floating-point-literal (subsumes hexadecimal-literal)\n      {\n        match: `\\\\b0[xX]_*(${hexDigits})(\\\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\\\b`\n      },\n      // octal-literal\n      {\n        match: `\\\\b0[oO](${octalDigits})\\\\b`\n      },\n      // binary-literal\n      {\n        match: `\\\\b0[bB](${binaryDigits})\\\\b`\n      }\n    ]\n  };\n\n  return {\n    name: 'Haskell',\n    aliases: ['hs'],\n    keywords:\n      'let in if then else case of where do module import hiding ' +\n      'qualified type data newtype deriving class instance as default ' +\n      'infix infixl infixr foreign export ccall stdcall cplusplus ' +\n      'jvm dotnet safe unsafe family forall mdo proc rec',\n    contains: [\n      // Top-level constructions.\n      {\n        beginKeywords: 'module',\n        end: 'where',\n        keywords: 'module where',\n        contains: [\n          LIST,\n          COMMENT\n        ],\n        illegal: '\\\\W\\\\.|;'\n      },\n      {\n        begin: '\\\\bimport\\\\b',\n        end: '$',\n        keywords: 'import qualified as hiding',\n        contains: [\n          LIST,\n          COMMENT\n        ],\n        illegal: '\\\\W\\\\.|;'\n      },\n      {\n        className: 'class',\n        begin: '^(\\\\s*)?(class|instance)\\\\b',\n        end: 'where',\n        keywords: 'class family instance where',\n        contains: [\n          CONSTRUCTOR,\n          LIST,\n          COMMENT\n        ]\n      },\n      {\n        className: 'class',\n        begin: '\\\\b(data|(new)?type)\\\\b',\n        end: '$',\n        keywords: 'data family type newtype deriving',\n        contains: [\n          PRAGMA,\n          CONSTRUCTOR,\n          LIST,\n          RECORD,\n          COMMENT\n        ]\n      },\n      {\n        beginKeywords: 'default',\n        end: '$',\n        contains: [\n          CONSTRUCTOR,\n          LIST,\n          COMMENT\n        ]\n      },\n      {\n        beginKeywords: 'infix infixl infixr',\n        end: '$',\n        contains: [\n          hljs.C_NUMBER_MODE,\n          COMMENT\n        ]\n      },\n      {\n        begin: '\\\\bforeign\\\\b',\n        end: '$',\n        keywords: 'foreign import export ccall stdcall cplusplus jvm ' +\n                  'dotnet safe unsafe',\n        contains: [\n          CONSTRUCTOR,\n          hljs.QUOTE_STRING_MODE,\n          COMMENT\n        ]\n      },\n      {\n        className: 'meta',\n        begin: '#!\\\\/usr\\\\/bin\\\\/env\\ runhaskell',\n        end: '$'\n      },\n      // \"Whitespaces\".\n      PRAGMA,\n      PREPROCESSOR,\n\n      // Literals and names.\n\n      // TODO: characters.\n      hljs.QUOTE_STRING_MODE,\n      NUMBER,\n      CONSTRUCTOR,\n      hljs.inherit(hljs.TITLE_MODE, {\n        begin: '^[_a-z][\\\\w\\']*'\n      }),\n      COMMENT,\n      { // No markup, relevance booster\n        begin: '->|<-'\n      }\n    ]\n  };\n}\n\nmodule.exports = haskell;\n\n};"],
"names":["shadow$provide","global","require","module","exports","haskell","hljs","COMMENT","variants","contains","PRAGMA","className","begin","end","PREPROCESSOR","CONSTRUCTOR","relevance","LIST","illegal","inherit","TITLE_MODE","name","aliases","keywords","beginKeywords","RECORD","C_NUMBER_MODE","QUOTE_STRING_MODE","NUMBER","match"]
}
