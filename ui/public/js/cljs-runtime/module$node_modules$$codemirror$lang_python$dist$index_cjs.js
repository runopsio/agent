shadow$provide.module$node_modules$$codemirror$lang_python$dist$index_cjs=function(global,require,module,exports){function indentBody(context,node){node=context.lineIndent(node.from);let line=context.lineAt(context.pos,-1),to=line.from+line.text.length;return!/\S/.test(line.text)&&context.node.to<to+100&&!/\S/.test(context.state.sliceDoc(to,context.node.to))&&context.lineIndent(context.pos,-1)<=node||/^\s*(else:|elif |except |finally:)/.test(context.textAfter)&&context.lineIndent(context.pos,-1)>
node?null:node+context.unit}Object.defineProperty(exports,"__esModule",{value:!0});global=require("module$node_modules$$lezer$python$dist$index_cjs");var language=require("module$node_modules$$codemirror$language$dist$index_cjs");require=require("module$node_modules$$codemirror$highlight$dist$index_cjs");const pythonLanguage=language.LRLanguage.define({parser:global.parser.configure({props:[language.indentNodeProp.add({Body:context=>{var _a;return null!==(_a=indentBody(context,context.node))&&void 0!==
_a?_a:context.continue()},IfStatement:cx=>/^\s*(else:|elif )/.test(cx.textAfter)?cx.baseIndent:cx.continue(),TryStatement:cx=>/^\s*(except |finally:)/.test(cx.textAfter)?cx.baseIndent:cx.continue(),"TupleExpression ComprehensionExpression ParamList ArgList ParenthesizedExpression":language.delimitedIndent({closing:")"}),"DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression":language.delimitedIndent({closing:"}"}),"ArrayExpression ArrayComprehensionExpression":language.delimitedIndent({closing:"]"}),
Script:context=>{if(context.pos+/\s*/.exec(context.textAfter)[0].length>=context.node.to){var endBody=null;for(let cur=context.node,to=cur.to;;){cur=cur.lastChild;if(!cur||cur.to!=to)break;"Body"==cur.type.name&&(endBody=cur)}if(endBody&&(endBody=indentBody(context,endBody),null!=endBody))return endBody}return context.continue()}}),language.foldNodeProp.add({"ArrayExpression DictionaryExpression":language.foldInside,Body:(node,state)=>({from:node.from+1,to:node.to-(node.to==state.doc.length?0:1)})}),
require.styleTags({"async '*' '**' FormatConversion":require.tags.modifier,"for while if elif else try except finally return raise break continue with pass assert await yield":require.tags.controlKeyword,"in not and or is del":require.tags.operatorKeyword,"from def class global nonlocal lambda":require.tags.definitionKeyword,import:require.tags.moduleKeyword,"with as print":require.tags.keyword,self:require.tags.self,Boolean:require.tags.bool,None:require.tags.null,VariableName:require.tags.variableName,
"CallExpression/VariableName":require.tags.function(require.tags.variableName),"FunctionDefinition/VariableName":require.tags.function(require.tags.definition(require.tags.variableName)),"ClassDefinition/VariableName":require.tags.definition(require.tags.className),PropertyName:require.tags.propertyName,"CallExpression/MemberExpression/PropertyName":require.tags.function(require.tags.propertyName),Comment:require.tags.lineComment,Number:require.tags.number,String:require.tags.string,FormatString:require.tags.special(require.tags.string),
UpdateOp:require.tags.updateOperator,ArithOp:require.tags.arithmeticOperator,BitOp:require.tags.bitwiseOperator,CompareOp:require.tags.compareOperator,AssignOp:require.tags.definitionOperator,Ellipsis:require.tags.punctuation,At:require.tags.meta,"( )":require.tags.paren,"[ ]":require.tags.squareBracket,"{ }":require.tags.brace,".":require.tags.derefOperator,", ;":require.tags.separator})]}),languageData:{closeBrackets:{brackets:"( [ { ' \" ''' \"\"\"".split(" ")},commentTokens:{line:"#"},indentOnInput:/^\s*([\}\]\)]|else:|elif |except |finally:)$/}});
exports.python=function(){return new language.LanguageSupport(pythonLanguage)};exports.pythonLanguage=pythonLanguage}
//# sourceMappingURL=module$node_modules$$codemirror$lang_python$dist$index_cjs.js.map
