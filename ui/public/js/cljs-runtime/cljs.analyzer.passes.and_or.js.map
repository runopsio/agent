{"version":3,"sources":["cljs/analyzer/passes/and_or.cljc"],"mappings":"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","names":["cljs.analyzer.passes.and-or/simple-ops","cljs.analyzer.passes.and-or/->expr-env","ast","cljs.core/assoc-in","cljs.analyzer.passes.and-or/simple-op?","cljs.core/contains?","p__46467","map__46468","cljs.core/--destructure-map","cljs.core.get","cljs.analyzer.passes.and-or/simple-test-expr?","op","cljs.core/boolean","and__4251__auto__","G__46471","fexpr__46470","or__4253__auto__","fexpr__46472","cljs.analyzer.passes.and-or/single-binding-let?","cljs.core._EQ_","cljs.core/count","cljs.analyzer.passes.and-or/no-statements?","let-ast","cljs.analyzer.passes.and-or/returns-if?","cljs.analyzer.passes.and-or/simple-test-binding-let?","cljs.core/first","cljs.analyzer.passes.and-or/test=then?","if-ast","cljs.core.dissoc","cljs.analyzer.passes.and-or/test=else?","cljs.analyzer.passes.and-or/simple-and?","cljs.analyzer.passes.and-or/simple-or?","cljs.analyzer.passes.and-or/optimizable-and?","cljs.analyzer.passes.and-or/optimizable-or?","cljs.analyzer.passes.and-or/remove-loop-let","fn-ast","local","cljs.core.update","loop-lets","cljs.core.map","m","xs","p1__46521#","cljs.core.remove","cljs.analyzer.passes.and-or/remove-local-pass","env","opts","G__46544","cljs.core.update_in","cljs.core/dissoc","cljs.analyzer.passes.and-or/optimize-and","map__46547","init","name","cljs.analyzer.passes.walk","cljs.analyzer.passes.and-or/optimize-or","map__46550","cljs.analyzer.passes.and-or/optimize","_"],"sourcesContent":[";; Copyright (c) Rich Hickey. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file epl-v10.html at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns cljs.analyzer.passes.and-or\n  (:require [cljs.analyzer.passes :as passes]))\n\n(def simple-ops\n  #{:var :js-var :local :invoke :const :host-field :host-call :js :quote})\n\n(defn ->expr-env [ast]\n  (assoc-in ast [:env :context] :expr))\n\n(defn simple-op? [ast]\n  (contains? simple-ops (:op ast)))\n\n(defn simple-test-expr?\n  [{:keys [op] :as ast}]\n  (boolean\n    (and (simple-op? ast)\n         ('#{boolean seq}\n           (or (:tag ast)\n               (when (#{:local :var} op)\n                 (-> ast :info :tag)))))))\n\n(defn single-binding-let? [ast]\n  (and (= :let (:op ast))\n       (= 1 (count (-> ast :bindings)))))\n\n(defn no-statements? [let-ast]\n  (= [] (-> let-ast :body :statements)))\n\n(defn returns-if? [let-ast]\n  (= :if (-> let-ast :body :ret :op)))\n\n(defn simple-test-binding-let? [ast]\n  (and (single-binding-let? ast)\n       (no-statements? ast)\n       (simple-test-expr? (-> ast :bindings first :init))\n       (returns-if? ast)))\n\n(defn test=then? [if-ast]\n  ;; remove :env, if same, local will differ only by\n  ;; :context (:expr | :statement)\n  (= (dissoc (:test if-ast) :env)\n     (dissoc (:then if-ast) :env)))\n\n(defn test=else? [if-ast]\n  ;; remove :env, if same, local will differ only by\n  ;; :context (:expr | :statement)\n  (= (dissoc (:test if-ast) :env)\n     (dissoc (:else if-ast) :env)))\n\n(defn simple-and? [ast]\n  (and (simple-test-binding-let? ast)\n       (test=else? (-> ast :body :ret))))\n\n(defn simple-or? [ast]\n  (and (simple-test-binding-let? ast)\n       (test=then? (-> ast :body :ret))))\n\n(defn optimizable-and? [ast]\n  (and (simple-and? ast)\n       (simple-test-expr? (-> ast :body :ret :then))))\n\n(defn optimizable-or? [ast]\n  (and (simple-or? ast)\n       (simple-test-expr? (-> ast :body :ret :else))))\n\n(defn remove-loop-let [fn-ast local]\n  (update fn-ast :loop-lets\n    (fn [loop-lets]\n      (map\n        (fn [m]\n          (update m :params\n            (fn [xs] (remove #(= local (:name %)) xs))))\n        loop-lets))))\n\n(defn remove-local-pass [local]\n  (fn [env ast opts]\n    (cond-> (update-in ast [:env :locals] dissoc local)\n      (= :fn (:op ast)) (remove-loop-let local))))\n\n(defn optimize-and [ast]\n  (let [{:keys [init name]} (-> ast :bindings first)]\n    {:op :js\n     :env (:env ast)\n     :segs [\"((\" \") && (\" \"))\"]\n     :args [init\n            (passes/walk\n              (->expr-env (-> ast :body :ret :then))\n              [(remove-local-pass name)])]\n     :form (:form ast)\n     :children [:args]\n     :tag 'boolean}))\n\n(defn optimize-or [ast]\n  (let [{:keys [init name]} (-> ast :bindings first)]\n    {:op :js\n     :env (:env ast)\n     :segs [\"((\" \") || (\" \"))\"]\n     :args [init\n            (passes/walk\n              (->expr-env (-> ast :body :ret :else))\n              [(remove-local-pass name)])]\n     :form (:form ast)\n     :children [:args]\n     :tag 'boolean}))\n\n(defn optimize [env ast _]\n  (cond\n    (optimizable-and? ast) (optimize-and ast)\n    (optimizable-or? ast)  (optimize-or ast)\n    :else ast))\n"]}