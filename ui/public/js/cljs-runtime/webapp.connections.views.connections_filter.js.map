{"version":3,"sources":["webapp/connections/views/connections_filter.cljs"],"mappings":"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","names":["webapp.connections.views.connections-filter/main","searched-connections-atom","all-connections","reagent.core.atom","connections-search-status","set-connections","connections","cljs.core/reset!","set-connections-error","e","cljs.core.println","get-all-connections","webapp.http.runops-api/request","search","js/window","url-search-params","js/URLSearchParams","url-params-list","cljs.core.js__GT_clj","iter__4652__auto__","s__30217","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__30219","cljs.core/chunk-buffer","i__30218","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30216","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","q","url-params-map","cljs.core.into","cljs.core/sorted-map","selected-type","or__4253__auto__","cljs.core.get","selected-review","selected-status","focus-on-search","cljs.core._EQ_","element","js/document","_","p1__30214#","cljs.core/deref","p1__30215#","connections-types","webapp.connections.constants/connections-types-list","status","status-options","p1__30212#","cljs.core.map","reviews","reviews-types","p1__30213#","webapp.components.searchbox/main","re-frame.core/dispatch","webapp.components.combobox/main","v","cljs.core/chunk-first"],"sourcesContent":["(ns webapp.connections.views.connections-filter\n  (:require [re-frame.core :as rf]\n            [reagent.core :as r]\n            [webapp.http.runops-api :as runops-api]\n            [webapp.connections.constants :as constants]\n            [webapp.components.searchbox :as searchbox]\n            [webapp.components.combobox :as combobox]))\n\n(defn main [searched-connections-atom]\n  (let [all-connections (r/atom nil)\n        connections-search-status (r/atom nil)\n        set-connections (fn [connections]\n                          (reset! all-connections connections)\n                          (reset! connections-search-status nil))\n        set-connections-error (fn [e]\n                                (println \"couldn't get all connections\" e)\n                                (reset! connections-search-status nil))\n        get-all-connections #(runops-api/request {:method \"GET\"\n                                                  :uri \"/v1/targets?limit=2000&status=active\"\n                                                  :on-success set-connections\n                                                  :on-failure set-connections-error})\n        search (.. js/window -location -search)\n        url-search-params (new js/URLSearchParams search)\n        url-params-list (js->clj (for [q url-search-params] q))\n        url-params-map (into (sorted-map) url-params-list)\n        selected-type (r/atom (or (get url-params-map \"type\") \"\"))\n        selected-review (r/atom (or (get url-params-map \"review_type\") \"\"))\n        selected-status (r/atom (or (get url-params-map \"status\") \"\"))\n        focus-on-search (fn [e]\n                          (when (= (.-keyCode e) 191)\n                            (let [element (.getElementById js/document \"connection-search\")]\n                              (when (not (nil? element)) (.focus element)))))\n        _ (.addEventListener js/document \"keyup\" focus-on-search)]\n    (fn []\n      (let [connections-types constants/connections-types-list\n            status [\"all\" \"active\" \"inactive\"]\n            status-options (map\n                            #(into {} {:value % :text %})\n                            status)\n            reviews [\"none\" \"anyone\" \"team\"]\n            reviews-types (map\n                           #(into {} {:value % :text %})\n                           reviews)]\n        [:section\n         {:class \"grid grid-cols-5 gap-regular\"}\n         [:div {:class \"col-span-3\"}\n          [searchbox/main {:options @all-connections\n                           :meta-display-keys [:type]\n                           :display-key :name\n                           :searchable-keys [:name :review_type :redact :type]\n                           :on-change-results-cb #(reset! searched-connections-atom %)\n                           :hide-results-list true\n                           :placeholder \"Type \\\"/\\\" to search and go to your connection\"\n                           :name \"connection-search\"\n                           :clear? true\n                           :loading? (= @connections-search-status :loading)\n                           :on-focus (fn []\n                                       (reset! connections-search-status :loading)\n                                       (get-all-connections))\n                           :list-classes \"min-w-96\"\n                           :selected @selected-type\n                         ;; TODO change to on-select\n                           :on-select-result #(rf/dispatch [:navigate\n                                                            :new-query-with-connection\n                                                            {}\n                                                            :connection-name (:name %)])}]]\n         [:div {:class \"col-span-2 flex gap-regular\"}\n          [combobox/main {:options connections-types\n                          :placeholder \"Type\"\n                          :name \"connection-type\"\n                          :clear? true\n                          :selected @selected-type\n                          :on-change (fn [v]\n                                       (reset! selected-type v)\n                                       (rf/dispatch [:filter-connections \"type\" v]))}]\n          [combobox/main {:options reviews-types\n                          :selected @selected-review\n                          :placeholder \"Review type\"\n                          :name \"connection-review\"\n                          :clear? true\n                          :on-change (fn [v]\n                                       (reset! selected-review v)\n                                       (rf/dispatch [:filter-connections \"review_type\" v]))}]\n          [combobox/main {:options status-options\n                          :selected @selected-status\n                          :placeholder \"Status\"\n                          :name \"connection-status\"\n                          :on-change (fn [v]\n                                       (reset! selected-status v)\n                                       (rf/dispatch [:filter-connections \"status\" v]))}]]]))))\n"]}