{"version":3,"sources":["webapp/quickstarts/views/main.cljs"],"mappings":"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","names":["p__30289","map__30290","cljs.core/--destructure-map","cljs.core.get","webapp.quickstarts.views.main/manage->main-area","current-step","config-atom","fx-change-step","connection-name-atom","connection-type-atom","fx-request-agent-list","secret-path-env-atom","agent-tag-atom","fx-get-current-step-infos","agent-token","secrets-host-atom","G__30298","cljs.core/Keyword","cljs.core/deref","js/Error","webapp.quickstarts.views.environment-step/main","webapp.quickstarts.views.configration-inputs/main","webapp.quickstarts.views.task-step/main","webapp.quickstarts.views.main/main","steppers","reagent.core.atom","connection-type","connection-img","connection-name","secret-path-env","configs","webapp.quickstarts.utilities/get-config-keys","cljs.core.keyword","agent-tag","selects-disabled?","secrets-host","agent-filtered","current-agent","agents","cljs.core.nth","p1__30302#","cljs.core.filter","cljs.core._EQ_","get-current-step-infos","G__30306","fexpr__30305","get-index","clojure.string.index_of","cljs.core/keys","get-step","direction","G__30307","go-next-step","cljs.core/reset!","go-back-step","change-step","step","new-status","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/assoc","create-connection-request","webapp.http.runops-api/request","cljs.core.merge","G__30308","webapp.quickstarts.utilities/config->json-stringify","_","webapp.quickstarts.views.snackbar/main","request-agent-list","res","current-agent-tag","agent","webapp.components.headings/h2","clojure.string/blank?","p1__30303#","cljs.core.map","webapp.quickstarts.views.connection-card/main","webapp.connections.constants/connections-types-list","webapp.components.stepper/main","webapp.components.divider/main","webapp.components.button/secondary","and__4251__auto__","webapp.components.button/primary","cljs.core.not_EQ_"],"sourcesContent":["(ns webapp.quickstarts.views.main\n  (:require [clojure.string :as s]\n            [reagent.core :as r]\n            [webapp.components.button :as button]\n            [webapp.components.divider :as divider]\n            [webapp.components.headings :as headings]\n            [webapp.components.stepper :as stepper]\n            [webapp.http.runops-api :as runops-api]\n            [webapp.quickstarts.utilities :as utils]\n            [webapp.quickstarts.views.configration-inputs :as config-inputs]\n            [webapp.quickstarts.views.connection-card :as connection-card]\n            [webapp.quickstarts.views.environment-step :as environment-step]\n            [webapp.quickstarts.views.snackbar :as show-snackbar]\n            [webapp.quickstarts.views.task-step :as task-step]\n            [webapp.connections.constants :as constants]))\n\n(defn manage->main-area\n  [{:keys [current-step\n           config-atom\n           fx-change-step\n           connection-name-atom\n           connection-type-atom\n           fx-request-agent-list\n           secret-path-env-atom\n           agent-tag-atom\n           fx-get-current-step-infos\n           agent-token\n           secrets-host-atom]}]\n  (case current-step\n    :agent [environment-step/main (config-inputs/main config-atom) fx-request-agent-list {:config-values @config-atom\n                                                                                          :secret-path-env secret-path-env-atom\n                                                                                          :agent-tag agent-tag-atom\n                                                                                          :connection-name connection-name-atom\n                                                                                          :connection-type connection-type-atom\n                                                                                          :fx-get-current-step-infos fx-get-current-step-infos\n                                                                                          :agent-token agent-token\n                                                                                          :secrets-host secrets-host-atom}]\n    :task [task-step/main fx-change-step @connection-name-atom]))\n\n(defn main\n  []\n  (let [steppers (r/atom {:agent {:status \"current\"\n                                  :title \"Environment's configuration\"\n                                  :text \"It will set up your environment with your connection.\"}\n                          :task {:status \"upcoming\"\n                                 :title \"Task\"\n                                 :text \"It will test your environment with a task\"}})\n        current-step (r/atom :agent)\n        connection-type (r/atom \"\")\n        connection-img (r/atom \"\")\n        connection-name (r/atom \"\")\n        secret-path-env (r/atom \"ENV_CONFIG\")\n        configs (r/atom (utils/get-config-keys (keyword @connection-type)))\n        agent-tag (r/atom \"\")\n        selects-disabled? (r/atom false)\n        agent-token (r/atom \"\")\n        secrets-host (r/atom \"runops\")\n\n        agent-filtered (fn [current-agent agents] (nth (filter #(= (:tags %) current-agent) agents) 0 false))\n\n        get-current-step-infos #(@current-step @steppers)\n        get-index #(s/index-of (keys @steppers) @current-step)\n        get-step (fn [direction] (nth (keys @steppers) (case direction\n                                                         \"next\" (+ (get-index) 1)\n                                                         \"back\" (- (get-index) 1)) false))\n\n        go-next-step #(reset! current-step (if (get-step \"next\") (get-step \"next\") @current-step))\n        go-back-step #(reset! current-step (if (get-step \"back\") (get-step \"back\") @current-step))\n\n        change-step (fn [step new-status] (swap! steppers update-in [step] assoc :status new-status))\n        create-connection-request #(runops-api/request {:method \"POST\"\n                                                        :uri \"/v1/targets\"\n                                                        :body (merge {:name @connection-name\n                                                                      :type @connection-type\n                                                                      :groups nil}\n                                                                     (case @secrets-host\n                                                                       \"runops\" {:secret_provider \"runops\"\n                                                                                 :tags \"test\"\n                                                                                 :config (utils/config->json-stringify @configs)}\n                                                                       \"self\" {:secret_provider \"env-var\"\n                                                                               :tags @agent-tag\n                                                                               :secret_path  @secret-path-env\n                                                                               :config nil}))\n                                                        :on-failure (fn [_]\n                                                                      (show-snackbar/main :connection-failure))\n                                                        :on-success (fn [_]\n                                                                      (change-step :agent \"complete\")\n                                                                      (change-step :task \"current\")\n                                                                      (reset! selects-disabled? true)\n                                                                      (show-snackbar/main :verified))})\n\n        request-agent-list #(runops-api/request {:method \"GET\"\n                                                 :uri \"/v1/agents\"\n                                                 :on-failure (fn [_]\n                                                               (show-snackbar/main :agent-failure))\n                                                 :on-success (fn [res]\n                                                               (let [current-agent-tag (if (= @secrets-host \"runops\") \"test\" @agent-tag)\n                                                                     agent (agent-filtered current-agent-tag res)]\n                                                                 (cond\n                                                                   (false? agent) (show-snackbar/main :not-exist)\n                                                                   (= (:status agent) \"DOWN\") (show-snackbar/main :not-up)\n                                                                   (= (:status agent) \"UP\") (create-connection-request))))})]\n\n    (fn []\n      (runops-api/request {:method \"GET\"\n                           :uri \"/v1/orgs\"\n                           :on-failure (fn [_]\n                                         (reset! agent-token \"\"))\n                           :on-success (fn [res]\n                                         (reset! agent-token (:agents_token res)))})\n      [:div {:class \"px-large\"}\n       [:div {:class \"grid grid-cols-4 items-center mb-regular\"}\n        [headings/h2 \"Quickstarts\"]]\n       [:div {:class \"py-6\"}\n        (if (s/blank? @connection-type)\n          [:<>\n           [:p {:class \"mb-large\"}\n            \"What would you like to connect?\"]\n           [:div {:role \"list\"\n                  :class \"grid gap-6 grid-cols-4 xl:grid-cols-6\"}\n            (map #(connection-card/main % connection-type connection-img configs) constants/connections-types-list)]]\n\n          [:<>\n           [:div {:class \"flex gap-4 px-8 mb-large\"}\n            [:button {:on-click (fn []\n                                  (reset! connection-type \"\")\n                                  (reset! connection-img \"\"))}\n             [:figure {:class \"w-5\"}\n              [:img {:src \"/icons/icon-arrow-left-blue.svg\"}]]]\n            [:img {:src @connection-img\n                   :alt (str \"logo \" @connection-type)}]]\n           [:div {:class \"max-w-7xl px-8 grid grid-cols-12 gap-16\"}\n            [:div {:class \"col-span-4\"}\n             [:nav {:class \"sticky top-6 divide-y divide-gray-300\"}\n              (stepper/main @steppers)]]\n\n            [:main {:class \"col-span-8\"}\n             [manage->main-area {:current-step @current-step\n                                 :config-atom configs\n                                 :fx-change-step change-step\n                                 :connection-name-atom connection-name\n                                 :connection-type-atom connection-type\n                                 :fx-request-agent-list request-agent-list\n                                 :secret-path-env-atom secret-path-env\n                                 :agent-tag-atom agent-tag\n                                 :fx-get-current-step-infos get-current-step-infos\n                                 :agent-token @agent-token\n                                 :secrets-host-atom secrets-host}]\n             (divider/main)\n             [:div {:class \"grid grid-cols-2 gap-x-x-large\"}\n              (if (get-step \"back\")\n                (button/secondary {:text \"Back\"\n                                   :outlined true\n                                   :on-click #(go-back-step)})\n                [:div {:class \"col-span-1\"}])\n              (if (and (get-step \"next\") (= (:status (get-current-step-infos)) \"complete\"))\n                (button/primary {:text \"Next\"\n                                 :disabled (not= (:status (get-current-step-infos)) \"complete\")\n                                 :on-click #(go-next-step)})\n                [:div {:class \"col-span-1\"}])]]]])]])))\n"]}