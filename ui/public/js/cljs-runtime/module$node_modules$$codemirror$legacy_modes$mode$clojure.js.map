{
"version":3,
"file":"module$node_modules$$codemirror$legacy_modes$mode$clojure.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/@codemirror/legacy-modes/mode/clojure.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$codemirror$legacy_modes$mode$clojure\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clojure = void 0;\nvar atoms = [\"false\", \"nil\", \"true\"];\nvar specialForms = [\".\", \"catch\", \"def\", \"do\", \"if\", \"monitor-enter\", \"monitor-exit\", \"new\", \"quote\", \"recur\", \"set!\", \"throw\", \"try\", \"var\"];\nvar coreSymbols = [\"*\", \"*'\", \"*1\", \"*2\", \"*3\", \"*agent*\", \"*allow-unresolved-vars*\", \"*assert*\", \"*clojure-version*\", \"*command-line-args*\", \"*compile-files*\", \"*compile-path*\", \"*compiler-options*\", \"*data-readers*\", \"*default-data-reader-fn*\", \"*e\", \"*err*\", \"*file*\", \"*flush-on-newline*\", \"*fn-loader*\", \"*in*\", \"*math-context*\", \"*ns*\", \"*out*\", \"*print-dup*\", \"*print-length*\", \"*print-level*\", \"*print-meta*\", \"*print-namespace-maps*\", \"*print-readably*\", \"*read-eval*\", \"*reader-resolver*\", \"*source-path*\", \"*suppress-read*\", \"*unchecked-math*\", \"*use-context-classloader*\", \"*verbose-defrecords*\", \"*warn-on-reflection*\", \"+\", \"+'\", \"-\", \"-'\", \"->\", \"->>\", \"->ArrayChunk\", \"->Eduction\", \"->Vec\", \"->VecNode\", \"->VecSeq\", \"-cache-protocol-fn\", \"-reset-methods\", \"..\", \"/\", \"<\", \"<=\", \"=\", \"==\", \">\", \">=\", \"EMPTY-NODE\", \"Inst\", \"StackTraceElement->vec\", \"Throwable->map\", \"accessor\", \"aclone\", \"add-classpath\", \"add-watch\", \"agent\", \"agent-error\", \"agent-errors\", \"aget\", \"alength\", \"alias\", \"all-ns\", \"alter\", \"alter-meta!\", \"alter-var-root\", \"amap\", \"ancestors\", \"and\", \"any?\", \"apply\", \"areduce\", \"array-map\", \"as->\", \"aset\", \"aset-boolean\", \"aset-byte\", \"aset-char\", \"aset-double\", \"aset-float\", \"aset-int\", \"aset-long\", \"aset-short\", \"assert\", \"assoc\", \"assoc!\", \"assoc-in\", \"associative?\", \"atom\", \"await\", \"await-for\", \"await1\", \"bases\", \"bean\", \"bigdec\", \"bigint\", \"biginteger\", \"binding\", \"bit-and\", \"bit-and-not\", \"bit-clear\", \"bit-flip\", \"bit-not\", \"bit-or\", \"bit-set\", \"bit-shift-left\", \"bit-shift-right\", \"bit-test\", \"bit-xor\", \"boolean\", \"boolean-array\", \"boolean?\", \"booleans\", \"bound-fn\", \"bound-fn*\", \"bound?\", \"bounded-count\", \"butlast\", \"byte\", \"byte-array\", \"bytes\", \"bytes?\", \"case\", \"cast\", \"cat\", \"char\", \"char-array\", \"char-escape-string\", \"char-name-string\", \"char?\", \"chars\", \"chunk\", \"chunk-append\", \"chunk-buffer\", \"chunk-cons\", \"chunk-first\", \"chunk-next\", \"chunk-rest\", \"chunked-seq?\", \"class\", \"class?\", \"clear-agent-errors\", \"clojure-version\", \"coll?\", \"comment\", \"commute\", \"comp\", \"comparator\", \"compare\", \"compare-and-set!\", \"compile\", \"complement\", \"completing\", \"concat\", \"cond\", \"cond->\", \"cond->>\", \"condp\", \"conj\", \"conj!\", \"cons\", \"constantly\", \"construct-proxy\", \"contains?\", \"count\", \"counted?\", \"create-ns\", \"create-struct\", \"cycle\", \"dec\", \"dec'\", \"decimal?\", \"declare\", \"dedupe\", \"default-data-readers\", \"definline\", \"definterface\", \"defmacro\", \"defmethod\", \"defmulti\", \"defn\", \"defn-\", \"defonce\", \"defprotocol\", \"defrecord\", \"defstruct\", \"deftype\", \"delay\", \"delay?\", \"deliver\", \"denominator\", \"deref\", \"derive\", \"descendants\", \"destructure\", \"disj\", \"disj!\", \"dissoc\", \"dissoc!\", \"distinct\", \"distinct?\", \"doall\", \"dorun\", \"doseq\", \"dosync\", \"dotimes\", \"doto\", \"double\", \"double-array\", \"double?\", \"doubles\", \"drop\", \"drop-last\", \"drop-while\", \"eduction\", \"empty\", \"empty?\", \"ensure\", \"ensure-reduced\", \"enumeration-seq\", \"error-handler\", \"error-mode\", \"eval\", \"even?\", \"every-pred\", \"every?\", \"ex-data\", \"ex-info\", \"extend\", \"extend-protocol\", \"extend-type\", \"extenders\", \"extends?\", \"false?\", \"ffirst\", \"file-seq\", \"filter\", \"filterv\", \"find\", \"find-keyword\", \"find-ns\", \"find-protocol-impl\", \"find-protocol-method\", \"find-var\", \"first\", \"flatten\", \"float\", \"float-array\", \"float?\", \"floats\", \"flush\", \"fn\", \"fn?\", \"fnext\", \"fnil\", \"for\", \"force\", \"format\", \"frequencies\", \"future\", \"future-call\", \"future-cancel\", \"future-cancelled?\", \"future-done?\", \"future?\", \"gen-class\", \"gen-interface\", \"gensym\", \"get\", \"get-in\", \"get-method\", \"get-proxy-class\", \"get-thread-bindings\", \"get-validator\", \"group-by\", \"halt-when\", \"hash\", \"hash-combine\", \"hash-map\", \"hash-ordered-coll\", \"hash-set\", \"hash-unordered-coll\", \"ident?\", \"identical?\", \"identity\", \"if-let\", \"if-not\", \"if-some\", \"ifn?\", \"import\", \"in-ns\", \"inc\", \"inc'\", \"indexed?\", \"init-proxy\", \"inst-ms\", \"inst-ms*\", \"inst?\", \"instance?\", \"int\", \"int-array\", \"int?\", \"integer?\", \"interleave\", \"intern\", \"interpose\", \"into\", \"into-array\", \"ints\", \"io!\", \"isa?\", \"iterate\", \"iterator-seq\", \"juxt\", \"keep\", \"keep-indexed\", \"key\", \"keys\", \"keyword\", \"keyword?\", \"last\", \"lazy-cat\", \"lazy-seq\", \"let\", \"letfn\", \"line-seq\", \"list\", \"list*\", \"list?\", \"load\", \"load-file\", \"load-reader\", \"load-string\", \"loaded-libs\", \"locking\", \"long\", \"long-array\", \"longs\", \"loop\", \"macroexpand\", \"macroexpand-1\", \"make-array\", \"make-hierarchy\", \"map\", \"map-entry?\", \"map-indexed\", \"map?\", \"mapcat\", \"mapv\", \"max\", \"max-key\", \"memfn\", \"memoize\", \"merge\", \"merge-with\", \"meta\", \"method-sig\", \"methods\", \"min\", \"min-key\", \"mix-collection-hash\", \"mod\", \"munge\", \"name\", \"namespace\", \"namespace-munge\", \"nat-int?\", \"neg-int?\", \"neg?\", \"newline\", \"next\", \"nfirst\", \"nil?\", \"nnext\", \"not\", \"not-any?\", \"not-empty\", \"not-every?\", \"not=\", \"ns\", \"ns-aliases\", \"ns-imports\", \"ns-interns\", \"ns-map\", \"ns-name\", \"ns-publics\", \"ns-refers\", \"ns-resolve\", \"ns-unalias\", \"ns-unmap\", \"nth\", \"nthnext\", \"nthrest\", \"num\", \"number?\", \"numerator\", \"object-array\", \"odd?\", \"or\", \"parents\", \"partial\", \"partition\", \"partition-all\", \"partition-by\", \"pcalls\", \"peek\", \"persistent!\", \"pmap\", \"pop\", \"pop!\", \"pop-thread-bindings\", \"pos-int?\", \"pos?\", \"pr\", \"pr-str\", \"prefer-method\", \"prefers\", \"primitives-classnames\", \"print\", \"print-ctor\", \"print-dup\", \"print-method\", \"print-simple\", \"print-str\", \"printf\", \"println\", \"println-str\", \"prn\", \"prn-str\", \"promise\", \"proxy\", \"proxy-call-with-super\", \"proxy-mappings\", \"proxy-name\", \"proxy-super\", \"push-thread-bindings\", \"pvalues\", \"qualified-ident?\", \"qualified-keyword?\", \"qualified-symbol?\", \"quot\", \"rand\", \"rand-int\", \"rand-nth\", \"random-sample\", \"range\", \"ratio?\", \"rational?\", \"rationalize\", \"re-find\", \"re-groups\", \"re-matcher\", \"re-matches\", \"re-pattern\", \"re-seq\", \"read\", \"read-line\", \"read-string\", \"reader-conditional\", \"reader-conditional?\", \"realized?\", \"record?\", \"reduce\", \"reduce-kv\", \"reduced\", \"reduced?\", \"reductions\", \"ref\", \"ref-history-count\", \"ref-max-history\", \"ref-min-history\", \"ref-set\", \"refer\", \"refer-clojure\", \"reify\", \"release-pending-sends\", \"rem\", \"remove\", \"remove-all-methods\", \"remove-method\", \"remove-ns\", \"remove-watch\", \"repeat\", \"repeatedly\", \"replace\", \"replicate\", \"require\", \"reset!\", \"reset-meta!\", \"reset-vals!\", \"resolve\", \"rest\", \"restart-agent\", \"resultset-seq\", \"reverse\", \"reversible?\", \"rseq\", \"rsubseq\", \"run!\", \"satisfies?\", \"second\", \"select-keys\", \"send\", \"send-off\", \"send-via\", \"seq\", \"seq?\", \"seqable?\", \"seque\", \"sequence\", \"sequential?\", \"set\", \"set-agent-send-executor!\", \"set-agent-send-off-executor!\", \"set-error-handler!\", \"set-error-mode!\", \"set-validator!\", \"set?\", \"short\", \"short-array\", \"shorts\", \"shuffle\", \"shutdown-agents\", \"simple-ident?\", \"simple-keyword?\", \"simple-symbol?\", \"slurp\", \"some\", \"some->\", \"some->>\", \"some-fn\", \"some?\", \"sort\", \"sort-by\", \"sorted-map\", \"sorted-map-by\", \"sorted-set\", \"sorted-set-by\", \"sorted?\", \"special-symbol?\", \"spit\", \"split-at\", \"split-with\", \"str\", \"string?\", \"struct\", \"struct-map\", \"subs\", \"subseq\", \"subvec\", \"supers\", \"swap!\", \"swap-vals!\", \"symbol\", \"symbol?\", \"sync\", \"tagged-literal\", \"tagged-literal?\", \"take\", \"take-last\", \"take-nth\", \"take-while\", \"test\", \"the-ns\", \"thread-bound?\", \"time\", \"to-array\", \"to-array-2d\", \"trampoline\", \"transduce\", \"transient\", \"tree-seq\", \"true?\", \"type\", \"unchecked-add\", \"unchecked-add-int\", \"unchecked-byte\", \"unchecked-char\", \"unchecked-dec\", \"unchecked-dec-int\", \"unchecked-divide-int\", \"unchecked-double\", \"unchecked-float\", \"unchecked-inc\", \"unchecked-inc-int\", \"unchecked-int\", \"unchecked-long\", \"unchecked-multiply\", \"unchecked-multiply-int\", \"unchecked-negate\", \"unchecked-negate-int\", \"unchecked-remainder-int\", \"unchecked-short\", \"unchecked-subtract\", \"unchecked-subtract-int\", \"underive\", \"unquote\", \"unquote-splicing\", \"unreduced\", \"unsigned-bit-shift-right\", \"update\", \"update-in\", \"update-proxy\", \"uri?\", \"use\", \"uuid?\", \"val\", \"vals\", \"var-get\", \"var-set\", \"var?\", \"vary-meta\", \"vec\", \"vector\", \"vector-of\", \"vector?\", \"volatile!\", \"volatile?\", \"vreset!\", \"vswap!\", \"when\", \"when-first\", \"when-let\", \"when-not\", \"when-some\", \"while\", \"with-bindings\", \"with-bindings*\", \"with-in-str\", \"with-loading-context\", \"with-local-vars\", \"with-meta\", \"with-open\", \"with-out-str\", \"with-precision\", \"with-redefs\", \"with-redefs-fn\", \"xml-seq\", \"zero?\", \"zipmap\"];\nvar haveBodyParameter = [\"->\", \"->>\", \"as->\", \"binding\", \"bound-fn\", \"case\", \"catch\", \"comment\", \"cond\", \"cond->\", \"cond->>\", \"condp\", \"def\", \"definterface\", \"defmethod\", \"defn\", \"defmacro\", \"defprotocol\", \"defrecord\", \"defstruct\", \"deftype\", \"do\", \"doseq\", \"dotimes\", \"doto\", \"extend\", \"extend-protocol\", \"extend-type\", \"fn\", \"for\", \"future\", \"if\", \"if-let\", \"if-not\", \"if-some\", \"let\", \"letfn\", \"locking\", \"loop\", \"ns\", \"proxy\", \"reify\", \"struct-map\", \"some->\", \"some->>\", \"try\", \"when\", \"when-first\", \"when-let\", \"when-not\", \"when-some\", \"while\", \"with-bindings\", \"with-bindings*\", \"with-in-str\", \"with-loading-context\", \"with-local-vars\", \"with-meta\", \"with-open\", \"with-out-str\", \"with-precision\", \"with-redefs\", \"with-redefs-fn\"];\nvar atom = createLookupMap(atoms);\nvar specialForm = createLookupMap(specialForms);\nvar coreSymbol = createLookupMap(coreSymbols);\nvar hasBodyParameter = createLookupMap(haveBodyParameter);\nvar delimiter = /^(?:[\\\\\\[\\]\\s\"(),;@^`{}~]|$)/;\nvar numberLiteral = /^(?:[+\\-]?\\d+(?:(?:N|(?:[eE][+\\-]?\\d+))|(?:\\.?\\d*(?:M|(?:[eE][+\\-]?\\d+))?)|\\/\\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\\\\[\\]\\s\"#'(),;@^`{}~]|$))/;\nvar characterLiteral = /^(?:\\\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/; // simple-namespace := /^[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~.][^\\\\\\[\\]\\s\"(),;@^`{}~.\\/]*/\n// simple-symbol    := /^(?:\\/|[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)/\n// qualified-symbol := (<simple-namespace>(<.><simple-namespace>)*</>)?<simple-symbol>\n\nvar qualifiedSymbol = /^(?:(?:[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~.][^\\\\\\[\\]\\s\"(),;@^`{}~.\\/]*(?:\\.[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~.][^\\\\\\[\\]\\s\"(),;@^`{}~.\\/]*)*\\/)?(?:\\/|[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)*(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/;\n\nfunction base(stream, state) {\n  if (stream.eatSpace() || stream.eat(\",\")) return [\"space\", null];\n  if (stream.match(numberLiteral)) return [null, \"number\"];\n  if (stream.match(characterLiteral)) return [null, \"string.special\"];\n  if (stream.eat(/^\"/)) return (state.tokenize = inString)(stream, state);\n  if (stream.eat(/^[(\\[{]/)) return [\"open\", \"bracket\"];\n  if (stream.eat(/^[)\\]}]/)) return [\"close\", \"bracket\"];\n\n  if (stream.eat(/^;/)) {\n    stream.skipToEnd();\n    return [\"space\", \"comment\"];\n  }\n\n  if (stream.eat(/^[#'@^`~]/)) return [null, \"meta\"];\n  var matches = stream.match(qualifiedSymbol);\n  var symbol = matches && matches[0];\n\n  if (!symbol) {\n    // advance stream by at least one character so we don't get stuck.\n    stream.next();\n    stream.eatWhile(function (c) {\n      return !is(c, delimiter);\n    });\n    return [null, \"error\"];\n  }\n\n  if (symbol === \"comment\" && state.lastToken === \"(\") return (state.tokenize = inComment)(stream, state);\n  if (is(symbol, atom) || symbol.charAt(0) === \":\") return [\"symbol\", \"atom\"];\n  if (is(symbol, specialForm) || is(symbol, coreSymbol)) return [\"symbol\", \"keyword\"];\n  if (state.lastToken === \"(\") return [\"symbol\", \"builtin\"]; // other operator\n\n  return [\"symbol\", \"variable\"];\n}\n\nfunction inString(stream, state) {\n  var escaped = false,\n      next;\n\n  while (next = stream.next()) {\n    if (next === \"\\\"\" && !escaped) {\n      state.tokenize = base;\n      break;\n    }\n\n    escaped = !escaped && next === \"\\\\\";\n  }\n\n  return [null, \"string\"];\n}\n\nfunction inComment(stream, state) {\n  var parenthesisCount = 1;\n  var next;\n\n  while (next = stream.next()) {\n    if (next === \")\") parenthesisCount--;\n    if (next === \"(\") parenthesisCount++;\n\n    if (parenthesisCount === 0) {\n      stream.backUp(1);\n      state.tokenize = base;\n      break;\n    }\n  }\n\n  return [\"space\", \"comment\"];\n}\n\nfunction createLookupMap(words) {\n  var obj = {};\n\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n\n  return obj;\n}\n\nfunction is(value, test) {\n  if (test instanceof RegExp) return test.test(value);\n  if (test instanceof Object) return test.propertyIsEnumerable(value);\n}\n\nconst clojure = {\n  startState: function () {\n    return {\n      ctx: {\n        prev: null,\n        start: 0,\n        indentTo: 0\n      },\n      lastToken: null,\n      tokenize: base\n    };\n  },\n  token: function (stream, state) {\n    if (stream.sol() && typeof state.ctx.indentTo !== \"number\") state.ctx.indentTo = state.ctx.start + 1;\n    var typeStylePair = state.tokenize(stream, state);\n    var type = typeStylePair[0];\n    var style = typeStylePair[1];\n    var current = stream.current();\n\n    if (type !== \"space\") {\n      if (state.lastToken === \"(\" && state.ctx.indentTo === null) {\n        if (type === \"symbol\" && is(current, hasBodyParameter)) state.ctx.indentTo = state.ctx.start + stream.indentUnit;else state.ctx.indentTo = \"next\";\n      } else if (state.ctx.indentTo === \"next\") {\n        state.ctx.indentTo = stream.column();\n      }\n\n      state.lastToken = current;\n    }\n\n    if (type === \"open\") state.ctx = {\n      prev: state.ctx,\n      start: stream.column(),\n      indentTo: null\n    };else if (type === \"close\") state.ctx = state.ctx.prev || state.ctx;\n    return style;\n  },\n  indent: function (state) {\n    var i = state.ctx.indentTo;\n    return typeof i === \"number\" ? i : state.ctx.start + 1;\n  },\n  languageData: {\n    closeBrackets: {\n      brackets: [\"(\", \"[\", \"{\", '\"']\n    },\n    commentTokens: {\n      line: \";;\"\n    },\n    autocomplete: [].concat(atoms, specialForms, coreSymbols)\n  }\n};\nexports.clojure = clojure;\n};"],
"names":["shadow$provide","global","require","module","exports","base","stream","state","eatSpace","eat","match","numberLiteral","characterLiteral","tokenize","inString","skipToEnd","matches","qualifiedSymbol","symbol","lastToken","inComment","is","atom","charAt","specialForm","coreSymbol","next","eatWhile","c","delimiter","escaped","parenthesisCount","backUp","createLookupMap","words","obj","i","length","value","test","RegExp","Object","propertyIsEnumerable","defineProperty","clojure","atoms","specialForms","coreSymbols","hasBodyParameter","haveBodyParameter","startState","ctx","prev","start","indentTo","token","sol","typeStylePair","type","style","current","indentUnit","column","indent","languageData","closeBrackets","brackets","commentTokens","line","autocomplete","concat"]
}
