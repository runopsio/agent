{
"version":3,
"file":"module$node_modules$$lezer$common$dist$index_cjs.js",
"lineCount":68,
"mappings":"AAAAA,cAAA,CAAA,gDAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAwc7GC,QAASA,UAAS,CAACC,IAAD,CAAOC,GAAP,CAAYC,IAAZ,CAAkBC,EAAlB,CAAsB,CACpC,OAAQH,IAAR,EACI,KAAK,CAAC,CAAN,CAAsB,MAAOE,KAAP,CAAcD,GACpC,MAAK,CAAC,CAAN,CAA0B,MAAOE,GAAP,EAAaF,GAAb,EAAoBC,IAApB,CAA2BD,GACrD,MAAK,CAAL,CAAqB,MAAOC,KAAP,CAAcD,GAAd,EAAqBE,EAArB,CAA0BF,GAC/C,MAAK,CAAL,CAAwB,MAAOC,KAAP,EAAeD,GAAf,EAAsBE,EAAtB,CAA2BF,GACnD,MAAK,CAAL,CAAoB,MAAOE,GAAP,CAAYF,GAChC,MAAK,CAAL,CAAuB,MAAO,CAAA,CANlC,CADoC,CAUxCG,QAASA,2BAA0B,CAACC,IAAD,CAAOJ,GAAP,CAAY,CAE3C,IADIK,GACJ,CADWD,IAAKE,CAAAA,WAAL,CAAiBN,GAAjB,CACX,CAAOK,GAAP,CAAA,CAAa,CACT,IAAIE,KAAOF,GAAKG,CAAAA,SAChB,IAAI,CAACD,IAAL,EAAaA,IAAKL,CAAAA,EAAlB,EAAwBG,GAAKH,CAAAA,EAA7B,CACI,KACAK,KAAKE,CAAAA,IAAKC,CAAAA,OAAd,EAAyBH,IAAKN,CAAAA,IAA9B,EAAsCM,IAAKL,CAAAA,EAA3C,EACIE,IACA,CADOC,GACP,CAAAA,GAAA;AAAOE,IAAKI,CAAAA,WAFhB,EAKIN,GALJ,CAKWE,IATF,CAYb,MAAOH,KAdoC,CAgB/CQ,QAASA,YAAW,CAACR,IAAD,CAAOJ,GAAP,CAAYD,IAAZ,CAAkBc,QAAlB,CAA4B,CAG5C,IAFA,IAAIC,EAEJ,CAAOV,IAAKH,CAAAA,IAAZ,EAAoBG,IAAKF,CAAAA,EAAzB,GACY,CAAP,CAAAH,IAAA,CAAWK,IAAKH,CAAAA,IAAhB,EAAwBD,GAAxB,CAA8BI,IAAKH,CAAAA,IAAnC,CAA0CD,GAD/C,IAEY,CAAC,CAAR,CAAAD,IAAA,CAAYK,IAAKF,CAAAA,EAAjB,EAAuBF,GAAvB,CAA6BI,IAAKF,CAAAA,EAAlC,CAAuCF,GAF5C,EAAA,CAEkD,CAC9C,IAAIe,OAAS,CAACF,QAAD,EAAaT,IAAb,WAA6BY,SAA7B,EAAsD,CAAtD,CAAyCZ,IAAKa,CAAAA,KAA9C,CAA0D,IAA1D,CAAiEb,IAAKW,CAAAA,MACnF,IAAI,CAACA,MAAL,CACI,MAAOX,KACXA,KAAA,CAAOW,MAJuC,CAOlD,GAAIF,QAAJ,CACI,IAAK,IAAIR,KAAOD,IAAX,CAAiBW,OAASV,IAAKU,CAAAA,MAApC,CAA4CA,MAA5C,CAAoDV,IAAA,CAAOU,MAAP,CAAeA,MAAf,CAAwBV,IAAKU,CAAAA,MAAjF,CACQV,IAAJ,WAAoBW,SAApB,EAA6C,CAA7C,CAAgCX,IAAKY,CAAAA,KAArC,GAA4F,IAAzC,IAACH,EAAD,CAAMC,MAAOG,CAAAA,KAAP,CAAalB,GAAb,CAAkBD,IAAlB,CAAwB,CAAA,CAAxB,CAAN,GAAwD,IAAK,EAA7D,GAAiDe,EAAjD,CAAiE,IAAK,EAAtE,CAA0EA,EAAGb,CAAAA,IAAhI,GAAyII,IAAKJ,CAAAA,IAA9I;CACIG,IADJ,CACWW,MADX,CAGR,KAAA,CAAA,CAAA,CAAS,CACDI,EAAAA,CAAQf,IAAKc,CAAAA,KAAL,CAAWlB,GAAX,CAAgBD,IAAhB,CAAsBc,QAAtB,CACZ,IAAI,CAACM,EAAL,CACI,MAAOf,KACXA,KAAA,CAAOe,EAJF,CAjBmC,CAyHhDC,QAASA,YAAW,CAAChB,IAAD,CAAOK,IAAP,CAAaY,MAAb,CAAqBC,KAArB,CAA4B,CACxCC,IAAAA,CAAMnB,IAAKoB,CAAAA,MAAf,KAAuBC,OAAS,EAChC,IAAI,CAACF,IAAIG,CAAAA,UAAJ,EAAL,CACI,MAAOD,OACX,IAAc,IAAd,EAAIJ,MAAJ,CACI,IAAA,CAAO,CAACE,IAAId,CAAAA,IAAKkB,CAAAA,EAAT,CAAYN,MAAZ,CAAR,CAAA,CACI,GAAI,CAACE,IAAIK,CAAAA,WAAJ,EAAL,CACI,MAAOH,OACnB,KAAA,CAAA,CAAA,CAAS,CACL,GAAa,IAAb,EAAIH,KAAJ,EAAqBC,IAAId,CAAAA,IAAKkB,CAAAA,EAAT,CAAYL,KAAZ,CAArB,CACI,MAAOG,OACPF,KAAId,CAAAA,IAAKkB,CAAAA,EAAT,CAAYlB,IAAZ,CAAJ,EACIgB,MAAOI,CAAAA,IAAP,CAAYN,IAAInB,CAAAA,IAAhB,CACJ,IAAI,CAACmB,IAAIK,CAAAA,WAAJ,EAAL,CACI,MAAgB,KAAT,EAAAN,KAAA,CAAgBG,MAAhB,CAAyB,EAN/B,CARmC,CAyThDK,QAASA,SAAQ,CAACC,IAAD,CAAO,CACpB,MAAOA,KAAKC,CAAAA,QAASC,CAAAA,IAAd,CAAmBC,EAAA,EAAMA,EAAN,WAAoBC,WAApB;AAAkC,CAACD,EAAGzB,CAAAA,IAAK2B,CAAAA,WAA3C,EAA0DN,QAAA,CAASI,EAAT,CAA7E,CADa,CAGxBG,QAASA,UAAS,CAACC,IAAD,CAAO,CAMrBC,QAASA,SAAQ,CAACC,WAAD,CAAcC,MAAd,CAAsBT,QAAtB,CAAgCU,SAAhC,CAA2CC,QAA3C,CAAqD,CAClE,IAAI,CAAEC,EAAF,CAAMC,KAAN,CAAaC,GAAb,CAAkBC,IAAlB,CAAA,CAA2BvB,MAE/B,KADA,IAAIwB,iBAAmBC,SACvB,CAAc,CAAd,CAAOF,IAAP,CAAA,CAAiB,CACbvB,MAAO0B,CAAAA,IAAP,EACA,IAAY,CAAC,CAAb,EAAIH,IAAJ,CAA4B,CAExBf,QAASH,CAAAA,IAAT,CADWsB,MAAA/C,CAAOwC,EAAPxC,CACX,CACAsC,UAAUb,CAAAA,IAAV,CAAegB,KAAf,CAAuBL,WAAvB,CACA,OAJwB,CAMvB,GAAY,CAAC,CAAb,EAAIO,IAAJ,CAAoC,CACrCK,WAAA,CAAcR,EACd,OAFqC,CAIpC,GAAY,CAAC,CAAb,EAAIG,IAAJ,CAAgC,CACjCE,SAAA,CAAYL,EACZ,OAFiC,CAKjC,KAAM,KAAIS,UAAJ,CAAe,6BAA6BN,IAA7B,EAAf,CAAN,CAjBS,CAHiD,IAuB9DtC,KAAO6C,KAAA,CAAMV,EAAN,CAvBuD,CAwB9DW,kBAAWV,KAAXU,CAAmBf,WAxB2C,CAyB9D,eAAA,IAAA,eAAA;AAAA,GAAA,CAAA,KAAA,EAAA,eAAA,CAAA,CAAmC,IAAA,OAAA,MAAA,CAAA,GAAA,CAAA,MAkFnCgB,OAAAA,CAAOhC,MAAOgC,CAAAA,IAAP,EAP4B,KAQzBX,eAAVE,eAAUF,CAAH,CAR4B,KAQdY,KAAO,CARO,CAQJC,SAAWF,MAAKV,CAAAA,GAAhBY,CAAsBC,eARlB,CASnClC,OAAS,CAAEsB,KAAM,CAAR,CAAWF,MAAO,CAAlB,CAAqBY,KAAM,CAA3B,CACb,EAAA,CAAM,IAAK,IAAIhB,gBAASe,MAAKxD,CAAAA,GAAdyC,CAAoBmB,MAA7B,CAAsCJ,MAAKxD,CAAAA,GAA3C,CAAiDyC,eAAjD,CAAA,CAA0D,CAC5D,IAAIoB,SAAWL,MAAKT,CAAAA,IAEpB,IAAIS,MAAKZ,CAAAA,EAAT,EAxFmCD,QAwFnC,EAAuC,CAAvC,EAA2BkB,QAA3B,CAA0C,CAGtCpC,MAAOsB,CAAAA,IAAP,CAAcA,eACdtB,OAAOoB,CAAAA,KAAP,CAAeA,cACfpB,OAAOgC,CAAAA,IAAP,CAAcA,IACdA,KAAA,EAAQ,CACRV,gBAAA,EAAQ,CACRS,OAAKN,CAAAA,IAAL,EACA,SATsC,CAW1C,IAAIK,SAAWC,MAAKxD,CAAAA,GAAhBuD,CAAsBM,QAC1B,IAAe,CAAf,CAAIA,QAAJ,EAAoBN,QAApB;AAA+Bd,eAA/B,EAAyCe,MAAKX,CAAAA,KAA9C,CAAsDa,QAAtD,CACI,KACJ,KAAII,aAAeN,MAAKZ,CAAAA,EAAL,EAAWmB,aAAX,CAA2B,CAA3B,CAA+B,CAAlD,CACIC,UAAYR,MAAKX,CAAAA,KAErB,KADAW,MAAKN,CAAAA,IAAL,EACA,CAAOM,MAAKxD,CAAAA,GAAZ,CAAkBuD,QAAlB,CAAA,CAA4B,CACxB,GAAgB,CAAhB,CAAIC,MAAKT,CAAAA,IAAT,CACI,GAAiB,CAAC,CAAlB,EAAIS,MAAKT,CAAAA,IAAT,CACIe,YAAA,EAAgB,CADpB,KAGI,OAAM,CAJd,KAMSN,OAAKZ,CAAAA,EAAT,EAAemB,aAAf,GACDD,YADC,EACe,CADf,CAGLN,OAAKN,CAAAA,IAAL,EAVwB,CAY5BL,cAAA,CAAQmB,SACRjB,gBAAA,EAAQc,QACRJ,KAAA,EAAQK,YAlCoD,CAoChE,GAAe,CAAf,CAzHuCnB,QAyHvC,EAAoBI,eAApB,EAA4Ba,MAA5B,CACInC,MAAOsB,CAAAA,IAEP,CAFcA,eAEd,CADAtB,MAAOoB,CAAAA,KACP,CADeA,cACf,CAAApB,MAAOgC,CAAAA,IAAP,CAAcA,IA5HqB,gBAAA,CAAA,MAAA,CA8HlB,CAAd,CAAAhC,MAAOsB,CAAAA,IAAP;AAAkBtB,MAAlB,CAA2BwC,IAAAA,EA9H9B,CAAJ,GAAI,eAAJ,CAAgG,CAExF3B,iBAAAA,CAAO,IAAI4B,WAAJ,CAAgBC,MAAOpB,CAAAA,IAAvB,CAA8BoB,MAAOV,CAAAA,IAArC,CACPW,KAAAA,CAAS5C,MAAOxB,CAAAA,GAAhBoE,CAAsBD,MAAOpB,CAAAA,IACjC,KADuC9B,gBACvC,CAD+CqB,iBAAK+B,CAAAA,MACpD,CAAO7C,MAAOxB,CAAAA,GAAd,CAAoBoE,IAApB,CAAA,CACInD,gBAAA,CAAQqD,YAAA,CAAaH,MAAOtB,CAAAA,KAApB,CAA2BP,iBAA3B,CAAiCrB,gBAAjC,CACZb,KAAA,CAAO,IAAI+B,UAAJ,CAAeG,iBAAf,CAAqBQ,GAArB,CAA2BqB,MAAOtB,CAAAA,KAAlC,CAAyC0B,OAAzC,CACPhB,kBAAA,CAAWY,MAAOtB,CAAAA,KAAlB,CAA0BL,WAPkE,CAAhG,IASK,CACG4B,MAAAA,CAAS5C,MAAOxB,CAAAA,GAAhBoE,CAAsBrB,IAC1BvB,OAAO0B,CAAAA,IAAP,EACIsB,YAAAA,CAAgB,EAAIC,SAAAA,CAAiB,EACrCC,OAAAA,CAAgB9B,EAAA,EAAMmB,aAAN,CAAsBnB,EAAtB,CAA2B,CAAC,CAC5C+B,gBAAAA,CAAY,CAChB,KADmBC,cACnB;AAD6B9B,GAC7B,CAAOtB,MAAOxB,CAAAA,GAAd,CAAoBoE,MAApB,CAAA,CACyB,CAArB,EAAIM,MAAJ,EAA0BlD,MAAOoB,CAAAA,EAAjC,EAAuC8B,MAAvC,EAAuE,CAAvE,EAAwDlD,MAAOuB,CAAAA,IAA/D,EACQvB,MAAOsB,CAAAA,GAKX,EALkB8B,cAKlB,CAL4BjB,eAK5B,GAJIkB,cAAA,CAAeL,WAAf,CAA8BC,QAA9B,CAA8C5B,KAA9C,CAAqD8B,eAArD,CAAgEnD,MAAOsB,CAAAA,GAAvE,CAA4E8B,cAA5E,CAAqFF,MAArF,CAAoG1B,gBAApG,CAEA,CADA2B,eACA,CADYH,WAAcH,CAAAA,MAC1B,CAAAO,cAAA,CAAUpD,MAAOsB,CAAAA,GAErB,EAAAtB,MAAO0B,CAAAA,IAAP,EANJ,EASIX,QAAA,CAASM,KAAT,CAAgBuB,MAAhB,CAAwBI,WAAxB,CAAuCC,QAAvC,CAAuDC,MAAvD,CAGa,EAArB,EAAIA,MAAJ,EAAsC,CAAtC,CAA0BC,eAA1B,EAA2CA,eAA3C,CAAuDH,WAAcH,CAAAA,MAArE,EACIQ,cAAA,CAAeL,WAAf,CAA8BC,QAA9B,CAA8C5B,KAA9C,CAAqD8B,eAArD,CAAgE9B,KAAhE,CAAuE+B,cAAvE,CAAgFF,MAAhF;AAA+F1B,gBAA/F,CACJwB,YAAcM,CAAAA,OAAd,EACAL,SAAeK,CAAAA,OAAf,EACoB,EAAC,CAArB,CAAIJ,MAAJ,EAAsC,CAAtC,CAA0BC,eAA1B,EACQI,gBACJ,CADWC,YAAA,CAAavE,IAAb,CACX,CAAAL,IAAA,CAAO6E,YAAA,CAAaxE,IAAb,CAAmB+D,WAAnB,CAAkCC,QAAlC,CAAkD,CAAlD,CAAqDD,WAAcH,CAAAA,MAAnE,CAA2E,CAA3E,CAA8EvB,GAA9E,CAAoFD,KAApF,CAA2FkC,gBAA3F,CAAiGA,gBAAjG,CAFX,EAKI3E,IALJ,CAKW8E,QAAA,CAASzE,IAAT,CAAe+D,WAAf,CAA8BC,QAA9B,CAA8C3B,GAA9C,CAAoDD,KAApD,CAA2DG,gBAA3D,CAA8EF,GAA9E,CA5BV,CA+BLd,QAASH,CAAAA,IAAT,CAAczB,IAAd,CACAsC,UAAUb,CAAAA,IAAV,CAAe0B,iBAAf,CAlEkE,CAoEtEyB,QAASA,aAAY,CAACvE,IAAD,CAAO,CACxB,MAAO,CAACuB,QAAD,CAAWU,SAAX,CAAsB2B,MAAtB,CAAA,EAAiC,CAAA,IAChCpB,UAAY,CADoB,CACjBkC,MAAQnD,QAASqC,CAAAA,MAAjBc,CAA0B,CADT,CACY5E,IADZ,CACkB6E,aACtD,IAAa,CAAb,EAAID,KAAJ,GAAmB5E,IAAnB;AAA0ByB,QAAA,CAASmD,KAAT,CAA1B,WAAsDE,KAAtD,CAA4D,CACxD,GAAI,CAACF,KAAL,EAAc5E,IAAKE,CAAAA,IAAnB,EAA2BA,IAA3B,EAAmCF,IAAK8D,CAAAA,MAAxC,EAAkDA,MAAlD,CACI,MAAO9D,KACX,IAAI6E,aAAJ,CAAoB7E,IAAK+E,CAAAA,IAAL,CAAUC,QAAStC,CAAAA,SAAnB,CAApB,CACIA,SAAA,CAAYP,SAAA,CAAUyC,KAAV,CAAZ,CAA+B5E,IAAK8D,CAAAA,MAApC,CAA6Ce,aAJO,CAM5D,MAAOF,SAAA,CAASzE,IAAT,CAAeuB,QAAf,CAAyBU,SAAzB,CAAoC2B,MAApC,CAA4CpB,SAA5C,CAR6B,CADhB,CAY5B4B,QAASA,eAAc,CAAC7C,QAAD,CAAWU,SAAX,CAAsB8C,IAAtB,CAA4BC,CAA5B,CAA+BxF,IAA/B,CAAqCC,EAArC,CAAyCO,IAAzC,CAA+CwC,SAA/C,CAA0D,CAAA,IACzEuB,cAAgB,EADyD,CACrDC,eAAiB,EACzC,KAAA,CAAOzC,QAASqC,CAAAA,MAAhB,CAAyBoB,CAAzB,CAAA,CACIjB,aAAc3C,CAAAA,IAAd,CAAmBG,QAAS0D,CAAAA,GAAT,EAAnB,CACA,CAAAjB,cAAe5C,CAAAA,IAAf,CAAoBa,SAAUgD,CAAAA,GAAV,EAApB,CAAsCF,IAAtC,CAA6CvF,IAA7C,CAEJ+B,SAASH,CAAAA,IAAT,CAAcqD,QAAA,CAASX,OAAQjB,CAAAA,KAAR,CAAc7C,IAAd,CAAT;AAA8B+D,aAA9B,CAA6CC,cAA7C,CAA6DvE,EAA7D,CAAkED,IAAlE,CAAwEgD,SAAxE,CAAoF/C,EAApF,CAAd,CACAwC,UAAUb,CAAAA,IAAV,CAAe5B,IAAf,CAAsBuF,IAAtB,CAP6E,CASjFN,QAASA,SAAQ,CAACzE,IAAD,CAAOuB,QAAP,CAAiBU,SAAjB,CAA4B2B,MAA5B,CAAoCpB,SAAA,CAAY,CAAhD,CAAmD0C,KAAnD,CAA0D,CACvE,GAAIvC,WAAJ,CAAiB,CACb,IAAIwC,KAAO,CAACL,QAASnC,CAAAA,WAAV,CAAuBA,WAAvB,CACXuC,MAAA,CAAQA,KAAA,CAAQ,CAACC,IAAD,CAAOC,CAAAA,MAAP,CAAcF,KAAd,CAAR,CAA+B,CAACC,IAAD,CAF1B,CAID,EAAhB,CAAI3C,SAAJ,GACQ2C,SACJ,CADW,CAACL,QAAStC,CAAAA,SAAV,CAAqBA,SAArB,CACX,CAAA0C,KAAA,CAAQA,KAAA,CAAQ,CAACC,SAAD,CAAOC,CAAAA,MAAP,CAAcF,KAAd,CAAR,CAA+B,CAACC,SAAD,CAF3C,CAIA,OAAO,KAAIP,IAAJ,CAAS5E,IAAT,CAAeuB,QAAf,CAAyBU,SAAzB,CAAoC2B,MAApC,CAA4CsB,KAA5C,CATgE,CAgE3ErB,QAASA,aAAY,CAACwB,WAAD,CAAc3B,MAAd,CAAsBlD,KAAtB,CAA6B,CAC9C,IAAI,CAAE2B,EAAF,CAAMC,KAAN,CAAaC,GAAb,CAAkBC,IAAlB,CAAA,CAA2BvB,MAC/BA,OAAO0B,CAAAA,IAAP,EACA,IAAY,CAAZ;AAAIH,IAAJ,EAAiBH,EAAjB,CAAsBmB,aAAtB,CAAqC,CACjC,IAAIgC,WAAa9E,KACjB,IAAW,CAAX,CAAI8B,IAAJ,CAAc,CACV,IAAIqB,OAAS5C,MAAOxB,CAAAA,GAAhBoE,EAAuBrB,IAAvBqB,CAA8B,CAA9BA,CACJ,KAAA,CAAO5C,MAAOxB,CAAAA,GAAd,CAAoBoE,MAApB,CAAA,CACInD,KAAA,CAAQqD,YAAA,CAAawB,WAAb,CAA0B3B,MAA1B,CAAkClD,KAAlC,CAHF,CAKdkD,MAAA,CAAO,EAAElD,KAAT,CAAA,CAAkB8E,UAClB5B,OAAA,CAAO,EAAElD,KAAT,CAAA,CAAkB6B,GAAlB,CAAwBgD,WACxB3B,OAAA,CAAO,EAAElD,KAAT,CAAA,CAAkB4B,KAAlB,CAA0BiD,WAC1B3B,OAAA,CAAO,EAAElD,KAAT,CAAA,CAAkB2B,EAVe,CAArC,IAYiB,CAAC,CAAb,EAAIG,IAAJ,CACDK,WADC,CACaR,EADb,CAGY,CAAC,CAHb,EAGIG,IAHJ,GAIDE,SAJC,CAIWL,EAJX,CAML,OAAO3B,MArBuC,CA9JlD,IAAIH,EACJ,KAAI,CAAE,OAAAqD,eAAF,CAAUI,OAAV,CAAmBZ,eAAA,CAj5BCqC,IAi5BpB,CAA0D7C,MAAA,CAAS,EAAnE,CAAuEY,aAAA,CAAgBQ,OAAQjB,CAAAA,KAAMe,CAAAA,MAArG,CAAA,CAAgH/B,IAApH,CACId,OAASyE,KAAMC,CAAAA,OAAN,CAAc/B,eAAd,CAAA,CAAwB,IAAIgC,gBAAJ,CAAqBhC,eAArB;AAA6BA,eAAOE,CAAAA,MAApC,CAAxB,CAAsEF,eADnF,CAEIb,MAAQiB,OAAQjB,CAAAA,KAFpB,CAGIF,YAAc,CAHlB,CAGqBH,UAAY,CAHjC,CAoLIjB,kBAAW,EApLf,CAoLmBU,mBAAY,EAC/B,KAAA,CAAoB,CAApB,CAAOlB,MAAOxB,CAAAA,GAAd,CAAA,CACIuC,QAAA,CAASD,IAAKO,CAAAA,KAAd,EAAuB,CAAvB,CAA0BP,IAAKwD,CAAAA,WAA/B,EAA8C,CAA9C,CAAiD9D,iBAAjD,CAA2DU,kBAA3D,CAAsE,CAAC,CAAvE,CACJ,KAAI2B,gBAAgC,IAAvB,IAACvD,EAAD,CAAMwB,IAAK+B,CAAAA,MAAX,GAAsC,IAAK,EAA3C,GAA+BvD,EAA/B,CAA+CA,EAA/C,CAAqDkB,iBAASqC,CAAAA,MAAT,CAAkB3B,kBAAA,CAAU,CAAV,CAAlB,CAAiCV,iBAAA,CAAS,CAAT,CAAYqC,CAAAA,MAA7C,CAAsD,CACxH,OAAO,KAAIgB,IAAJ,CAAS/B,KAAA,CAAMhB,IAAK8D,CAAAA,KAAX,CAAT,CAA4BpE,iBAAS8C,CAAAA,OAAT,EAA5B,CAAgDpC,kBAAUoC,CAAAA,OAAV,EAAhD,CAAqET,eAArE,CA1Lc,CA6LzBR,QAASA,SAAQ,CAACwC,WAAD;AAAcjG,IAAd,CAAoB,CACjC,GAAI,CAACiG,WAAYjE,CAAAA,WAAjB,EAAgChC,IAAhC,WAAgD+B,WAAhD,EAA8D/B,IAAKK,CAAAA,IAAnE,EAA2E4F,WAA3E,CACI,MAAO,EACX,KAAItD,KAAOuD,aAAcC,CAAAA,GAAd,CAAkBnG,IAAlB,CACX,IAAY,IAAZ,EAAI2C,IAAJ,CAAkB,CACdA,IAAA,CAAO,CACP,KAAK,IAAIyD,KAAT,GAAkBpG,KAAK4B,CAAAA,QAAvB,CAAiC,CAC7B,GAAIwE,KAAM/F,CAAAA,IAAV,EAAkB4F,WAAlB,EAAiC,EAAEG,KAAF,WAAmBnB,KAAnB,CAAjC,CAA2D,CACvDtC,IAAA,CAAO,CACP,MAFuD,CAI3DA,IAAA,EAAQc,QAAA,CAASwC,WAAT,CAAsBG,KAAtB,CALqB,CAOjCF,aAAcG,CAAAA,GAAd,CAAkBrG,IAAlB,CAAwB2C,IAAxB,CATc,CAWlB,MAAOA,KAf0B,CAiBrCkC,QAASA,aAAY,CAErBoB,WAFqB,CAIrBrE,iBAJqB,CAIXU,kBAJW,CAMrBzC,aANqB,CAMfC,WANe,CAQrB2C,KARqB,CAUrBwB,MAVqB,CAYrBqC,KAZqB,CAcrBC,MAdqB,CAcb,CAMJC,QAASA,OAAM,CAAC5E,QAAD,CAAWU,SAAX,CAAsBzC,IAAtB,CAA4BC,EAA5B,CAAgC2G,MAAhC,CAAwC,CACnD,IAAA,CAAmBpB,IAAnB;AAAuBvF,EAAvB,CAAA,CAA4B,CAAA,IACpB4G,UAAYrB,IADQ,KACLsB,WAAarE,SAAA,CAAU+C,IAAV,CAAhC,KAA8CuB,UAAYnD,QAAA,CAASwC,WAAT,CAAsBrE,QAAA,CAASyD,IAAT,CAAtB,CAE1D,KADAA,IAAA,EACA,CAAOA,IAAP,CAAWvF,EAAX,CAAeuF,IAAA,EAAf,CAAoB,CAChB,IAAIwB,SAAWpD,QAAA,CAASwC,WAAT,CAAsBrE,QAAA,CAASyD,IAAT,CAAtB,CACf,IAAIuB,SAAJ,CAAgBC,QAAhB,EAA4BC,QAA5B,CACI,KACJF,UAAA,EAAaC,QAJG,CAMpB,GAAIxB,IAAJ,EAASqB,SAAT,CAAqB,CAArB,CAAwB,CACpB,GAAIE,SAAJ,CAAgBE,QAAhB,CAA0B,CAClBC,UAAAA,CAAOnF,QAAA,CAAS8E,SAAT,CACXF,OAAA,CAAOO,UAAKnF,CAAAA,QAAZ,CAAsBmF,UAAKzE,CAAAA,SAA3B,CAAsC,CAAtC,CAAyCyE,UAAKnF,CAAAA,QAASqC,CAAAA,MAAvD,CAA+D3B,SAAA,CAAUoE,SAAV,CAA/D,CAAsFD,MAAtF,CACA,SAHsB,CAK1BrC,aAAc3C,CAAAA,IAAd,CAAmBG,QAAA,CAAS8E,SAAT,CAAnB,CANoB,CAAxB,IAUItC,cAAc3C,CAAAA,IAAd,CAAmBoD,YAAA,CAAaoB,WAAb;AAA0BrE,QAA1B,CAAoCU,SAApC,CAA+CoE,SAA/C,CAA0DrB,IAA1D,CAA6DsB,UAA7D,CADNrE,SAAA,CAAU+C,IAAV,CAAc,CAAd,CACM,CADazD,QAAA,CAASyD,IAAT,CAAa,CAAb,CAAgBpB,CAAAA,MAC7B,CADsC0C,UACtC,CAAiF,IAAjF,CAAuFJ,MAAvF,CAAnB,CAEJlC,eAAe5C,CAAAA,IAAf,CAAoBkF,UAApB,CAAiCF,MAAjC,CAA0ChE,KAA1C,CArBwB,CADuB,CALvD,IAAIuE,MAAQ,CACZ,KAAK,IAAI3B,EAAIxF,aAAb,CAAmBwF,CAAnB,CAAuBvF,WAAvB,CAA2BuF,CAAA,EAA3B,CACI2B,KAAA,EAASvD,QAAA,CAASwC,WAAT,CAAsBrE,iBAAA,CAASyD,CAAT,CAAtB,CACb,KAAIyB,SAAWG,IAAKC,CAAAA,IAAL,CAAmB,GAAnB,CAAWF,KAAX,CAA0B,CAA1B,CAAf,CACI5C,cAAgB,EADpB,CACwBC,eAAiB,EA0BzCmC,OAAA,CAAO5E,iBAAP,CAAiBU,kBAAjB,CAA4BzC,aAA5B,CAAkCC,WAAlC,CAAsC,CAAtC,CACA,OAAO,CAACwG,KAAD,EAAUC,MAAV,EAAkBnC,aAAlB,CAAiCC,cAAjC,CAAiDJ,MAAjD,CAhCH,CAgURkD,QAASA,WAAU,CAACC,OAAD,CAAUvH,IAAV,CAAgBC,EAAhB,CAAoB,CACnC,IAAK,IAAIuH,KAAT,GAAkBD,QAAlB,CAA2B,CACvB,GAAIC,KAAMxH,CAAAA,IAAV;AAAkBC,EAAlB,CACI,KACJ,IAAIuH,KAAMvH,CAAAA,EAAV,CAAeD,IAAf,CACI,MAAOwH,MAAMxH,CAAAA,IAAN,EAAcA,IAAd,EAAsBwH,KAAMvH,CAAAA,EAA5B,EAAkCA,EAAlC,CAAuC,CAAvC,CAAsD,CAJ1C,CAM3B,MAAO,EAP4B,CAWvCwH,QAASA,SAAQ,CAACC,GAAD,CAAMC,MAAN,CAAcC,IAAd,CAAoBC,KAApB,CAA2BpF,SAA3B,CAAsCqF,GAAtC,CAA2C,CACxD,GAAIH,MAAJ,CAAaC,IAAb,CAAmB,CAAA,IACX5H,KAAO0H,GAAIxD,CAAAA,MAAJ,CAAWyD,MAAX,CAAoB,CAApB,CACXE,MAAMjG,CAAAA,IAAN,CAAW8F,GAAIK,CAAAA,KAAJ,CAAUJ,MAAV,CAAkBC,IAAlB,CAAwB5H,IAAxB,CAD6B0H,GAAIxD,CAAAA,MAAJjE,CAAW2H,IAAX3H,CAAkB,CAAlBA,CAC7B,CAAX,CACAwC,UAAUb,CAAAA,IAAV,CAAe5B,IAAf,CAAsB8H,GAAtB,CAHe,CADqC,CAY5DE,QAASA,YAAW,CAACzG,MAAD,CAAS,CAiBzB0G,QAASA,MAAK,CAACN,MAAD,CAASC,IAAT,CAAepH,IAAf,CAAqB0H,WAArB,CAAkC9D,MAAlC,CAA0C,CACpD,IAAIoB,EAAImC,MACR,KAAA,CAAOQ,CAAA,CAAE3C,CAAF,CAAM,CAAN,CAAP,CAAkBsC,GAAlB,EAAyB3H,IAAKH,CAAAA,IAA9B,CAAA,CACIwF,CAAA,CAAI2C,CAAA,CAAE3C,CAAF,CAAM,CAAN,CAH4C,KAIhDzD,SAAW,EAJqC,CAIjCU,UAAY,EAC/BgF,SAAA,CAASC,GAAT,CAAcC,MAAd,CAAsBnC,CAAtB,CAAyBzD,QAAzB,CAAmCU,SAAnC,CAA8CyF,WAA9C,CACIlI,OAAAA,CAAOmI,CAAA,CAAE3C,CAAF,CAAM,CAAN,CAAX,KAAqBvF,GAAKkI,CAAA,CAAE3C,CAAF;AAAM,CAAN,CAE1BzD,SAASH,CAAAA,IAAT,CADe5B,MACD,CADQ8H,GACR,EADe3H,IAAKH,CAAAA,IACpB,EAD4BC,EAC5B,CADiC6H,GACjC,EADwC3H,IAAKF,CAAAA,EAC7C,EADmDkI,CAAA,CAAE3C,CAAF,CACnD,EAD2DrF,IAAKK,CAAAA,IAAKmC,CAAAA,EACrE,CAAWxC,IAAKiI,CAAAA,MAAL,EAAX,CAA2BH,KAAA,CAAMzC,CAAN,CAAU,CAAV,CAAa2C,CAAA,CAAE3C,CAAF,CAAM,CAAN,CAAb,CAAuBkC,GAAIlB,CAAAA,GAAInD,CAAAA,KAAR,CAAc8E,CAAA,CAAE3C,CAAF,CAAd,CAAvB,CAA4CxF,MAA5C,CAAkDC,EAAlD,CAAuDD,MAAvD,CAAzC,CACAyC,UAAUb,CAAAA,IAAV,CAAe5B,MAAf,CAAsBkI,WAAtB,CACAT,SAAA,CAASC,GAAT,CAAcS,CAAA,CAAE3C,CAAF,CAAM,CAAN,CAAd,CAAwBoC,IAAxB,CAA8B7F,QAA9B,CAAwCU,SAAxC,CAAmDyF,WAAnD,CACA,OAAO,KAAI9C,IAAJ,CAAS5E,IAAT,CAAeuB,QAAf,CAAyBU,SAAzB,CAAoC2B,MAApC,CAX6C,CAjB/B,IACrB,CAAEjE,IAAF,CAAA,CAAWoB,MADU,CACF8G,MAAQ,CAE/B,GACI9G,OAAOT,CAAAA,MAAP,EACA,CAAAuH,KAAA,EAFJ,OAGS,CAAC9G,MAAOO,CAAAA,IAHjB,CAHyB,KAQrB0D,WAAI,CARiB,KAQdD,KAAOhE,MAAOO,CAAAA,IARA,CAQMgG,IAAM,CACrC,KAAA,CAEQ,EADJA,GACI,CADEvC,IAAK9C,CAAAA,SAAL,CAAe+C,UAAf,CACF,CADsBjE,MAAOvB,CAAAA,IAC7B,CAAA8H,GAAA,EAAO3H,IAAKH,CAAAA,IAAZ,EAAoB8H,GAApB,CAA0BvC,IAAKxD,CAAAA,QAAL,CAAcyD,UAAd,CAAiBpB,CAAAA,MAA3C;AAAqDjE,IAAKF,CAAAA,EAA1D,CAFR,CAAQuF,UAAA,EAAR,EATyB,IAcrBkC,IAAMnC,IAAKxD,CAAAA,QAAL,CAAcyD,UAAd,CAde,CAcG2C,EAAIT,GAAIxD,CAAAA,MAgBpCqB,KAAKxD,CAAAA,QAAL,CAAcyD,UAAd,CAAA,CAAmByC,KAAA,CAAM,CAAN,CAASE,CAAE/D,CAAAA,MAAX,CAAmBkE,QAASC,CAAAA,IAA5B,CAAkC,CAAlC,CAAqCb,GAAItD,CAAAA,MAAzC,CAEnB,KAASoE,UAAT,CAAa,CAAb,CAAgBA,UAAhB,EAAqBH,KAArB,CAA4BG,UAAA,EAA5B,CACIjH,MAAOkH,CAAAA,UAAP,CAAkBtI,IAAKH,CAAAA,IAAvB,CAjCqB,CA0H7B0I,QAASA,YAAW,CAACC,KAAD,CAAQC,MAAR,CAAgB,CAAA,IAC5BC,KAAO,IADqB,CACfC,QAAUF,MAC3B,KAAK,IAAIpD,EAAI,CAAR,CAAWuD,EAAI,CAApB,CAAuBvD,CAAvB,CAA2BmD,KAAMvE,CAAAA,MAAjC,CAAyCoB,CAAA,EAAzC,CAA8C,CAAA,IACtCwD,QAAUL,KAAA,CAAMnD,CAAN,CAAU,CAAV,CAAavF,CAAAA,EADe,CACXgJ,MAAQN,KAAA,CAAMnD,CAAN,CAASxF,CAAAA,IAChD,KAAA,CAAO+I,CAAP,CAAWD,OAAQ1E,CAAAA,MAAnB,CAA2B2E,CAAA,EAA3B,CAAgC,CAC5B,IAAIG,EAAIJ,OAAA,CAAQC,CAAR,CACR,IAAIG,CAAElJ,CAAAA,IAAN,EAAciJ,KAAd,CACI,KACAC,EAAEjJ,CAAAA,EAAN,EAAY+I,OAAZ,GAEKH,IAEL,GADIC,OACJ,CADcD,IACd,CADqBD,MAAOb,CAAAA,KAAP,EACrB,EAAImB,CAAElJ,CAAAA,IAAN,CAAagJ,OAAb,EACIH,IAAA,CAAKE,CAAL,CACA;AADU,IAAII,KAAJ,CAAUD,CAAElJ,CAAAA,IAAZ,CAAkBgJ,OAAlB,CACV,CAAIE,CAAEjJ,CAAAA,EAAN,CAAWgJ,KAAX,EACIJ,IAAKO,CAAAA,MAAL,CAAYL,CAAZ,CAAgB,CAAhB,CAAmB,CAAnB,CAAsB,IAAII,KAAJ,CAAUF,KAAV,CAAiBC,CAAEjJ,CAAAA,EAAnB,CAAtB,CAHR,EAKSiJ,CAAEjJ,CAAAA,EAAN,CAAWgJ,KAAX,CACDJ,IAAA,CAAKE,CAAA,EAAL,CADC,CACW,IAAII,KAAJ,CAAUF,KAAV,CAAiBC,CAAEjJ,CAAAA,EAAnB,CADX,CAID4I,IAAKO,CAAAA,MAAL,CAAYL,CAAA,EAAZ,CAAiB,CAAjB,CAbJ,CAJ4B,CAFU,CAuB9C,MAAOD,QAzByB,CA2BpCO,QAASA,iBAAgB,CAACC,CAAD,CAAInB,CAAJ,CAAOnI,IAAP,CAAaC,EAAb,CAAiB,CAAA,IAClCsJ,GAAK,CAD6B,CAC1BC,GAAK,CADqB,CAClBC,IAAM,CAAA,CADY,CACLC,IAAM,CAAA,CAAvC,KAA8C3J,IAAM,CAAC,GACrD,KAAIyB,OAAS,EACb,KAAA,CAAA,CAAA,CAAS,CACL,IAAImI,MAAQJ,EAAA,EAAMD,CAAElF,CAAAA,MAAR,CAAiB,GAAjB,CAAuBqF,GAAA,CAAMH,CAAA,CAAEC,EAAF,CAAMtJ,CAAAA,EAAZ,CAAiBqJ,CAAA,CAAEC,EAAF,CAAMvJ,CAAAA,IAA1D,CACI4J,MAAQJ,EAAA,EAAMrB,CAAE/D,CAAAA,MAAR,CAAiB,GAAjB,CAAuBsF,GAAA,CAAMvB,CAAA,CAAEqB,EAAF,CAAMvJ,CAAAA,EAAZ,CAAiBkI,CAAA,CAAEqB,EAAF,CAAMxJ,CAAAA,IAC1D,IAAIyJ,GAAJ,EAAWC,GAAX,CAAgB,CACR9G,GAAAA,CAAQwE,IAAKyC,CAAAA,GAAL,CAAS9J,GAAT,CAAcC,IAAd,CAAZ,KAAiC6C,IAAMuE,IAAK0C,CAAAA,GAAL,CAASH,KAAT,CAAgBC,KAAhB,CAAuB3J,EAAvB,CACnC2C,IAAJ,CAAYC,GAAZ,EACIrB,MAAOI,CAAAA,IAAP,CAAY,IAAIuH,KAAJ,CAAUvG,GAAV,CAAiBC,GAAjB,CAAZ,CAHQ,CAKhB9C,GAAA,CAAMqH,IAAK0C,CAAAA,GAAL,CAASH,KAAT,CAAgBC,KAAhB,CACN,IAAW,GAAX;AAAI7J,GAAJ,CACI,KACA4J,MAAJ,EAAa5J,GAAb,GACS0J,GAAL,EAGIA,GACA,CADM,CAAA,CACN,CAAAF,EAAA,EAJJ,EACIE,GADJ,CACU,CAAA,CAFd,CAQIG,MAAJ,EAAa7J,GAAb,GACS2J,GAAL,EAGIA,GACA,CADM,CAAA,CACN,CAAAF,EAAA,EAJJ,EACIE,GADJ,CACU,CAAA,CAFd,CAnBK,CA4BT,MAAOlI,OA/B+B,CAoC1CuI,QAASA,eAAc,CAACC,MAAD,CAASpB,MAAT,CAAiB,CACpC,IAAIpH,OAAS,EACb,KAAK,IAAI,CAAE,IAAAzB,YAAF,CAAOkK,KAAP,CAAcC,IAAd,CAAT,EAAiCF,OAAjC,CAAyC,CACjC1G,MAAAA,CAAWvD,YAAXuD,EAAkB2G,KAAME,CAAAA,OAAN,CAAgBF,KAAME,CAAAA,OAAN,CAAc,CAAd,CAAiBnK,CAAAA,IAAjC,CAAwC,CAA1DsD,CAAJ,KAAkEa,OAASb,MAATa,CAAoB8F,KAAMnI,CAAAA,IAAKsC,CAAAA,MAAjG,CACIpE,KAAOoH,IAAKyC,CAAAA,GAAL,CAASK,IAAKlK,CAAAA,IAAd,CAAoBsD,MAApB,CAAX,KAA0CrD,GAAKmH,IAAK0C,CAAAA,GAAL,CAASI,IAAKjK,CAAAA,EAAd,CAAkBkE,MAAlB,CAC/C,IAAI8F,KAAME,CAAAA,OAAV,CAAmB,CACXA,MAAAA,CAAUF,KAAME,CAAAA,OAAQC,CAAAA,GAAd,CAAkBlB,CAAA,EAAK,IAAIC,KAAJ,CAAUD,CAAElJ,CAAAA,IAAZ,CAAmBD,YAAnB,CAAwBmJ,CAAEjJ,CAAAA,EAA1B,CAA+BF,YAA/B,CAAvB,CACVsK,OAAAA,CAAUhB,gBAAA,CAAiBT,MAAjB,CAAyBuB,MAAzB,CAAkCnK,IAAlC;AAAwCC,EAAxC,CACd,KAAK,IAAIuF,EAAI,CAAR,CAAWzF,IAAMC,IAAtB,CAAA,CAA6BwF,CAAA,EAA7B,CAAkC,CAC9B,IAAgC3C,IAAM,CAAlCvC,IAAkC,CAA3BkF,CAA2B,EAAtB6E,MAAQjG,CAAAA,MAAc,EAAOnE,EAAP,CAAYoK,MAAA,CAAQ7E,CAAR,CAAWxF,CAAAA,IACzD6C,IAAJ,CAAU9C,GAAV,EACIyB,MAAOI,CAAAA,IAAP,CAAY,IAAI0I,YAAJ,CAAiBvK,GAAjB,CAAsB8C,GAAtB,CAA2BoH,KAAMnI,CAAAA,IAAjC,CAAuC,CAACwB,MAAxC,CAAkD4G,IAAKlK,CAAAA,IAAvD,EAA+DD,GAA/D,CAAoEmK,IAAKjK,CAAAA,EAAzE,EAA+E4C,GAA/E,CAAZ,CACJ,IAAIvC,IAAJ,CACI,KACJP,IAAA,CAAMsK,MAAA,CAAQ7E,CAAR,CAAWvF,CAAAA,EANa,CAHnB,CAAnB,IAaIuB,OAAOI,CAAAA,IAAP,CAAY,IAAI0I,YAAJ,CAAiBtK,IAAjB,CAAuBC,EAAvB,CAA2BgK,KAAMnI,CAAAA,IAAjC,CAAuC,CAACwB,MAAxC,CAAkD4G,IAAKlK,CAAAA,IAAvD,EAA+DsD,MAA/D,CAAyE4G,IAAKjK,CAAAA,EAA9E,EAAoFkE,MAApF,CAAZ,CAhBiC,CAmBzC,MAAO3C,OArB6B,CAhoDxC+I,MAAOC,CAAAA,cAAP,CAAsB5K,OAAtB,CAA+B,YAA/B,CAA6C,CAAE6K,MAAO,CAAA,CAAT,CAA7C,CAMA,KAAIC,WAAa,CACjB,MAAMvB,MAAN,CACIwB,WAAW,CAAC3K,IAAD,CAAOC,EAAP,CAAW,CAClB,IAAKD,CAAAA,IAAL,CAAYA,IACZ,KAAKC,CAAAA,EAAL,CAAUA,EAFQ,CAD1B,CASA,KAAMqF,SAAN,CAEIqF,WAAW,CAACC,MAAA,CAAS,EAAV,CAAc,CACrB,IAAKjI,CAAAA,EAAL,CAAU+H,UAAA,EACV;IAAKG,CAAAA,OAAL,CAAe,CAAC,CAACD,MAAOC,CAAAA,OACxB,KAAKC,CAAAA,WAAL,CAAmBF,MAAOE,CAAAA,WAA1B,EAA0C,CAAA,EAAA,EAAM,CAC5C,KAAUC,MAAJ,CAAU,sDAAV,CAAN,CAD4C,CAAN,CAHrB,CAczBC,GAAG,CAACC,KAAD,CAAQ,CACP,GAAI,IAAKJ,CAAAA,OAAT,CACI,KAAM,KAAIzH,UAAJ,CAAe,wCAAf,CAAN,CACgB,UAApB,EAAI,MAAO6H,MAAX,GACIA,KADJ,CACY3C,QAAS2C,CAAAA,KAAT,CAAeA,KAAf,CADZ,CAEA,OAAQzK,KAAD,EAAU,CACTgB,IAAAA,CAASyJ,KAAA,CAAMzK,IAAN,CACb,OAAkBwD,KAAAA,EAAX,GAAAxC,IAAA,CAAuB,IAAvB,CAA8B,CAAC,IAAD,CAAOA,IAAP,CAFxB,CALV,CAhBf,CA+BA8D,QAAS4F,CAAAA,QAAT,CAAoB,IAAI5F,QAAJ,CAAa,CAAEwF,YAAaK,GAAAL,EAAOK,GAAIlD,CAAAA,KAAJ,CAAU,GAAV,CAAtB,CAAb,CAIpB3C,SAAS8F,CAAAA,QAAT,CAAoB,IAAI9F,QAAJ,CAAa,CAAEwF,YAAaK,GAAAL,EAAOK,GAAIlD,CAAAA,KAAJ,CAAU,GAAV,CAAtB,CAAb,CAIpB3C,SAAS+F,CAAAA,KAAT;AAAiB,IAAI/F,QAAJ,CAAa,CAAEwF,YAAaK,GAAAL,EAAOK,GAAIlD,CAAAA,KAAJ,CAAU,GAAV,CAAtB,CAAb,CAIjB3C,SAASnC,CAAAA,WAAT,CAAuB,IAAImC,QAAJ,CAAa,CAAEuF,QAAS,CAAA,CAAX,CAAb,CAKvBvF,SAAStC,CAAAA,SAAT,CAAqB,IAAIsC,QAAJ,CAAa,CAAEuF,QAAS,CAAA,CAAX,CAAb,CAIrBvF,SAASgG,CAAAA,OAAT,CAAmB,IAAIhG,QAAJ,CAAa,CAAEuF,QAAS,CAAA,CAAX,CAAb,CAInB,MAAMU,YAAN,CACIZ,WAAW,CAEX7I,IAFW,CAUXqI,OAVW,CAYXqB,MAZW,CAYH,CACJ,IAAK1J,CAAAA,IAAL,CAAYA,IACZ,KAAKqI,CAAAA,OAAL,CAAeA,OACf,KAAKqB,CAAAA,MAAL,CAAcA,MAHV,CAbZ,CAmBA,MAAMC,QAAUlB,MAAOmB,CAAAA,MAAP,CAAc,IAAd,CAEhB,MAAMpD,SAAN,CAEIqC,WAAW,CAKXgB,IALW,CAOXjG,KAPW,CAUX/C,EAVW,CAYXiJ,KAAA,CAAQ,CAZG,CAYA,CACP,IAAKD,CAAAA,IAAL,CAAYA,IACZ,KAAKjG,CAAAA,KAAL,CAAaA,KACb,KAAK/C,CAAAA,EAAL,CAAUA,EACV,KAAKiJ,CAAAA,KAAL,CAAaA,KAJN,CAMJC,aAAM,CAACC,IAAD,CAAO,CAChB,IAAIpG,MAAQoG,IAAKpG,CAAAA,KAAL,EAAcoG,IAAKpG,CAAAA,KAAMtB,CAAAA,MAAzB,CAAkCmG,MAAOmB,CAAAA,MAAP,CAAc,IAAd,CAAlC;AAAwDD,OAApE,CAGIjL,KAAO,IAAI8H,QAAJ,CAAawD,IAAKH,CAAAA,IAAlB,EAA0B,EAA1B,CAA8BjG,KAA9B,CAAqCoG,IAAKnJ,CAAAA,EAA1C,EAFEmJ,IAAKC,CAAAA,GAAL,CAAW,CAAX,CAAyB,CAE3B,GAFiCD,IAAKE,CAAAA,OAAL,CAAe,CAAf,CAAiC,CAElE,GADNF,IAAKG,CAAAA,KAAL,CAAa,CAAb,CAA6B,CACvB,GAD0C,IAAb,EAAAH,IAAKH,CAAAA,IAAL,CAAoB,CAApB,CAAwC,CACrE,EACX,IAAIG,IAAKpG,CAAAA,KAAT,CACI,IAAK,IAAIwG,GAAT,GAAgBJ,KAAKpG,CAAAA,KAArB,CAGI,GAFKM,KAAMC,CAAAA,OAAN,CAAciG,GAAd,CAEDA,GADAA,GACAA,CADMA,GAAA,CAAI1L,IAAJ,CACN0L,EAAAA,GAAJ,CAAS,CACL,GAAIA,GAAA,CAAI,CAAJ,CAAOrB,CAAAA,OAAX,CACI,KAAM,KAAIzH,UAAJ,CAAe,4CAAf,CAAN,CACJsC,KAAA,CAAMwG,GAAA,CAAI,CAAJ,CAAOvJ,CAAAA,EAAb,CAAA,CAAmBuJ,GAAA,CAAI,CAAJ,CAHd,CAMjB,MAAO1L,KAfS,CAmBpB6E,IAAI,CAACA,IAAD,CAAO,CAAE,MAAO,KAAKK,CAAAA,KAAL,CAAWL,IAAK1C,CAAAA,EAAhB,CAAT,CAEP,SAAQ,EAAA,CAAE,MAAoC,EAApC,EAAQ,IAAKiJ,CAAAA,KAAb,CAAqB,CAArB,CAAF,CAER,aAAY,EAAA,CAAE,MAAwC,EAAxC,EAAQ,IAAKA,CAAAA,KAAb,CAAqB,CAArB,CAAF,CAEZ,WAAU,EAAA,CAAE,MAAsC,EAAtC,EAAQ,IAAKA,CAAAA,KAAb,CAAqB,CAArB,CAAF,CAGV,eAAc,EAAA,CAAE,MAA0C,EAA1C;CAAQ,IAAKA,CAAAA,KAAb,CAAqB,CAArB,CAAF,CAGlBlK,EAAE,CAACiK,IAAD,CAAO,CACL,GAAmB,QAAnB,EAAI,MAAOA,KAAX,CAA6B,CACzB,GAAI,IAAKA,CAAAA,IAAT,EAAiBA,IAAjB,CACI,MAAO,CAAA,CACX,KAAIN,MAAQ,IAAKhG,CAAAA,IAAL,CAAUC,QAAS+F,CAAAA,KAAnB,CACZ,OAAOA,MAAA,CAA8B,CAAC,CAA/B,CAAQA,KAAMc,CAAAA,OAAN,CAAcR,IAAd,CAAR,CAAmC,CAAA,CAJjB,CAM7B,MAAO,KAAKhJ,CAAAA,EAAZ,EAAkBgJ,IAPb,CAeFV,YAAK,CAACb,GAAD,CAAM,CACd,IAAIgC,OAAS7B,MAAOmB,CAAAA,MAAP,CAAc,IAAd,CACb,KAAK,IAAIrG,IAAT,GAAiB+E,IAAjB,CACI,IAAK,IAAIuB,IAAT,GAAiBtG,KAAK4C,CAAAA,KAAL,CAAW,GAAX,CAAjB,CACImE,MAAA,CAAOT,IAAP,CAAA,CAAevB,GAAA,CAAI/E,IAAJ,CACvB,OAAQlF,KAAD,EAAU,CACb,IAAK,IAAIkM,OAASlM,IAAKkF,CAAAA,IAAL,CAAUC,QAAS+F,CAAAA,KAAnB,CAAb,CAAwC7F,EAAI,CAAC,CAAlD,CAAqDA,CAArD,EAA0D6G,MAAA,CAASA,MAAOjI,CAAAA,MAAhB,CAAyB,CAAnF,EAAuFoB,CAAA,EAAvF,CAA4F,CACxF,IAAI8G,MAAQF,MAAA,CAAW,CAAJ,CAAA5G,CAAA,CAAQrF,IAAKwL,CAAAA,IAAb,CAAoBU,MAAA,CAAO7G,CAAP,CAA3B,CACZ,IAAI8G,KAAJ,CACI,MAAOA,MAH6E,CAD/E,CALH,CAlEtB,CAiFAhE,QAASC,CAAAA,IAAT,CAAgB,IAAID,QAAJ,CAAa,EAAb,CAAiBiC,MAAOmB,CAAAA,MAAP,CAAc,IAAd,CAAjB;AAAsC,CAAtC,CAAyC,CAAzC,CAQhB,MAAMa,QAAN,CAGI5B,WAAW,CAEXtH,KAFW,CAEJ,CACH,IAAKA,CAAAA,KAAL,CAAaA,KACb,KAAK,IAAImC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBnC,KAAMe,CAAAA,MAA1B,CAAkCoB,CAAA,EAAlC,CACI,GAAInC,KAAA,CAAMmC,CAAN,CAAS7C,CAAAA,EAAb,EAAmB6C,CAAnB,CACI,KAAM,KAAIpC,UAAJ,CAAe,6EAAf,CAAN,CAJL,CASPoJ,MAAM,CAAC,GAAG9G,KAAJ,CAAW,CACb,IAAI+G,SAAW,EACf,KAAK,IAAIjM,IAAT,GAAiB,KAAK6C,CAAAA,KAAtB,CAA6B,CACzB,IAAIqJ,SAAW,IACf,KAAK,IAAIC,MAAT,GAAmBjH,MAAnB,CAA0B,CACtB,IAAIsF,IAAM2B,MAAA,CAAOnM,IAAP,CACNwK,IAAJ,GACS0B,QAEL,GADIA,QACJ,CADenC,MAAOqC,CAAAA,MAAP,CAAc,EAAd,CAAkBpM,IAAKkF,CAAAA,KAAvB,CACf,EAAAgH,QAAA,CAAS1B,GAAA,CAAI,CAAJ,CAAOrI,CAAAA,EAAhB,CAAA,CAAsBqI,GAAA,CAAI,CAAJ,CAH1B,CAFsB,CAQ1ByB,QAAS7K,CAAAA,IAAT,CAAc8K,QAAA,CAAW,IAAIpE,QAAJ,CAAa9H,IAAKmL,CAAAA,IAAlB,CAAwBe,QAAxB,CAAkClM,IAAKmC,CAAAA,EAAvC,CAA2CnC,IAAKoL,CAAAA,KAAhD,CAAX,CAAoEpL,IAAlF,CAVyB,CAY7B,MAAO,KAAI+L,OAAJ,CAAYE,QAAZ,CAdM,CAdrB;AAzL6G,MAwNvGI,WAAa,IAAIC,OAxNsF,CAwN3EC,gBAAkB,IAAID,OAexD,MAAM1H,KAAN,CAEIuF,WAAW,CAEXnK,IAFW,CAIXuB,QAJW,CAOXU,SAPW,CASX2B,MATW,CAWXsB,KAXW,CAWJ,CACH,IAAKlF,CAAAA,IAAL,CAAYA,IACZ,KAAKuB,CAAAA,QAAL,CAAgBA,QAChB,KAAKU,CAAAA,SAAL,CAAiBA,SACjB,KAAK2B,CAAAA,MAAL,CAAcA,MAEd,KAAKsB,CAAAA,KAAL,CAAa,IACb,IAAIA,KAAJ,EAAaA,KAAMtB,CAAAA,MAAnB,CAA2B,CACvB,IAAKsB,CAAAA,KAAL,CAAa6E,MAAOmB,CAAAA,MAAP,CAAc,IAAd,CACb,KAAK,IAAI,CAACrG,IAAD,CAAOoF,KAAP,CAAT,EAA0B/E,MAA1B,CACI,IAAKA,CAAAA,KAAL,CAA0B,QAAf,EAAA,MAAOL,KAAP,CAA0BA,IAA1B,CAAiCA,IAAK1C,CAAAA,EAAjD,CAAA,CAAuD8H,KAHpC,CAPxB,CAcPuC,QAAQ,EAAG,CACP,IAAI1B,QAAU,IAAKjG,CAAAA,IAAL,CAAUC,QAASgG,CAAAA,OAAnB,CACd,IAAIA,OAAJ,EAAe,CAACA,OAAQnB,CAAAA,OAAxB,CACI,MAAOmB,QAAQxJ,CAAAA,IAAKkL,CAAAA,QAAb,EACPjL,QAAAA,CAAW,EACf,KAAK,IAAIE,EAAT,GAAe,KAAKF,CAAAA,QAApB,CAA8B,CAC1B,IAAIoJ;AAAMlJ,EAAG+K,CAAAA,QAAH,EACN7B,IAAJ,GACQpJ,OAEJ,GADIA,OACJ,EADgB,GAChB,EAAAA,OAAA,EAAYoJ,GAHhB,CAF0B,CAQ9B,MAAQ,KAAK3K,CAAAA,IAAKmL,CAAAA,IAAX,EACF,IAAKsB,CAAAA,IAAL,CAAU,IAAKzM,CAAAA,IAAKmL,CAAAA,IAApB,CAAA,EAA6B,CAAC,IAAKnL,CAAAA,IAAKC,CAAAA,OAAxC,CAAkDyM,IAAKC,CAAAA,SAAL,CAAe,IAAK3M,CAAAA,IAAKmL,CAAAA,IAAzB,CAAlD,CAAmF,IAAKnL,CAAAA,IAAKmL,CAAAA,IAD3F,GAEE5J,OAASqC,CAAAA,MAAT,CAAkB,GAAlB,CAAwBrC,OAAxB,CAAmC,GAAnC,CAAyC,EAF3C,EAAkBA,OAblB,CAoBXR,MAAM,CAACxB,GAAD,CAAMD,IAAA,CAAO,CAAb,CAAgB,CAClB,IAAIsN,MAAgB,IAAhBA,EAASrN,GAATqN,EAAwBP,UAAWvG,CAAAA,GAAX,CAAe,IAAf,CAAxB8G,EAAiD,IAAKC,CAAAA,OACtD9L,MAAAA,CAAS,IAAI+L,UAAJ,CAAeF,KAAf,CACF,KAAX,EAAIrN,GAAJ,GACIwB,KAAOgM,CAAAA,MAAP,CAAcxN,GAAd,CAAmBD,IAAnB,CACA,CAAA+M,UAAWrG,CAAAA,GAAX,CAAe,IAAf,CAAqBjF,KAAOiM,CAAAA,KAA5B,CAFJ,CAIA,OAAOjM,MAPW,CAatBkM,UAAU,EAAG,CACT,MAAO,KAAIH,UAAJ,CAAe,IAAKD,CAAAA,OAApB,CAA6B,CAA7B,CADE,CAKT,WAAU,EAAA,CACV,MAAO,KAAItM,QAAJ,CAAa,IAAb,CAAmB,CAAnB,CAAsB,CAAtB,CAAyB,IAAzB,CADG,CAQd2M,OAAO,CAAC3N,GAAD;AAAMD,IAAA,CAAO,CAAb,CAAgB,CACfK,GAAAA,CAAOQ,WAAA,CAAYkM,UAAWvG,CAAAA,GAAX,CAAe,IAAf,CAAZ,EAAoC,IAAK+G,CAAAA,OAAzC,CAAkDtN,GAAlD,CAAuDD,IAAvD,CAA6D,CAAA,CAA7D,CACX+M,WAAWrG,CAAAA,GAAX,CAAe,IAAf,CAAqBrG,GAArB,CACA,OAAOA,IAHY,CAUvBwN,YAAY,CAAC5N,GAAD,CAAMD,IAAA,CAAO,CAAb,CAAgB,CACpBK,GAAAA,CAAOQ,WAAA,CAAYoM,eAAgBzG,CAAAA,GAAhB,CAAoB,IAApB,CAAZ,EAAyC,IAAK+G,CAAAA,OAA9C,CAAuDtN,GAAvD,CAA4DD,IAA5D,CAAkE,CAAA,CAAlE,CACXiN,gBAAgBvG,CAAAA,GAAhB,CAAoB,IAApB,CAA0BrG,GAA1B,CACA,OAAOA,IAHiB,CAU5ByN,OAAO,CAAC9B,IAAD,CAAO,CACV,IAAI,CAAE7K,KAAF,CAAS4M,KAAT,CAAgB7N,IAAA,CAAO,CAAvB,CAA0BC,EAAA,CAAK,IAAKmE,CAAAA,MAApC,CAAA,CAA+C0H,IACnD,KAAK,IAAIgC,EAAI,IAAKvM,CAAAA,MAAL,EAAR,CAAuB+E,IAAM,EAAAA,EAAMwH,CAAE3N,CAAAA,IAA1C,CAAA,CAAA,CAAkD,CAC1C4N,IAAAA,CAAY,CAAA,CAChB,IAAID,CAAE9N,CAAAA,IAAN,EAAcC,EAAd,EAAoB6N,CAAE7N,CAAAA,EAAtB,EAA4BD,IAA5B,GAAqC8N,CAAEtN,CAAAA,IAAK2B,CAAAA,WAA5C,EAAgG,CAAA,CAAhG,GAA2DlB,KAAA,CAAM6M,CAAEtN,CAAAA,IAAR,CAAcsN,CAAE9N,CAAAA,IAAhB,CAAsB8N,CAAE7N,CAAAA,EAAxB,CAA4BqG,GAA5B,CAA3D,EAAwG,CACpG,GAAIwH,CAAErM,CAAAA,UAAF,EAAJ,CACI,QACCqM,EAAEtN,CAAAA,IAAK2B,CAAAA,WAAZ,GACI4L,IADJ,CACgB,CAAA,CADhB,CAHoG,CAMxG,IAAA,CAAA,CAAA,CAAS,CACDA,IAAJ;AAAiBF,KAAjB,EACIA,KAAA,CAAMC,CAAEtN,CAAAA,IAAR,CAAcsN,CAAE9N,CAAAA,IAAhB,CAAsB8N,CAAE7N,CAAAA,EAAxB,CAA4BqG,GAA5B,CACJyH,KAAA,CAAYD,CAAEtN,CAAAA,IAAK2B,CAAAA,WACnB,IAAI2L,CAAEnM,CAAAA,WAAF,EAAJ,CACI,KACJ,IAAI,CAACmM,CAAEhN,CAAAA,MAAF,EAAL,CACI,MACJiN,KAAA,CAAY,CAAA,CARP,CARqC,CAFxC,CAwBd1I,IAAI,CAACA,IAAD,CAAO,CACP,MAAQA,KAAKwF,CAAAA,OAAN,CAAuC,IAAKnF,CAAAA,KAAL,CAAa,IAAKA,CAAAA,KAAL,CAAWL,IAAK1C,CAAAA,EAAhB,CAAb,CAAmCqB,IAAAA,EAA1E,CAAgB,IAAKxD,CAAAA,IAAK6E,CAAAA,IAAV,CAAeA,IAAf,CADhB,CAMP,cAAa,EAAA,CACb,IAAI7D,OAAS,EACb,IAAI,IAAKkE,CAAAA,KAAT,CACI,IAAK,IAAI/C,EAAT,GAAe,KAAK+C,CAAAA,KAApB,CACIlE,MAAOI,CAAAA,IAAP,CAAY,CAAC,CAACe,EAAF,CAAM,IAAK+C,CAAAA,KAAL,CAAW/C,EAAX,CAAN,CAAZ,CACR,OAAOnB,OALM,CAUjBwM,OAAO,CAACpD,MAAA,CAAS,EAAV,CAAc,CACjB,MAA+B,EAAxB,EAAA,IAAK7I,CAAAA,QAASqC,CAAAA,MAAd,CAA+C,IAA/C,CACHY,YAAA,CAAasD,QAASC,CAAAA,IAAtB,CAA4B,IAAKxG,CAAAA,QAAjC,CAA2C,IAAKU,CAAAA,SAAhD,CAA2D,CAA3D,CAA8D,IAAKV,CAAAA,QAASqC,CAAAA,MAA5E,CAAoF,CAApF,CAAuF,IAAKA,CAAAA,MAA5F,CAAoG,CAACrC,QAAD,CAAWU,SAAX,CAAsB2B,MAAtB,CAAA;AAAiC,IAAIgB,IAAJ,CAAS,IAAK5E,CAAAA,IAAd,CAAoBuB,QAApB,CAA8BU,SAA9B,CAAyC2B,MAAzC,CAAiD,IAAK6J,CAAAA,UAAtD,CAArI,CAAwMrD,MAAO3F,CAAAA,QAA/M,EAA4N,CAAA,CAAClD,QAAD,CAAWU,SAAX,CAAsB2B,MAAtB,CAAA,EAAiC,IAAIgB,IAAJ,CAASkD,QAASC,CAAAA,IAAlB,CAAwBxG,QAAxB,CAAkCU,SAAlC,CAA6C2B,MAA7C,CAAjC,CAA5N,CAFa,CAMd8J,YAAK,CAAC7L,IAAD,CAAO,CAAE,MAAOD,UAAA,CAAUC,IAAV,CAAT,CA3IvB,CA8IA+C,IAAK+I,CAAAA,KAAL,CAAa,IAAI/I,IAAJ,CAASkD,QAASC,CAAAA,IAAlB,CAAwB,EAAxB,CAA4B,EAA5B,CAAgC,CAAhC,CACb,MAAMrC,iBAAN,CACIyE,WAAW,CAACzG,MAAD,CAASlD,KAAT,CAAgB,CACvB,IAAKkD,CAAAA,MAAL,CAAcA,MACd,KAAKlD,CAAAA,KAAL,CAAaA,KAFU,CAIvB,MAAK,EAAA,CAAE,MAAO,KAAKkD,CAAAA,MAAL,CAAY,IAAKlD,CAAAA,KAAjB,CAAyB,CAAzB,CAAT,CACL,SAAQ,EAAA,CAAE,MAAO,KAAKkD,CAAAA,MAAL,CAAY,IAAKlD,CAAAA,KAAjB,CAAyB,CAAzB,CAAT,CACR,OAAM,EAAA,CAAE,MAAO,KAAKkD,CAAAA,MAAL,CAAY,IAAKlD,CAAAA,KAAjB,CAAyB,CAAzB,CAAT,CACN,QAAO,EAAA,CAAE,MAAO,KAAKkD,CAAAA,MAAL,CAAY,IAAKlD,CAAAA,KAAjB;AAAyB,CAAzB,CAAT,CACP,OAAM,EAAA,CAAE,MAAO,KAAKA,CAAAA,KAAd,CACViC,IAAI,EAAG,CAAE,IAAKjC,CAAAA,KAAL,EAAc,CAAhB,CACPuC,IAAI,EAAG,CAAE,MAAO,KAAI2C,gBAAJ,CAAqB,IAAKhC,CAAAA,MAA1B,CAAkC,IAAKlD,CAAAA,KAAvC,CAAT,CAXX,CAiBA,KAAMkB,WAAN,CAEIyI,WAAW,CAEXzG,MAFW,CAIXE,MAJW,CAMXoC,GANW,CAMN,CACD,IAAKtC,CAAAA,MAAL,CAAcA,MACd,KAAKE,CAAAA,MAAL,CAAcA,MACd,KAAKoC,CAAAA,GAAL,CAAWA,GAHV,CAMD,QAAO,EAAA,CAAE,MAAO8B,SAASC,CAAAA,IAAlB,CAEXyE,QAAQ,EAAG,CACP,IAAIxL,OAAS,EACb,KAAK,IAAIR,MAAQ,CAAjB,CAAoBA,KAApB,CAA4B,IAAKkD,CAAAA,MAAOE,CAAAA,MAAxC,CAAA,CACI5C,MAAOI,CAAAA,IAAP,CAAY,IAAKwM,CAAAA,WAAL,CAAiBpN,KAAjB,CAAZ,CACA,CAAAA,KAAA,CAAQ,IAAKkD,CAAAA,MAAL,CAAYlD,KAAZ,CAAoB,CAApB,CAEZ,OAAOQ,OAAO6M,CAAAA,IAAP,CAAY,GAAZ,CANA,CASXD,WAAW,CAACpN,KAAD,CAAQ,CACf,IAA6BsN,SAAW,IAAKpK,CAAAA,MAAL,CAAYlD,KAAZ,CAAoB,CAApB,CADzB,KAEXR,KAAO,IAAKgG,CAAAA,GAAInD,CAAAA,KAAT,CADF,IAAKa,CAAAA,MAALvB,CAAY3B,KAAZ2B,CACE,CAAX,KAA+BnB;AAAShB,IAAKmL,CAAAA,IACzC,KAAKsB,CAAAA,IAAL,CAAUzL,MAAV,CAAJ,EAAyB,CAAChB,IAAKC,CAAAA,OAA/B,GACIe,MADJ,CACa0L,IAAKC,CAAAA,SAAL,CAAe3L,MAAf,CADb,CAEAR,MAAA,EAAS,CACT,IAAIsN,QAAJ,EAAgBtN,KAAhB,CACI,MAAOQ,OAEX,KADIO,IACJ,CADe,EACf,CAAOf,KAAP,CAAesN,QAAf,CAAA,CACIvM,IAASH,CAAAA,IAAT,CAAc,IAAKwM,CAAAA,WAAL,CAAiBpN,KAAjB,CAAd,CACA,CAAAA,KAAA,CAAQ,IAAKkD,CAAAA,MAAL,CAAYlD,KAAZ,CAAoB,CAApB,CAEZ,OAAOQ,OAAP,CAAgB,GAAhB,CAAsBO,IAASsM,CAAAA,IAAT,CAAc,GAAd,CAAtB,CAA2C,GAb5B,CAgBnBE,SAAS,CAACzI,UAAD,CAAawI,QAAb,CAAuBE,GAAvB,CAA4BzO,GAA5B,CAAiCD,IAAjC,CAAuC,CAAA,IACxC,CAAEoE,MAAF,CAAA,CAAa,IAD2B,CACrBuK,KAAO,CAAC,CAC/B,KAAA,CAAyBjJ,UAAzB,EAA8B8I,QAA9B,EACQ,EAAAzO,SAAA,CAAUC,IAAV,CAAgBC,GAAhB,CAAqBmE,MAAA,CAAOsB,UAAP,CAAW,CAAX,CAArB,CAAoCtB,MAAA,CAAOsB,UAAP,CAAW,CAAX,CAApC,CAAA,GACAiJ,IACI,CADGjJ,UACH,CAAM,CAAN,CAAAgJ,GAFJ,EADR,CAAwChJ,UAAxC,CAA4CtB,MAAA,CAAOsB,UAAP,CAAW,CAAX,CAA5C,EAOA,MAAOiJ,KATqC,CAYhD1G,KAAK,CAACJ,MAAD,CAASC,IAAT,CAAe5H,IAAf,CAAqBC,EAArB,CAAyB,CAC1B,IAAIkI;AAAI,IAAKjE,CAAAA,MAAb,CACI2E,KAAO,IAAI5E,WAAJ,CAAgB2D,IAAhB,CAAuBD,MAAvB,CACX,KAAK,IAAInC,EAAImC,MAAR,CAAgBoB,EAAI,CAAzB,CAA4BvD,CAA5B,CAAgCoC,IAAhC,CAAA,CACIiB,IAAA,CAAKE,CAAA,EAAL,CAGA,CAHYZ,CAAA,CAAE3C,CAAA,EAAF,CAGZ,CAFAqD,IAAA,CAAKE,CAAA,EAAL,CAEA,CAFYZ,CAAA,CAAE3C,CAAA,EAAF,CAEZ,CAFqBxF,IAErB,CADA6I,IAAA,CAAKE,CAAA,EAAL,CACA,CADYZ,CAAA,CAAE3C,CAAA,EAAF,CACZ,CADqBxF,IACrB,CAAA6I,IAAA,CAAKE,CAAA,EAAL,CAAA,CAAYZ,CAAA,CAAE3C,CAAA,EAAF,CAAZ,CAAqBmC,MAEzB,OAAO,KAAIzF,UAAJ,CAAe2G,IAAf,CAAqB5I,EAArB,CAA0BD,IAA1B,CAAgC,IAAKwG,CAAAA,GAArC,CATmB,CArDlC,CAmHA,KAAMzF,SAAN,CACI4J,WAAW,CAACxK,IAAD,CAAOuO,KAAP,CAEX1N,KAFW,CAEJ2N,OAFI,CAEK,CACZ,IAAKxO,CAAAA,IAAL,CAAYA,IACZ,KAAKuO,CAAAA,KAAL,CAAaA,KACb,KAAK1N,CAAAA,KAAL,CAAaA,KACb,KAAK2N,CAAAA,OAAL,CAAeA,OAJH,CAMZ,QAAO,EAAA,CAAE,MAAO,KAAKxO,CAAAA,IAAKK,CAAAA,IAAnB,CACP,QAAO,EAAA,CAAE,MAAO,KAAKL,CAAAA,IAAKK,CAAAA,IAAKmL,CAAAA,IAAxB,CACP,QAAO,EAAA,CAAE,MAAO,KAAK+C,CAAAA,KAAd,CACP,MAAK,EAAA,CAAE,MAAO,KAAKA,CAAAA,KAAZ,CAAoB,IAAKvO,CAAAA,IAAKiE,CAAAA,MAAhC,CACTwK,SAAS,CAACpJ,CAAD,CAAIgJ,GAAJ,CAASzO,GAAT,CAAcD,IAAd,CAAoB+O,IAAA;AAAO,CAA3B,CAA8B,CACnC,IAAK,IAAI/N,OAAS,IAAlB,CAAA,CAAA,CAA0B,CACtB,IAAK,IAAI,CAAEiB,QAAF,CAAYU,SAAZ,CAAA,CAA0B3B,MAAOX,CAAAA,IAArC,CAA2C2O,EAAU,CAAN,CAAAN,GAAA,CAAUzM,QAASqC,CAAAA,MAAnB,CAA4B,CAAC,CAAjF,CAAoFoB,CAApF,EAAyFsJ,CAAzF,CAA4FtJ,CAA5F,EAAiGgJ,GAAjG,CAAsG,CAAA,IAC9FvL,KAAOlB,QAAA,CAASyD,CAAT,CADuF,CAC1E5C,MAAQH,SAAA,CAAU+C,CAAV,CAAR5C,CAAuB9B,MAAO4N,CAAAA,KACtD,IAAK7O,SAAA,CAAUC,IAAV,CAAgBC,GAAhB,CAAqB6C,KAArB,CAA4BA,KAA5B,CAAoCK,IAAKmB,CAAAA,MAAzC,CAAL,CAEA,GAAInB,IAAJ,WAAoBf,WAApB,CAAgC,CAC5B,GAAI2M,IAAJ,CAAW,CAAX,CACI,QACJ,KAAI7N,MAAQiC,IAAKsL,CAAAA,SAAL,CAAe,CAAf,CAAkBtL,IAAKiB,CAAAA,MAAOE,CAAAA,MAA9B,CAAsCoK,GAAtC,CAA2CzO,GAA3C,CAAiD6C,KAAjD,CAAwD9C,IAAxD,CACZ,IAAY,CAAC,CAAb,CAAIkB,KAAJ,CACI,MAAO,KAAI+N,UAAJ,CAAe,IAAIC,aAAJ,CAAkBlO,MAAlB,CAA0BmC,IAA1B,CAAgCuC,CAAhC,CAAmC5C,KAAnC,CAAf,CAA0D,IAA1D,CAAgE5B,KAAhE,CALiB,CAAhC,IAOK,IAAK6N,IAAL,CAAY,CAAZ,EAA8B,CAAC5L,IAAKzC,CAAAA,IAAK2B,CAAAA,WAAzC,EAAwDN,QAAA,CAASoB,IAAT,CAAxD,CAAyE,CAC1E,IAAIqI,OACJ,IAAI,EAAEuD,IAAF,CAAS,CAAT,CAAJ,EAA8B5L,IAAKyC,CAAAA,KAAnC;CAA6C4F,OAA7C,CAAuDrI,IAAKoC,CAAAA,IAAL,CAAUC,QAASgG,CAAAA,OAAnB,CAAvD,GAAuF,CAACA,OAAQnB,CAAAA,OAAhG,CACI,MAAO,KAAIpJ,QAAJ,CAAauK,OAAQxJ,CAAAA,IAArB,CAA2Bc,KAA3B,CAAkC4C,CAAlC,CAAqC1E,MAArC,CACPI,EAAAA,CAAQ,IAAIH,QAAJ,CAAakC,IAAb,CAAmBL,KAAnB,CAA0B4C,CAA1B,CAA6B1E,MAA7B,CACZ,OAAQ+N,KAAD,CAAQ,CAAR,EAAyB,CAAC3N,CAAMV,CAAAA,IAAK2B,CAAAA,WAArC,CAAmDjB,CAAnD,CACDA,CAAM0N,CAAAA,SAAN,CAAsB,CAAN,CAAAJ,GAAA,CAAUvL,IAAKlB,CAAAA,QAASqC,CAAAA,MAAxB,CAAiC,CAAjC,CAAqC,CAArD,CAAwDoK,GAAxD,CAA6DzO,GAA7D,CAAkED,IAAlE,CANoE,CAXoB,CAoBtG,GAAK+O,IAAL,CAAY,CAAZ,EAA6B,CAAC/N,MAAON,CAAAA,IAAK2B,CAAAA,WAA1C,CACI,MAAO,KAEPqD,EAAA,CADgB,CAApB,EAAI1E,MAAOE,CAAAA,KAAX,CACQF,MAAOE,CAAAA,KADf,CACuBwN,GADvB,CAGc,CAAN,CAAAA,GAAA,CAAU,CAAC,CAAX,CAAe1N,MAAO6N,CAAAA,OAAQxO,CAAAA,IAAK4B,CAAAA,QAASqC,CAAAA,MACpDtD,OAAA,CAASA,MAAO6N,CAAAA,OAChB,IAAI,CAAC7N,MAAL,CACI,MAAO,KA7BW,CADS,CAiCnC,cAAa,EAAA,CAAE,MAAO,KAAK8N,CAAAA,SAAL,CAAe,CAAf,CAAkB,CAAlB,CAAqB,CAArB,CAAwB,CAAxB,CAAT,CACb,aAAY,EAAA,CAAE,MAAO,KAAKA,CAAAA,SAAL,CAAe,IAAKzO,CAAAA,IAAK4B,CAAAA,QAASqC,CAAAA,MAAlC;AAA2C,CAA3C,CAA8C,CAAC,CAA/C,CAAkD,CAAlD,CAAqD,CAArD,CAAT,CAChBqE,UAAU,CAAC1I,GAAD,CAAM,CAAE,MAAO,KAAK6O,CAAAA,SAAL,CAAe,CAAf,CAAkB,CAAlB,CAAqB7O,GAArB,CAA0B,CAA1B,CAAT,CAChBM,WAAW,CAACN,GAAD,CAAM,CAAE,MAAO,KAAK6O,CAAAA,SAAL,CAAe,IAAKzO,CAAAA,IAAK4B,CAAAA,QAASqC,CAAAA,MAAlC,CAA2C,CAA3C,CAA8C,CAAC,CAA/C,CAAkDrE,GAAlD,CAAuD,CAAC,CAAxD,CAAT,CACjBkB,KAAK,CAAClB,GAAD,CAAMD,IAAN,CAAYc,QAAA,CAAW,CAAA,CAAvB,CAA6BqO,OAAA,CAAU,CAAA,CAAvC,CAA6C,CAC9C,IAAI3D,OACJ,IAAI1K,QAAJ,GAAiB0K,OAAjB,CAA2B,IAAKnL,CAAAA,IAAKkF,CAAAA,IAAV,CAAeC,QAASgG,CAAAA,OAAxB,CAA3B,GAAgEA,OAAQnB,CAAAA,OAAxE,CAAiF,CACzE+E,QAAAA,CAAOnP,GAAPmP,CAAa,IAAKlP,CAAAA,IACtB,KAAK,IAAI,CAAEA,IAAF,CAAQC,EAAR,CAAT,EAAyBqL,QAAQnB,CAAAA,OAAjC,CACI,IAAY,CAAP,CAAArK,IAAA,CAAWE,IAAX,EAAmBkP,QAAnB,CAA0BlP,IAA1B,CAAiCkP,QAAtC,IACY,CAAP,CAAApP,IAAA,CAAWG,EAAX,EAAiBiP,QAAjB,CAAwBjP,EAAxB,CAA6BiP,QADlC,EAEI,MAAO,KAAInO,QAAJ,CAAauK,OAAQxJ,CAAAA,IAArB,CAA2BwJ,OAAQnB,CAAAA,OAAR,CAAgB,CAAhB,CAAmBnK,CAAAA,IAA9C,CAAqD,IAAKA,CAAAA,IAA1D,CAAgE,CAAC,CAAjE,CAAoE,IAApE,CAL8D,CAQjF,MAAO,KAAK4O,CAAAA,SAAL,CAAe,CAAf,CAAkB,CAAlB,CAAqB7O,GAArB;AAA0BD,IAA1B,CAAgCmP,OAAA,CAAU,CAAV,CAAc,CAA9C,CAVuC,CAYlDE,qBAAqB,EAAG,CACpB,IAAIC,IAAM,IACV,KAAA,CAAOA,GAAI5O,CAAAA,IAAK2B,CAAAA,WAAhB,EAA+BiN,GAAIT,CAAAA,OAAnC,CAAA,CACIS,GAAA,CAAMA,GAAIT,CAAAA,OACd,OAAOS,IAJa,CAMpB,UAAS,EAAA,CACT,MAAO,KAAKT,CAAAA,OAAL,CAAe,IAAKA,CAAAA,OAAQQ,CAAAA,qBAAb,EAAf,CAAsD,IADpD,CAGT,eAAc,EAAA,CACd,MAAO,KAAKR,CAAAA,OAAL,EAA8B,CAA9B,EAAgB,IAAK3N,CAAAA,KAArB,CAAkC,IAAK2N,CAAAA,OAAQC,CAAAA,SAAb,CAAuB,IAAK5N,CAAAA,KAA5B,CAAoC,CAApC,CAAuC,CAAvC,CAA0C,CAA1C,CAA6C,CAA7C,CAAlC,CAAmG,IAD5F,CAGd,eAAc,EAAA,CACd,MAAO,KAAK2N,CAAAA,OAAL,EAA8B,CAA9B,EAAgB,IAAK3N,CAAAA,KAArB,CAAkC,IAAK2N,CAAAA,OAAQC,CAAAA,SAAb,CAAuB,IAAK5N,CAAAA,KAA5B,CAAoC,CAApC,CAAuC,CAAC,CAAxC,CAA2C,CAA3C,CAA8C,CAA9C,CAAlC,CAAoG,IAD7F,CAGd,UAAS,EAAA,CAAE,MAAO,KAAIsM,UAAJ,CAAe,IAAf,CAAT,CACT,QAAO,EAAA,CAAE,MAAO,KAAKnN,CAAAA,IAAd,CACXiI,MAAM,EAAG,CAAE,MAAO,KAAKjI,CAAAA,IAAd,CACTuN,OAAO,CAAC3N,GAAD;AAAMD,IAAA,CAAO,CAAb,CAAgB,CACnB,MAAOa,YAAA,CAAY,IAAZ,CAAkBZ,GAAlB,CAAuBD,IAAvB,CAA6B,CAAA,CAA7B,CADY,CAGvB6N,YAAY,CAAC5N,GAAD,CAAMD,IAAA,CAAO,CAAb,CAAgB,CACxB,MAAOa,YAAA,CAAY,IAAZ,CAAkBZ,GAAlB,CAAuBD,IAAvB,CAA6B,CAAA,CAA7B,CADiB,CAG5BI,0BAA0B,CAACH,GAAD,CAAM,CAAE,MAAOG,2BAAA,CAA2B,IAA3B,CAAiCH,GAAjC,CAAT,CAChCsP,QAAQ,CAAC7O,IAAD,CAAOY,MAAA,CAAS,IAAhB,CAAsBC,KAAA,CAAQ,IAA9B,CAAoC,CACpC6H,IAAAA,CAAI/H,WAAA,CAAY,IAAZ,CAAkBX,IAAlB,CAAwBY,MAAxB,CAAgCC,KAAhC,CACR,OAAO6H,KAAE9E,CAAAA,MAAF,CAAW8E,IAAA,CAAE,CAAF,CAAX,CAAkB,IAFe,CAI5C/H,WAAW,CAACX,IAAD,CAAOY,MAAA,CAAS,IAAhB,CAAsBC,KAAA,CAAQ,IAA9B,CAAoC,CAC3C,MAAOF,YAAA,CAAY,IAAZ,CAAkBX,IAAlB,CAAwBY,MAAxB,CAAgCC,KAAhC,CADoC,CAI/C2L,QAAQ,EAAG,CAAE,MAAO,KAAK7M,CAAAA,IAAK6M,CAAAA,QAAV,EAAT,CA/Ff,CAkHA,KAAMgC,cAAN,CACIrE,WAAW,CAAC7J,MAAD,CAASoD,MAAT,CAAiBlD,KAAjB,CAAwB4B,KAAxB,CAA+B,CACtC,IAAK9B,CAAAA,MAAL,CAAcA,MACd,KAAKoD,CAAAA,MAAL;AAAcA,MACd,KAAKlD,CAAAA,KAAL,CAAaA,KACb,KAAK4B,CAAAA,KAAL,CAAaA,KAJyB,CAD9C,CAQA,KAAMmM,WAAN,CACIpE,WAAW,CAAC2E,OAAD,CAAUX,OAAV,CAAmB3N,KAAnB,CAA0B,CACjC,IAAKsO,CAAAA,OAAL,CAAeA,OACf,KAAKX,CAAAA,OAAL,CAAeA,OACf,KAAK3N,CAAAA,KAAL,CAAaA,KACb,KAAKR,CAAAA,IAAL,CAAY8O,OAAQpL,CAAAA,MAAOsC,CAAAA,GAAInD,CAAAA,KAAnB,CAAyBiM,OAAQpL,CAAAA,MAAOA,CAAAA,MAAf,CAAsBlD,KAAtB,CAAzB,CAJqB,CAMjC,QAAO,EAAA,CAAE,MAAO,KAAKR,CAAAA,IAAKmL,CAAAA,IAAnB,CACP,QAAO,EAAA,CAAE,MAAO,KAAK2D,CAAAA,OAAQ1M,CAAAA,KAApB,CAA4B,IAAK0M,CAAAA,OAAQpL,CAAAA,MAAOA,CAAAA,MAApB,CAA2B,IAAKlD,CAAAA,KAAhC,CAAwC,CAAxC,CAA9B,CACP,MAAK,EAAA,CAAE,MAAO,KAAKsO,CAAAA,OAAQ1M,CAAAA,KAApB,CAA4B,IAAK0M,CAAAA,OAAQpL,CAAAA,MAAOA,CAAAA,MAApB,CAA2B,IAAKlD,CAAAA,KAAhC,CAAwC,CAAxC,CAA9B,CACTuF,KAAK,CAACiI,GAAD,CAAMzO,GAAN,CAAWD,IAAX,CAAiB,CAClB,IAAI,CAAEoE,MAAF,CAAA,CAAa,IAAKoL,CAAAA,OAClBtO,IAAAA,CAAQkD,MAAOqK,CAAAA,SAAP,CAAiB,IAAKvN,CAAAA,KAAtB,CAA8B,CAA9B,CAAiCkD,MAAOA,CAAAA,MAAP,CAAc,IAAKlD,CAAAA,KAAnB;AAA2B,CAA3B,CAAjC,CAAgEwN,GAAhE,CAAqEzO,GAArE,CAA2E,IAAKuP,CAAAA,OAAQ1M,CAAAA,KAAxF,CAA+F9C,IAA/F,CACZ,OAAe,EAAR,CAAAkB,GAAA,CAAY,IAAZ,CAAmB,IAAI+N,UAAJ,CAAe,IAAKO,CAAAA,OAApB,CAA6B,IAA7B,CAAmCtO,GAAnC,CAHR,CAKlB,cAAa,EAAA,CAAE,MAAO,KAAKuF,CAAAA,KAAL,CAAW,CAAX,CAAc,CAAd,CAAiB,CAAjB,CAAT,CACb,aAAY,EAAA,CAAE,MAAO,KAAKA,CAAAA,KAAL,CAAW,CAAC,CAAZ,CAAe,CAAf,CAAkB,CAAlB,CAAT,CAChBkC,UAAU,CAAC1I,GAAD,CAAM,CAAE,MAAO,KAAKwG,CAAAA,KAAL,CAAW,CAAX,CAAcxG,GAAd,CAAmB,CAAnB,CAAT,CAChBM,WAAW,CAACN,GAAD,CAAM,CAAE,MAAO,KAAKwG,CAAAA,KAAL,CAAW,CAAC,CAAZ,CAAexG,GAAf,CAAoB,CAAC,CAArB,CAAT,CACjBkB,KAAK,CAAClB,GAAD,CAAMD,IAAN,CAAYc,QAAZ,CAAsBqO,OAAA,CAAU,CAAA,CAAhC,CAAsC,CACvC,GAAI,CAACA,OAAL,CACI,MAAO,KACX,EAAI,CAAE,OAAA/K,QAAF,CAAJ,CAAiB,IAAKoL,CAAAA,OAAtB,CACItO,IAAAA,CAAQkD,QAAOqK,CAAAA,SAAP,CAAiB,IAAKvN,CAAAA,KAAtB,CAA8B,CAA9B,CAAiCkD,QAAOA,CAAAA,MAAP,CAAc,IAAKlD,CAAAA,KAAnB,CAA2B,CAA3B,CAAjC,CAAuE,CAAP,CAAAlB,IAAA,CAAW,CAAX,CAAe,CAAC,CAAhF,CAAmFC,GAAnF,CAAyF,IAAKuP,CAAAA,OAAQ1M,CAAAA,KAAtG,CAA6G9C,IAA7G,CACZ,OAAe,EAAR,CAAAkB,GAAA,CAAY,IAAZ,CAAmB,IAAI+N,UAAJ,CAAe,IAAKO,CAAAA,OAApB;AAA6B,IAA7B,CAAmCtO,GAAnC,CALa,CAOvC,UAAS,EAAA,CACT,MAAO,KAAK2N,CAAAA,OAAZ,EAAuB,IAAKW,CAAAA,OAAQxO,CAAAA,MAAOqO,CAAAA,qBAApB,EADd,CAGbI,eAAe,CAACf,GAAD,CAAM,CACjB,MAAO,KAAKG,CAAAA,OAAL,CAAe,IAAf,CAAsB,IAAKW,CAAAA,OAAQxO,CAAAA,MAAO8N,CAAAA,SAApB,CAA8B,IAAKU,CAAAA,OAAQtO,CAAAA,KAA3C,CAAmDwN,GAAnD,CAAwDA,GAAxD,CAA6D,CAA7D,CAAgE,CAAhE,CADZ,CAGjB,eAAc,EAAA,CACd,IAAI,CAAEtK,MAAF,CAAA,CAAa,IAAKoL,CAAAA,OAAtB,CACIjO,MAAQ6C,MAAOA,CAAAA,MAAP,CAAc,IAAKlD,CAAAA,KAAnB,CAA2B,CAA3B,CACZ,OAAIK,MAAJ,EAAa,IAAKsN,CAAAA,OAAL,CAAezK,MAAOA,CAAAA,MAAP,CAAc,IAAKyK,CAAAA,OAAQ3N,CAAAA,KAA3B,CAAmC,CAAnC,CAAf,CAAuDkD,MAAOA,CAAAA,MAAOE,CAAAA,MAAlF,EACW,IAAI2K,UAAJ,CAAe,IAAKO,CAAAA,OAApB,CAA6B,IAAKX,CAAAA,OAAlC,CAA2CtN,KAA3C,CADX,CAEO,IAAKkO,CAAAA,eAAL,CAAqB,CAArB,CALO,CAOd,eAAc,EAAA,CACd,IAAI,CAAErL,MAAF,CAAA,CAAa,IAAKoL,CAAAA,OAAtB,CACI/M,YAAc,IAAKoM,CAAAA,OAAL,CAAe,IAAKA,CAAAA,OAAQ3N,CAAAA,KAA5B;AAAoC,CAApC,CAAwC,CAC1D,OAAI,KAAKA,CAAAA,KAAT,EAAkBuB,WAAlB,CACW,IAAKgN,CAAAA,eAAL,CAAqB,CAAC,CAAtB,CADX,CAEO,IAAIR,UAAJ,CAAe,IAAKO,CAAAA,OAApB,CAA6B,IAAKX,CAAAA,OAAlC,CAA2CzK,MAAOqK,CAAAA,SAAP,CAAiBhM,WAAjB,CAA8B,IAAKvB,CAAAA,KAAnC,CAA0C,CAAC,CAA3C,CAA8C,CAA9C,CAAiD,CAAjD,CAA3C,CALO,CAOd,UAAS,EAAA,CAAE,MAAO,KAAIsM,UAAJ,CAAe,IAAf,CAAT,CACT,QAAO,EAAA,CAAE,MAAO,KAAT,CACXlF,MAAM,EAAG,CAAA,IACDrG,SAAW,EADV,CACcU,UAAY,EAD1B,CAED,CAAEyB,MAAF,CAAA,CAAa,IAAKoL,CAAAA,OAFjB,CAGD3H,OAAS,IAAK3G,CAAAA,KAAd2G,CAAsB,CAHrB,CAGwBC,KAAO1D,MAAOA,CAAAA,MAAP,CAAc,IAAKlD,CAAAA,KAAnB,CAA2B,CAA3B,CAChC4G,KAAJ,CAAWD,MAAX,GAEI5F,QAASH,CAAAA,IAAT,CAAcsC,MAAO6D,CAAAA,KAAP,CAAaJ,MAAb,CAAqBC,IAArB,CADH1D,MAAOA,CAAAA,MAAPlE,CAAc,IAAKgB,CAAAA,KAAnBhB,CAA2B,CAA3BA,CACG,CADiCkE,MAAOA,CAAAA,MAAPjE,CAAc,IAAKe,CAAAA,KAAnBf,CAA2B,CAA3BA,CACjC,CAAd,CACA,CAAAwC,SAAUb,CAAAA,IAAV,CAAe,CAAf,CAHJ,CAKA,OAAO,KAAIwD,IAAJ,CAAS,IAAK5E,CAAAA,IAAd,CAAoBuB,QAApB,CAA8BU,SAA9B;AAAyC,IAAKxC,CAAAA,EAA9C,CAAmD,IAAKD,CAAAA,IAAxD,CATF,CAWT0N,OAAO,CAAC3N,GAAD,CAAMD,IAAA,CAAO,CAAb,CAAgB,CACnB,MAAOa,YAAA,CAAY,IAAZ,CAAkBZ,GAAlB,CAAuBD,IAAvB,CAA6B,CAAA,CAA7B,CADY,CAGvB6N,YAAY,CAAC5N,GAAD,CAAMD,IAAA,CAAO,CAAb,CAAgB,CACxB,MAAOa,YAAA,CAAY,IAAZ,CAAkBZ,GAAlB,CAAuBD,IAAvB,CAA6B,CAAA,CAA7B,CADiB,CAG5BI,0BAA0B,CAACH,GAAD,CAAM,CAAE,MAAOG,2BAAA,CAA2B,IAA3B,CAAiCH,GAAjC,CAAT,CAEhCiN,QAAQ,EAAG,CAAE,MAAO,KAAKsC,CAAAA,OAAQpL,CAAAA,MAAOkK,CAAAA,WAApB,CAAgC,IAAKpN,CAAAA,KAArC,CAAT,CACXqO,QAAQ,CAAC7O,IAAD,CAAOY,MAAA,CAAS,IAAhB,CAAsBC,KAAA,CAAQ,IAA9B,CAAoC,CACpC6H,IAAAA,CAAI/H,WAAA,CAAY,IAAZ,CAAkBX,IAAlB,CAAwBY,MAAxB,CAAgCC,KAAhC,CACR,OAAO6H,KAAE9E,CAAAA,MAAF,CAAW8E,IAAA,CAAE,CAAF,CAAX,CAAkB,IAFe,CAI5C/H,WAAW,CAACX,IAAD,CAAOY,MAAA,CAAS,IAAhB,CAAsBC,KAAA,CAAQ,IAA9B,CAAoC,CAC3C,MAAOF,YAAA,CAAY,IAAZ,CAAkBX,IAAlB,CAAwBY,MAAxB,CAAgCC,KAAhC,CADoC,CAxEnD,CA8EA,KAAMiM,WAAN,CAEI3C,WAAW,CAACxK,IAAD;AAEX0O,IAAA,CAAO,CAFI,CAED,CACN,IAAKA,CAAAA,IAAL,CAAYA,IACZ,KAAK3K,CAAAA,MAAL,CAAc,IACd,KAAKsL,CAAAA,KAAL,CAAa,EACb,KAAKxO,CAAAA,KAAL,CAAa,CACb,KAAKyO,CAAAA,UAAL,CAAkB,IAClB,IAAItP,IAAJ,WAAoBY,SAApB,CACI,IAAK2O,CAAAA,SAAL,CAAevP,IAAf,CADJ,KAGK,CACD,IAAKqN,CAAAA,KAAL,CAAarN,IAAKmP,CAAAA,OAAQxO,CAAAA,MAC1B,KAAKoD,CAAAA,MAAL,CAAc/D,IAAKmP,CAAAA,OACnB,KAASK,IAAT,CAAaxP,IAAKwO,CAAAA,OAAlB,CAA2BgB,IAA3B,CAA8BA,IAA9B,CAAkCA,IAAEhB,CAAAA,OAApC,CACI,IAAKa,CAAAA,KAAMI,CAAAA,OAAX,CAAmBD,IAAE3O,CAAAA,KAArB,CACJ,KAAKyO,CAAAA,UAAL,CAAkBtP,IAClB,KAAK0P,CAAAA,QAAL,CAAc1P,IAAKa,CAAAA,KAAnB,CANC,CATC,CAmBN,QAAO,EAAA,CAAE,MAAO,KAAKR,CAAAA,IAAKmL,CAAAA,IAAnB,CACX+D,SAAS,CAACvP,IAAD,CAAO,CACZ,GAAI,CAACA,IAAL,CACI,MAAO,CAAA,CACX,KAAKqN,CAAAA,KAAL,CAAarN,IACb,KAAKK,CAAAA,IAAL,CAAYL,IAAKK,CAAAA,IACjB,KAAKR,CAAAA,IAAL,CAAYG,IAAKH,CAAAA,IACjB,KAAKC,CAAAA,EAAL,CAAUE,IAAKF,CAAAA,EACf,OAAO,CAAA,CAPK,CAShB4P,QAAQ,CAAC7O,KAAD,CAAQR,IAAR,CAAc,CAClB,IAAKQ,CAAAA,KAAL;AAAaA,KACb,KAAI,CAAE4B,KAAF,CAASsB,MAAT,CAAA,CAAoB,IAAKA,CAAAA,MAC7B,KAAK1D,CAAAA,IAAL,CAAYA,IAAZ,EAAoB0D,MAAOsC,CAAAA,GAAInD,CAAAA,KAAX,CAAiBa,MAAOA,CAAAA,MAAP,CAAclD,KAAd,CAAjB,CACpB,KAAKhB,CAAAA,IAAL,CAAY4C,KAAZ,CAAoBsB,MAAOA,CAAAA,MAAP,CAAclD,KAAd,CAAsB,CAAtB,CACpB,KAAKf,CAAAA,EAAL,CAAU2C,KAAV,CAAkBsB,MAAOA,CAAAA,MAAP,CAAclD,KAAd,CAAsB,CAAtB,CAClB,OAAO,CAAA,CANW,CAQtB8O,KAAK,CAAC3P,IAAD,CAAO,CACR,GAAI,CAACA,IAAL,CACI,MAAO,CAAA,CACX,IAAIA,IAAJ,WAAoBY,SAApB,CAEI,MADA,KAAKmD,CAAAA,MACE,CADO,IACP,CAAA,IAAKwL,CAAAA,SAAL,CAAevP,IAAf,CAEX,KAAK+D,CAAAA,MAAL,CAAc/D,IAAKmP,CAAAA,OACnB,OAAO,KAAKO,CAAAA,QAAL,CAAc1P,IAAKa,CAAAA,KAAnB,CAA0Bb,IAAKK,CAAAA,IAA/B,CARC,CAWZwM,QAAQ,EAAG,CACP,MAAO,KAAK9I,CAAAA,MAAL,CAAc,IAAKA,CAAAA,MAAOA,CAAAA,MAAOkK,CAAAA,WAAnB,CAA+B,IAAKpN,CAAAA,KAApC,CAAd,CAA2D,IAAKwM,CAAAA,KAAMR,CAAAA,QAAX,EAD3D,CAIX+C,UAAU,CAACvB,GAAD,CAAMzO,GAAN,CAAWD,IAAX,CAAiB,CACvB,GAAI,CAAC,IAAKoE,CAAAA,MAAV,CACI,MAAO,KAAK4L,CAAAA,KAAL,CAAW,IAAKtC,CAAAA,KAAMoB,CAAAA,SAAX,CAA2B,CAAN;AAAAJ,GAAA,CAAU,IAAKhB,CAAAA,KAAMrN,CAAAA,IAAK4B,CAAAA,QAASqC,CAAAA,MAAnC,CAA4C,CAA5C,CAAgD,CAArE,CAAwEoK,GAAxE,CAA6EzO,GAA7E,CAAkFD,IAAlF,CAAwF,IAAK+O,CAAAA,IAA7F,CAAX,CACX,KAAI,CAAE3K,MAAF,CAAA,CAAa,IAAKA,CAAAA,MAClBlD,IAAAA,CAAQkD,MAAOqK,CAAAA,SAAP,CAAiB,IAAKvN,CAAAA,KAAtB,CAA8B,CAA9B,CAAiCkD,MAAOA,CAAAA,MAAP,CAAc,IAAKlD,CAAAA,KAAnB,CAA2B,CAA3B,CAAjC,CAAgEwN,GAAhE,CAAqEzO,GAArE,CAA2E,IAAKmE,CAAAA,MAAOtB,CAAAA,KAAvF,CAA8F9C,IAA9F,CACZ,IAAY,CAAZ,CAAIkB,GAAJ,CACI,MAAO,CAAA,CACX,KAAKwO,CAAAA,KAAM5N,CAAAA,IAAX,CAAgB,IAAKZ,CAAAA,KAArB,CACA,OAAO,KAAK6O,CAAAA,QAAL,CAAc7O,GAAd,CARgB,CAY3BS,UAAU,EAAG,CAAE,MAAO,KAAKsO,CAAAA,UAAL,CAAgB,CAAhB,CAAmB,CAAnB,CAAsB,CAAtB,CAAT,CAEbxP,SAAS,EAAG,CAAE,MAAO,KAAKwP,CAAAA,UAAL,CAAgB,CAAC,CAAjB,CAAoB,CAApB,CAAuB,CAAvB,CAAT,CAEZtH,UAAU,CAAC1I,GAAD,CAAM,CAAE,MAAO,KAAKgQ,CAAAA,UAAL,CAAgB,CAAhB,CAAmBhQ,GAAnB,CAAwB,CAAxB,CAAT,CAEhBM,WAAW,CAACN,GAAD,CAAM,CAAE,MAAO,KAAKgQ,CAAAA,UAAL,CAAgB,CAAC,CAAjB,CAAoBhQ,GAApB,CAAyB,CAAC,CAA1B,CAAT,CAMjBkB,KAAK,CAAClB,GAAD,CAAMD,IAAN,CAAYc,QAAA,CAAW,CAAA,CAAvB,CAA6BqO,OAAA,CAAU,CAAA,CAAvC,CAA6C,CAC9C,MAAK,KAAK/K,CAAAA,MAAV,CAEO+K,OAAA;AAAU,IAAKc,CAAAA,UAAL,CAAgB,CAAhB,CAAmBhQ,GAAnB,CAAwBD,IAAxB,CAAV,CAA0C,CAAA,CAFjD,CACW,IAAKgQ,CAAAA,KAAL,CAAW,IAAKtC,CAAAA,KAAMvM,CAAAA,KAAX,CAAiBlB,GAAjB,CAAsBD,IAAtB,CAA4Bc,QAA5B,EAAwC,EAAE,IAAKiO,CAAAA,IAAP,CAAc,CAAd,CAAxC,CAAqEI,OAArE,CAAX,CAFmC,CAMlDnO,MAAM,EAAG,CACL,GAAI,CAAC,IAAKoD,CAAAA,MAAV,CACI,MAAO,KAAKwL,CAAAA,SAAL,CAAgB,IAAKb,CAAAA,IAAN,CAAa,CAAb,CAA6B,IAAKrB,CAAAA,KAAMmB,CAAAA,OAAxC,CAAkD,IAAKnB,CAAAA,KAAM1M,CAAAA,MAA5E,CACX,IAAI,IAAK0O,CAAAA,KAAMpL,CAAAA,MAAf,CACI,MAAO,KAAKyL,CAAAA,QAAL,CAAc,IAAKL,CAAAA,KAAM/J,CAAAA,GAAX,EAAd,CACX,KAAI3E,OAAU,IAAK+N,CAAAA,IAAN,CAAa,CAAb,CAA6B,IAAK3K,CAAAA,MAAOpD,CAAAA,MAAzC,CAAkD,IAAKoD,CAAAA,MAAOpD,CAAAA,MAAOqO,CAAAA,qBAAnB,EAC/D,KAAKjL,CAAAA,MAAL,CAAc,IACd,OAAO,KAAKwL,CAAAA,SAAL,CAAe5O,MAAf,CAPF,CAUTkP,OAAO,CAACxB,GAAD,CAAM,CACT,GAAI,CAAC,IAAKtK,CAAAA,MAAV,CACI,MAAQ,KAAKsJ,CAAAA,KAAMmB,CAAAA,OAAZ,CACD,IAAKmB,CAAAA,KAAL,CAA8B,CAAnB,CAAA,IAAKtC,CAAAA,KAAMxM,CAAAA,KAAX,CAAuB,IAAvB,CACP,IAAKwM,CAAAA,KAAMmB,CAAAA,OAAQC,CAAAA,SAAnB,CAA6B,IAAKpB,CAAAA,KAAMxM,CAAAA,KAAxC;AAAgDwN,GAAhD,CAAqDA,GAArD,CAA0D,CAA1D,CAA6D,CAA7D,CAA+E,IAAKK,CAAAA,IAApF,CADJ,CADC,CAAsB,CAAA,CAFxB,KAKL,CAAE3K,MAAF,CAAA,CAAa,IAAKA,CAAAA,MALb,CAKqBsE,EAAI,IAAKgH,CAAAA,KAAMpL,CAAAA,MAAfoE,CAAwB,CACtD,IAAU,CAAV,CAAIgG,GAAJ,CAAa,CACT,IAAIjM,YAAkB,CAAJ,CAAAiG,CAAA,CAAQ,CAAR,CAAY,IAAKgH,CAAAA,KAAL,CAAWhH,CAAX,CAAZ,CAA4B,CAC9C,IAAI,IAAKxH,CAAAA,KAAT,EAAkBuB,WAAlB,CACI,MAAO,KAAKsN,CAAAA,QAAL,CAAc3L,MAAOqK,CAAAA,SAAP,CAAiBhM,WAAjB,CAA8B,IAAKvB,CAAAA,KAAnC,CAA0C,CAAC,CAA3C,CAA8C,CAA9C,CAAiD,CAAjD,CAAd,CAHF,CAAb,IAOI,IADIK,WACA,CADQ6C,MAAOA,CAAAA,MAAP,CAAc,IAAKlD,CAAAA,KAAnB,CAA2B,CAA3B,CACR,CAAAK,WAAA,EAAa,CAAJ,CAAAmH,CAAA,CAAQtE,MAAOA,CAAAA,MAAOE,CAAAA,MAAtB,CAA+BF,MAAOA,CAAAA,MAAP,CAAc,IAAKsL,CAAAA,KAAL,CAAWhH,CAAX,CAAd,CAA8B,CAA9B,CAAxC,CAAJ,CACI,MAAO,KAAKqH,CAAAA,QAAL,CAAcxO,WAAd,CAEf,OAAW,EAAJ,CAAAmH,CAAA,CAAQ,IAAKsH,CAAAA,KAAL,CAAW,IAAK5L,CAAAA,MAAOpD,CAAAA,MAAO8N,CAAAA,SAAnB,CAA6B,IAAK1K,CAAAA,MAAOlD,CAAAA,KAAzC,CAAiDwN,GAAjD,CAAsDA,GAAtD,CAA2D,CAA3D,CAA8D,CAA9D,CAAgF,IAAKK,CAAAA,IAArF,CAAX,CAAR,CAAiH,CAAA,CAhB/G,CAmBblN,WAAW,EAAG,CAAE,MAAO,KAAKqO,CAAAA,OAAL,CAAa,CAAb,CAAT,CAEdtP,WAAW,EAAG,CAAE,MAAO,KAAKsP,CAAAA,OAAL,CAAa,CAAC,CAAd,CAAT,CACdC,UAAU,CAACzB,GAAD,CAAM,CAAA,IACRxN,KADQ;AACDF,MAAX,EAAmB,CAAE,OAAAoD,MAAF,CAAnB,CAAgC,IAAhC,CACA,IAAIA,MAAJ,CAAY,CACR,GAAU,CAAV,CAAIsK,GAAJ,CACI,IAAI,IAAKxN,CAAAA,KAAT,CAAiBkD,MAAOA,CAAAA,MAAOA,CAAAA,MAAOE,CAAAA,MAAtC,CACI,MAAO,CAAA,CADX,CADJ,IAKI,KAASoB,KAAT,CAAa,CAAb,CAAgBA,KAAhB,CAAoB,IAAKxE,CAAAA,KAAzB,CAAgCwE,KAAA,EAAhC,CACI,GAAItB,MAAOA,CAAAA,MAAOA,CAAAA,MAAd,CAAqBsB,KAArB,CAAyB,CAAzB,CAAJ,CAAkC,IAAKxE,CAAAA,KAAvC,CACI,MAAO,CAAA,CAEnB,EAAC,CAAEA,KAAF,CAASF,MAAT,CAAD,CAAqBoD,MAArB,CAVQ,CAAZ,IAaI,CAAC,CAAElD,KAAF,CAAS,QAASF,MAAlB,CAAD,CAA8B,IAAK0M,CAAAA,KAAnC,CAEJ,KAAA,CAAO1M,MAAP,CAAe,CAAEE,KAAF,CAAS,QAASF,MAAlB,CAAf,CAA4CA,MAA5C,CACI,GAAY,CAAC,CAAb,CAAIE,KAAJ,CACI,IAAK,IAAIwE,EAAIxE,KAAJwE,CAAYgJ,GAAhB,CAAqBM,EAAU,CAAN,CAAAN,GAAA,CAAU,CAAC,CAAX,CAAe1N,MAAOX,CAAAA,IAAK4B,CAAAA,QAASqC,CAAAA,MAAlE,CAA0EoB,CAA1E,EAA+EsJ,CAA/E,CAAkFtJ,CAAlF,EAAuFgJ,GAAvF,CAEI,GADIjI,KACA,CADQzF,MAAOX,CAAAA,IAAK4B,CAAAA,QAAZ,CAAqByD,CAArB,CACR,CAAC,IAAKqJ,CAAAA,IAAN,CAAa,CAAb,EAA8BtI,KAA9B,WAA+CrE,WAA/C,EAA6D,CAACqE,KAAM/F,CAAAA,IAAK2B,CAAAA,WAAzE,EAAwFN,QAAA,CAAS0E,KAAT,CAA5F,CACI,MAAO,CAAA,CAGvB;MAAO,CAAA,CAzBK,CA2BhB2J,IAAI,CAAC1B,GAAD,CAAMvN,KAAN,CAAa,CACb,GAAIA,KAAJ,EAAa,IAAK8O,CAAAA,UAAL,CAAgBvB,GAAhB,CAAqB,CAArB,CAAwB,CAAxB,CAAb,CACI,MAAO,CAAA,CACX,KAAA,CAAA,CAAA,CAAS,CACL,GAAI,IAAKwB,CAAAA,OAAL,CAAaxB,GAAb,CAAJ,CACI,MAAO,CAAA,CACX,IAAI,IAAKyB,CAAAA,UAAL,CAAgBzB,GAAhB,CAAJ,EAA4B,CAAC,IAAK1N,CAAAA,MAAL,EAA7B,CACI,MAAO,CAAA,CAJN,CAHI,CAejBmC,IAAI,CAAChC,KAAA,CAAQ,CAAA,CAAT,CAAe,CAAE,MAAO,KAAKiP,CAAAA,IAAL,CAAU,CAAV,CAAajP,KAAb,CAAT,CAKnBkP,IAAI,CAAClP,KAAA,CAAQ,CAAA,CAAT,CAAe,CAAE,MAAO,KAAKiP,CAAAA,IAAL,CAAU,CAAC,CAAX,CAAcjP,KAAd,CAAT,CAInBsM,MAAM,CAACxN,GAAD,CAAMD,IAAA,CAAO,CAAb,CAAgB,CAElB,IAAA,EAAO,IAAKE,CAAAA,IAAZ,EAAoB,IAAKC,CAAAA,EAAzB,GACY,CAAP,CAAAH,IAAA,CAAW,IAAKE,CAAAA,IAAhB,EAAwBD,GAAxB,CAA8B,IAAKC,CAAAA,IAAnC,CAA0CD,GAD/C,IAEY,CAAC,CAAR,CAAAD,IAAA,CAAY,IAAKG,CAAAA,EAAjB,EAAuBF,GAAvB,CAA6B,IAAKE,CAAAA,EAAlC,CAAuCF,GAF5C,IAGS,IAAKe,CAAAA,MAAL,EAHT,CAAA,EAMA,IAAA,CAAO,IAAKiP,CAAAA,UAAL,CAAgB,CAAhB,CAAmBhQ,GAAnB,CAAwBD,IAAxB,CAAP,CAAA,EACA,MAAO,KATW,CAalB,QAAO,EAAA,CACP,GAAI,CAAC,IAAKoE,CAAAA,MAAV,CACI,MAAO,KAAKsJ,CAAAA,KAFT,KAGH4C,MAAQ,IAAKX,CAAAA,UAHV,KAGsBjO;AAAS,IAH/B,CAGqC6G,MAAQ,CACpD,IAAI+H,KAAJ,EAAaA,KAAMd,CAAAA,OAAnB,EAA8B,IAAKpL,CAAAA,MAAnC,CACI,CAAA,CAAM,IAAK,IAAIlD,MAAQ,IAAKA,CAAAA,KAAjB,CAAwBwH,EAAI,IAAKgH,CAAAA,KAAMpL,CAAAA,MAA5C,CAAyD,CAAzD,EAAoDoE,CAApD,CAAA,CAA6D,CAC/D,IAAK,IAAIsF,EAAIsC,KAAb,CAAoBtC,CAApB,CAAuBA,CAAvB,CAA2BA,CAAEa,CAAAA,OAA7B,CACI,GAAIb,CAAE9M,CAAAA,KAAN,EAAeA,KAAf,CAAsB,CAClB,GAAIA,KAAJ,EAAa,IAAKA,CAAAA,KAAlB,CACI,MAAO8M,EACXtM,OAAA,CAASsM,CACTzF,MAAA,CAAQG,CAAR,CAAY,CACZ,OAAM,CALY,CAO1BxH,KAAA,CAAQ,IAAKwO,CAAAA,KAAL,CAAW,EAAEhH,CAAb,CATuD,CAYvE,IAAShD,KAAT,CAAa6C,KAAb,CAAoB7C,KAApB,CAAwB,IAAKgK,CAAAA,KAAMpL,CAAAA,MAAnC,CAA2CoB,KAAA,EAA3C,CACIhE,MAAA,CAAS,IAAIuN,UAAJ,CAAe,IAAK7K,CAAAA,MAApB,CAA4B1C,MAA5B,CAAoC,IAAKgO,CAAAA,KAAL,CAAWhK,KAAX,CAApC,CACb,OAAO,KAAKiK,CAAAA,UAAZ,CAAyB,IAAIV,UAAJ,CAAe,IAAK7K,CAAAA,MAApB,CAA4B1C,MAA5B,CAAoC,IAAKR,CAAAA,KAAzC,CAnBlB,CAwBP,QAAO,EAAA,CACP,MAAO,KAAKkD,CAAAA,MAAL,CAAc,IAAd,CAAqB,IAAKsJ,CAAAA,KAAMrN,CAAAA,IADhC,CA9Mf,CAiZA,MAAMkG,cAAgB,IAAIyG,OA0E1B,MAAMxC,aAAN,CAEIK,WAAW,CAIX3K,IAJW;AAMXC,EANW,CAQX6B,IARW,CAaX8E,MAbW,CAaHyJ,SAAA,CAAY,CAAA,CAbT,CAagBC,OAAA,CAAU,CAAA,CAb1B,CAaiC,CACxC,IAAKtQ,CAAAA,IAAL,CAAYA,IACZ,KAAKC,CAAAA,EAAL,CAAUA,EACV,KAAK6B,CAAAA,IAAL,CAAYA,IACZ,KAAK8E,CAAAA,MAAL,CAAcA,MACd,KAAK2J,CAAAA,IAAL,EAAaF,SAAA,CAAY,CAAZ,CAA4B,CAAzC,GAA+CC,OAAA,CAAU,CAAV,CAAwB,CAAvE,CALwC,CAWxC,aAAY,EAAA,CAAE,MAAqC,EAArC,EAAQ,IAAKC,CAAAA,IAAb,CAAoB,CAApB,CAAF,CAGZ,WAAU,EAAA,CAAE,MAAmC,EAAnC,EAAQ,IAAKA,CAAAA,IAAb,CAAoB,CAApB,CAAF,CAOPC,cAAO,CAAC1O,IAAD,CAAO2O,SAAA,CAAY,EAAnB,CAAuBC,OAAA,CAAU,CAAA,CAAjC,CAAwC,CAC9ClP,OAAAA,CAAS,CAAC,IAAI8I,YAAJ,CAAiB,CAAjB,CAAoBxI,IAAKsC,CAAAA,MAAzB,CAAiCtC,IAAjC,CAAuC,CAAvC,CAA0C,CAAA,CAA1C,CAAiD4O,OAAjD,CAAD,CACb,KAAK,IAAIC,CAAT,GAAcF,UAAd,CACQE,CAAE1Q,CAAAA,EAAN,CAAW6B,IAAKsC,CAAAA,MAAhB,EACI5C,OAAOI,CAAAA,IAAP,CAAY+O,CAAZ,CACR,OAAOnP,QAL2C,CAU/CoP,mBAAY,CAACH,SAAD,CAAYpG,OAAZ,CAAqBwG,MAAA,CAAS,GAA9B,CAAmC,CAClD,GAAI,CAACxG,OAAQjG,CAAAA,MAAb,CACI,MAAOqM,UACX,KAAIjP,OAAS,EAAb,CACIsP,GAAK,CADT,CACYC;AAAQN,SAAUrM,CAAAA,MAAV,CAAmBqM,SAAA,CAAU,CAAV,CAAnB,CAAkC,IACtD,KAAK,IAAIO,GAAK,CAAT,CAAYjR,IAAM,CAAlB,CAAqB+H,IAAM,CAAhC,CAAA,CAAoCkJ,EAAA,EAApC,CAA0C,CACtC,IAAIC,MAAQD,EAAA,CAAK3G,OAAQjG,CAAAA,MAAb,CAAsBiG,OAAA,CAAQ2G,EAAR,CAAtB,CAAoC,IAAhD,CACIE,QAAUD,KAAA,CAAQA,KAAME,CAAAA,KAAd,CAAsB,GACpC,IAAID,OAAJ,CAAcnR,GAAd,EAAqB8Q,MAArB,CACI,IAAA,CAAOE,KAAP,EAAgBA,KAAM/Q,CAAAA,IAAtB,CAA6BkR,OAA7B,CAAA,CAAsC,CAClC,IAAIE,IAAML,KACV,IAAIhR,GAAJ,EAAWqR,GAAIpR,CAAAA,IAAf,EAAuBkR,OAAvB,EAAkCE,GAAInR,CAAAA,EAAtC,EAA4C6H,GAA5C,CAAiD,CAAA,IACzCuJ,MAAQjK,IAAKyC,CAAAA,GAAL,CAASuH,GAAIpR,CAAAA,IAAb,CAAmBD,GAAnB,CAARsR,CAAkCvJ,GADO,CACFwJ,IAAMlK,IAAK0C,CAAAA,GAAL,CAASsH,GAAInR,CAAAA,EAAb,CAAiBiR,OAAjB,CAANI,CAAkCxJ,GAC7EsJ,IAAA,CAAMC,KAAA,EAASC,GAAT,CAAe,IAAf,CAAsB,IAAIhH,YAAJ,CAAiB+G,KAAjB,CAAwBC,GAAxB,CAA6BF,GAAItP,CAAAA,IAAjC,CAAuCsP,GAAIxK,CAAAA,MAA3C,CAAoDkB,GAApD,CAA8D,CAA9D,CAAyDkJ,EAAzD,CAAiE,CAAC,CAACC,KAAnE,CAFiB,CAI7CG,GAAJ,EACI5P,MAAOI,CAAAA,IAAP,CAAYwP,GAAZ,CACJ,IAAIL,KAAM9Q,CAAAA,EAAV,CAAeiR,OAAf,CACI,KACJH,MAAA,CAAQD,EAAA,CAAKL,SAAUrM,CAAAA,MAAf,CAAwBqM,SAAA,CAAUK,EAAA,EAAV,CAAxB,CAA0C,IAVhB,CAY1C,GAAI,CAACG,KAAL,CACI,KACJlR;GAAA,CAAMkR,KAAMM,CAAAA,GACZzJ,IAAA,CAAMmJ,KAAMM,CAAAA,GAAZ,CAAkBN,KAAMO,CAAAA,GAnBc,CAqB1C,MAAOhQ,OA1B2C,CA9C1D,CA4EA,KAAMiQ,OAAN,CASIC,UAAU,CAACC,KAAD,CAAQlB,SAAR,CAAmB7H,MAAnB,CAA2B,CACb,QAApB,EAAI,MAAO+I,MAAX,GACIA,KADJ,CACY,IAAIC,WAAJ,CAAgBD,KAAhB,CADZ,CAEA/I,OAAA,CAAUA,MAAD,CAAyCA,MAAOxE,CAAAA,MAAP,CAAgBwE,MAAOwB,CAAAA,GAAP,CAAWlB,CAAA,EAAK,IAAIC,KAAJ,CAAUD,CAAElJ,CAAAA,IAAZ,CAAkBkJ,CAAEjJ,CAAAA,EAApB,CAAhB,CAAhB,CAA2D,CAAC,IAAIkJ,KAAJ,CAAU,CAAV,CAAa,CAAb,CAAD,CAApG,CAAU,CAAC,IAAIA,KAAJ,CAAU,CAAV,CAAawI,KAAMvN,CAAAA,MAAnB,CAAD,CACnB,OAAO,KAAKyN,CAAAA,WAAL,CAAiBF,KAAjB,CAAwBlB,SAAxB,EAAqC,EAArC,CAAyC7H,MAAzC,CAJ0B,CAOrCkJ,KAAK,CAACH,KAAD,CAAQlB,SAAR,CAAmB7H,MAAnB,CAA2B,CAE5B,IADIkJ,KACJ,CADY,IAAKJ,CAAAA,UAAL,CAAgBC,KAAhB,CAAuBlB,SAAvB,CAAkC7H,MAAlC,CACZ,CAAA,CAAA,CAEI,GADImJ,SACJ,CADWD,KAAME,CAAAA,OAAN,EACX,CACI,MAAOD,UALa,CAhBpC,CAyBA,KAAMH,YAAN,CACIjH,WAAW,CAACsH,MAAD,CAAS,CAChB,IAAKA,CAAAA,MAAL,CAAcA,MADE,CAGhB,UAAS,EAAA,CAAE,MAAO,KAAKA,CAAAA,MAAO7N,CAAAA,MAArB,CACb8N,KAAK,CAAClS,IAAD,CAAO,CAAE,MAAO,KAAKiS,CAAAA,MAAOlK,CAAAA,KAAZ,CAAkB/H,IAAlB,CAAT,CACR,cAAa,EAAA,CAAE,MAAO,CAAA,CAAT,CACjBmS,IAAI,CAACnS,IAAD;AAAOC,EAAP,CAAW,CAAE,MAAO,KAAKgS,CAAAA,MAAOlK,CAAAA,KAAZ,CAAkB/H,IAAlB,CAAwBC,EAAxB,CAAT,CAPnB,CAuBA,KAAMmS,WAAN,CACIzH,WAAW,CAACa,MAAD,CAASsG,KAAT,CAAgB3H,OAAhB,CAAyBkI,MAAzB,CAAiCzJ,MAAjC,CAAyC,CAChD,IAAK4C,CAAAA,MAAL,CAAcA,MACd,KAAKsG,CAAAA,KAAL,CAAaA,KACb,KAAK3H,CAAAA,OAAL,CAAeA,OACf,KAAKkI,CAAAA,MAAL,CAAcA,MACd,KAAKzJ,CAAAA,MAAL,CAAcA,MALkC,CADxD,CASA,KAAM0J,cAAN,CACI3H,WAAW,CAACa,MAAD,CAAS+G,SAAT,CAAoBvI,MAApB,CAA4BhJ,KAA5B,CAAmC4B,KAAnC,CAA0CyP,MAA1C,CAAkDlC,IAAlD,CAAwD,CAC/D,IAAK3E,CAAAA,MAAL,CAAcA,MACd,KAAK+G,CAAAA,SAAL,CAAiBA,SACjB,KAAKvI,CAAAA,MAAL,CAAcA,MACd,KAAKhJ,CAAAA,KAAL,CAAaA,KACb,KAAK4B,CAAAA,KAAL,CAAaA,KACb,KAAKyP,CAAAA,MAAL,CAAcA,MACd,KAAKlC,CAAAA,IAAL,CAAYA,IACZ,KAAK9H,CAAAA,KAAL,CAAa,CACb,KAAKO,CAAAA,MAAL,CAAc,EATiD,CADvE,CAaA,MAAM4J,aAAe,IAAIlN,QAAJ,CAAa,CAAEuF,QAAS,CAAA,CAAX,CAAb,CACrB,MAAM4H,WAAN,CACI9H,WAAW,CAACpF,IAAD;AAAOmN,IAAP,CAAaf,KAAb,CAAoBlB,SAApB,CAA+B7H,MAA/B,CAAuC,CAC9C,IAAK8J,CAAAA,IAAL,CAAYA,IACZ,KAAKf,CAAAA,KAAL,CAAaA,KACb,KAAKlB,CAAAA,SAAL,CAAiBA,SACjB,KAAK7H,CAAAA,MAAL,CAAcA,MACd,KAAK1H,CAAAA,KAAL,CAAa,EACb,KAAKyR,CAAAA,SAAL,CAAiB,CAEjB,KAAKC,CAAAA,SAAL,CADA,IAAKC,CAAAA,QACL,CADgB,IAEhB,KAAKC,CAAAA,SAAL,CAAiBvN,IAT6B,CAWlDyM,OAAO,EAAG,CACN,GAAI,IAAKc,CAAAA,SAAT,CAAoB,CAChB,IAAIf,KAAO,IAAKe,CAAAA,SAAUd,CAAAA,OAAf,EACX,IAAI,CAACD,IAAL,CACI,MAAO,KACX,KAAKe,CAAAA,SAAL,CAAiB,IACjB,KAAKD,CAAAA,QAAL,CAAgBd,IAChB,KAAKgB,CAAAA,UAAL,EACA,IAAsB,IAAtB,EAAI,IAAKH,CAAAA,SAAT,CACI,IAAK,IAAI1R,KAAT,GAAkB,KAAKA,CAAAA,KAAvB,CACIA,KAAM4Q,CAAAA,KAAMkB,CAAAA,MAAZ,CAAmB,IAAKJ,CAAAA,SAAxB,CATQ,CAWpB,GAAI,IAAKD,CAAAA,SAAT,EAAsB,IAAKzR,CAAAA,KAAMkD,CAAAA,MAAjC,CAII,MAHI5C,KAGGA,CAHM,IAAKqR,CAAAA,QAGXrR,CAFe,IAEfA,EAFH,IAAKoR,CAAAA,SAEFpR;CADHA,IACGA,CADM,IAAI4D,IAAJ,CAAS5D,IAAOhB,CAAAA,IAAhB,CAAsBgB,IAAOO,CAAAA,QAA7B,CAAuCP,IAAOiB,CAAAA,SAA9C,CAAyDjB,IAAO4C,CAAAA,MAAhE,CAAwE5C,IAAOyM,CAAAA,UAAWrI,CAAAA,MAAlB,CAAyB,CAAC,CAAC4M,YAAD,CAAe,IAAKI,CAAAA,SAApB,CAAD,CAAzB,CAAxE,CACNpR,EAAAA,IAEPN,KAAAA,CAAQ,IAAKA,CAAAA,KAAL,CAAW,IAAKyR,CAAAA,SAAhB,CACZ,IADwCZ,KACxC,CAD+C7Q,IAAM4Q,CAAAA,KAAME,CAAAA,OAAZ,EAC/C,CAAU,CACN,IAAKW,CAAAA,SAAL,EAKA,KAAIjN,MAAQ6E,MAAOqC,CAAAA,MAAP,CAAcrC,MAAOmB,CAAAA,MAAP,CAAc,IAAd,CAAd,CAAmCxK,IAAMmR,CAAAA,MAAO3M,CAAAA,KAAhD,CACZA,MAAA,CAAMJ,QAASgG,CAAAA,OAAQ3I,CAAAA,EAAvB,CAAA,CAA6B,IAAI4I,WAAJ,CAAgBwG,KAAhB,CAAsB7Q,IAAMiJ,CAAAA,OAA5B,CAAqCjJ,IAAMsK,CAAAA,MAA3C,CAC7BtK,KAAMmR,CAAAA,MAAO3M,CAAAA,KAAb,CAAqBA,KARf,CAUV,MAAO,KA7BD,CA+BN,aAAY,EAAA,CACZ,GAAI,IAAKoN,CAAAA,SAAT,CACI,MAAO,EACX,KAAI/S,IAAM,IAAK4R,CAAAA,KAAMvN,CAAAA,MACrB,KAAK,IAAIoB,EAAI,IAAKmN,CAAAA,SAAlB,CAA6BnN,CAA7B,CAAiC,IAAKtE,CAAAA,KAAMkD,CAAAA,MAA5C,CAAoDoB,CAAA,EAApD,CACQ,IAAKtE,CAAAA,KAAL,CAAWsE,CAAX,CAAcoD,CAAAA,MAAd,CAAqB,CAArB,CAAwB5I,CAAAA,IAA5B;AAAmCD,GAAnC,GACIA,GADJ,CACUqH,IAAK0C,CAAAA,GAAL,CAAS/J,GAAT,CAAc,IAAKmB,CAAAA,KAAL,CAAWsE,CAAX,CAAcsM,CAAAA,KAAMmB,CAAAA,SAAlC,CADV,CAGJ,OAAOlT,IARK,CAUhBiT,MAAM,CAACjT,GAAD,CAAM,CACR,IAAK6S,CAAAA,SAAL,CAAiB7S,GACjB,IAAI,IAAK+S,CAAAA,SAAT,CACI,IAAKA,CAAAA,SAAUE,CAAAA,MAAf,CAAsBjT,GAAtB,CADJ,KAGI,KAAK,IAAIyF,EAAI,IAAKmN,CAAAA,SAAlB,CAA6BnN,CAA7B,CAAiC,IAAKtE,CAAAA,KAAMkD,CAAAA,MAA5C,CAAoDoB,CAAA,EAApD,CACI,IAAKtE,CAAAA,KAAL,CAAWsE,CAAX,CAAcsM,CAAAA,KAAMkB,CAAAA,MAApB,CAA2BjT,GAA3B,CANA,CAQZgT,UAAU,EAAG,CACT,IAAIG,eAAiB,IAAIC,cAAJ,CAAmB,IAAK1C,CAAAA,SAAxB,CAArB,CACItG,QAAU,IADd,CAEI5C,QAAU,IAFd,CAGIhG,OAAS,IAAI+L,UAAJ,CAAe,IAAIvM,QAAJ,CAAa,IAAK8R,CAAAA,QAAlB,CAA4B,IAAKjK,CAAAA,MAAL,CAAY,CAAZ,CAAe5I,CAAAA,IAA3C,CAAiD,CAAjD,CAAoD,IAApD,CAAf,CAA0E,CAA1E,CACb,EAAA,CAAM,IAAK,IAAI0S,IAAJ,CAAUU,SAAf,CAA4C,IAA5C,EAA0B,IAAKR,CAAAA,SAA/B,EAAoDrR,MAAOvB,CAAAA,IAA3D,CAAkE,IAAK4S,CAAAA,SAAvE,CAAA,CAAmF,CAAA,IACjF3R,MAAQ,CAAA,CAAZ,KAAkBuG,KAClB,IAAI0L,cAAeG,CAAAA,OAAf,CAAuB9R,MAAvB,CAAJ,CAAoC,CAChC,GAAI4I,OAAJ;CACQc,KADR,CACgBd,OAAQH,CAAAA,MAAOsJ,CAAAA,IAAf,CAAoBC,CAAA,EAAKA,CAAErJ,CAAAA,IAAKlK,CAAAA,IAAZ,EAAoBuB,MAAOvB,CAAAA,IAA3B,EAAmCuT,CAAErJ,CAAAA,IAAKjK,CAAAA,EAA1C,EAAgDsB,MAAOtB,CAAAA,EAAvD,EAA6DsT,CAAEtJ,CAAAA,KAAME,CAAAA,OAAzF,CADhB,EAGQ,IAAK,IAAIjB,CAAT,GAAc+B,MAAMhB,CAAAA,KAAME,CAAAA,OAA1B,CAAmC,CAAA,IAC3BnK,KAAOkJ,CAAElJ,CAAAA,IAATA,CAAgBiL,KAAMlL,CAAAA,GADK,CACAE,GAAKiJ,CAAEjJ,CAAAA,EAAPA,CAAYgL,KAAMlL,CAAAA,GAC7CC,KAAJ,EAAYuB,MAAOvB,CAAAA,IAAnB,EAA2BC,EAA3B,EAAiCsB,MAAOtB,CAAAA,EAAxC,EACIkK,OAAQvB,CAAAA,MAAOhH,CAAAA,IAAf,CAAoB,CAAE5B,IAAF,CAAQC,EAAR,CAApB,CAH2B,CAM3CgB,KAAA,CAAQ,CAAA,CAVwB,CAApC,IAYSsG,QAAJ,GAAgB6L,SAAhB,CAA4B9L,UAAA,CAAWC,OAAQqB,CAAAA,MAAnB,CAA2BrH,MAAOvB,CAAAA,IAAlC,CAAwCuB,MAAOtB,CAAAA,EAA/C,CAA5B,EACDgB,KADC,CACoB,CADpB,EACOmS,SADP,CAGI,CAAC7R,MAAOf,CAAAA,IAAK2B,CAAAA,WAAjB,EAAgCZ,MAAOvB,CAAAA,IAAvC,CAA8CuB,MAAOtB,CAAAA,EAArD,GAA4DyS,IAA5D,CAAmE,IAAKA,CAAAA,IAAL,CAAUnR,MAAV,CAAkB,IAAKoQ,CAAAA,KAAvB,CAAnE,GACIpQ,MAAOO,CAAAA,IAGZ,EAFIkG,WAAA,CAAYzG,MAAZ,CAEJ,CADIiS,IACJ,CADgBN,cAAeO,CAAAA,UAAf,CAA0BlS,MAAOvB,CAAAA,IAAjC;AAAuC0S,IAAKlH,CAAAA,MAA5C,CAChB,CAA2B,UAA3B,EAAI,MAAOkH,KAAKvI,CAAAA,OAAhB,CACIA,OADJ,CACc,IAAImI,aAAJ,CAAkBI,IAAKlH,CAAAA,MAAvB,CAA+BkH,IAAKvI,CAAAA,OAApC,CAA6CqJ,IAA7C,CAAwD,IAAKtS,CAAAA,KAAMkD,CAAAA,MAAnE,CAA2E7C,MAAOvB,CAAAA,IAAlF,CAAwFuB,MAAOO,CAAAA,IAA/F,CAAqGqI,OAArG,CADd,EAIQvB,EAGJ,CAHaF,WAAA,CAAY,IAAKE,CAAAA,MAAjB,CAAyB8J,IAAKvI,CAAAA,OAA9B,EAAyC,CAAC,IAAIhB,KAAJ,CAAU5H,MAAOvB,CAAAA,IAAjB,CAAuBuB,MAAOtB,CAAAA,EAA9B,CAAD,CAAzC,CAGb,CAFI2I,EAAOxE,CAAAA,MAEX,EADI,IAAKlD,CAAAA,KAAMU,CAAAA,IAAX,CAAgB,IAAIwQ,UAAJ,CAAeM,IAAKlH,CAAAA,MAApB,CAA4BkH,IAAKlH,CAAAA,MAAOkG,CAAAA,UAAZ,CAAuB,IAAKC,CAAAA,KAA5B,CAAmC5H,cAAA,CAAeyJ,IAAf,CAA0B5K,EAA1B,CAAnC,CAAsEA,EAAtE,CAA5B,CAA2G8J,IAAKvI,CAAAA,OAAL,CAAeuI,IAAKvI,CAAAA,OAAQC,CAAAA,GAAb,CAAiBlB,CAAA,EAAK,IAAIC,KAAJ,CAAUD,CAAElJ,CAAAA,IAAZ,CAAmBuB,MAAOvB,CAAAA,IAA1B,CAAgCkJ,CAAEjJ,CAAAA,EAAlC,CAAuCsB,MAAOvB,CAAAA,IAA9C,CAAtB,CAAf,CAA4F,IAAvM,CAA6MuB,MAAOO,CAAAA,IAApN,CAA0N8G,EAA1N,CAAhB,CACJ,CAAK8J,IAAKvI,CAAAA,OAAV,CAESvB,EAAOxE,CAAAA,MAFhB,GAGImD,OAHJ,CAGc,CAAEqB,OAAAA,EAAF,CAAUP,MAAO,CAAjB;AAAoB8H,KAAM5I,OAA1B,CAHd,EACItG,KADJ,CACY,CAAA,CARhB,CAJC,EAiBIkJ,OAjBJ,GAiBgB3C,KAjBhB,CAiBwB2C,OAAQoI,CAAAA,SAAR,CAAkBhR,MAAlB,CAjBxB,IAkBa,CAAA,CAEd,GAFIiG,KAEJ,GADIA,KACJ,CADY,IAAI2B,KAAJ,CAAU5H,MAAOvB,CAAAA,IAAjB,CAAuBuB,MAAOtB,CAAAA,EAA9B,CACZ,EAAIuH,KAAMxH,CAAAA,IAAV,CAAiBwH,KAAMvH,CAAAA,EAAvB,EACIkK,OAAQvB,CAAAA,MAAOhH,CAAAA,IAAf,CAAoB4F,KAApB,CArBH,CAuBL,IAAIvG,KAAJ,EAAaM,MAAOE,CAAAA,UAAP,EAAb,CACQ0I,OAEJ,EADIA,OAAQ9B,CAAAA,KAAR,EACJ,CAAId,OAAJ,EACIA,OAAQc,CAAAA,KAAR,EAJR,KAOI,KAAA,CACQ,CAAA9G,MAAOI,CAAAA,WAAP,EADR,CAAA,CAAS,CAGL,GAAI,CAACJ,MAAOT,CAAAA,MAAP,EAAL,CACI,MAAM,CACNqJ,QAAJ,EAAe,CAAC,EAAEA,OAAQ9B,CAAAA,KAA1B,GACQO,KAGJ,CAHaF,WAAA,CAAY,IAAKE,CAAAA,MAAjB,CAAyBuB,OAAQvB,CAAAA,MAAjC,CAGb,CAFIA,KAAOxE,CAAAA,MAEX,EADI,IAAKlD,CAAAA,KAAMkI,CAAAA,MAAX,CAAkBe,OAAQnJ,CAAAA,KAA1B,CAAiC,CAAjC,CAAoC,IAAIoR,UAAJ,CAAejI,OAAQqB,CAAAA,MAAvB,CAA+BrB,OAAQqB,CAAAA,MAAOkG,CAAAA,UAAf,CAA0B,IAAKC,CAAAA,KAA/B;AAAsC5H,cAAA,CAAeI,OAAQH,CAAAA,MAAvB,CAA+BpB,KAA/B,CAAtC,CAA8EA,KAA9E,CAA/B,CAAsHuB,OAAQvB,CAAAA,MAAOwB,CAAAA,GAAf,CAAmBlB,CAAA,EAAK,IAAIC,KAAJ,CAAUD,CAAElJ,CAAAA,IAAZ,CAAmBmK,OAAQvH,CAAAA,KAA3B,CAAkCsG,CAAEjJ,CAAAA,EAApC,CAAyCkK,OAAQvH,CAAAA,KAAjD,CAAxB,CAAtH,CAAwMuH,OAAQkI,CAAAA,MAAhN,CAAwNzJ,KAAxN,CAApC,CACJ,CAAAuB,OAAA,CAAUA,OAAQgG,CAAAA,IAJtB,CAMI5I,QAAJ,EAAe,CAAC,EAAEA,OAAQc,CAAAA,KAA1B,GACId,OADJ,CACcA,OAAQ4I,CAAAA,IADtB,CAXK,CA/CwE,CALhF,CA7DjB,CA6LA,KAAMuD,gBAAN,CACI/I,WAAW,CAACgJ,IAAD,CAAO/M,MAAP,CAAe,CACtB,IAAKA,CAAAA,MAAL,CAAcA,MACd,KAAKmL,CAAAA,IAAL,CAAY,CAAA,CACZ,KAAKxQ,CAAAA,MAAL,CAAcoS,IAAKlG,CAAAA,UAAL,EAHQ,CAM1BF,MAAM,CAACxN,GAAD,CAAM,CAAA,IACJ,CAAEwB,MAAF,CAAA,CAAa,IADT,CACeqS,EAAI7T,GAAJ6T,CAAU,IAAKhN,CAAAA,MACtC,KAAA,CAAO,CAAC,IAAKmL,CAAAA,IAAb,EAAqBxQ,MAAOvB,CAAAA,IAA5B,CAAmC4T,CAAnC,CAAA,CACQrS,MAAOtB,CAAAA,EAAX,EAAiBF,GAAjB,EAAwBwB,MAAON,CAAAA,KAAP,CAAa2S,CAAb,CAAgB,CAAhB,CAAmB,CAAA,CAAnB,CAA0B,CAAA,CAA1B,CAAxB,EACUrS,MAAO0B,CAAAA,IAAP,CAAY,CAAA,CAAZ,CADV,GAEI,IAAK8O,CAAAA,IAFT,CAEgB,CAAA,CAFhB,CAHI,CAQZsB,OAAO,CAAC9R,MAAD,CAAS,CACZ,IAAKgM,CAAAA,MAAL,CAAYhM,MAAOvB,CAAAA,IAAnB,CACA;GAAI,CAAC,IAAK+R,CAAAA,IAAV,EAAkB,IAAKxQ,CAAAA,MAAOvB,CAAAA,IAA9B,CAAqC,IAAK4G,CAAAA,MAA1C,EAAoDrF,MAAOvB,CAAAA,IAA3D,EAAmE,IAAKuB,CAAAA,MAAOO,CAAAA,IAA/E,CACI,IAAK,IAAIA,KAAO,IAAKP,CAAAA,MAAOO,CAAAA,IAA5B,CAAA,CAAA,CAAoC,CAChC,GAAIA,IAAJ,EAAYP,MAAOO,CAAAA,IAAnB,CACI,MAAO,CAAA,CACX,IAAIA,IAAKC,CAAAA,QAASqC,CAAAA,MAAlB,EAAiD,CAAjD,EAA4BtC,IAAKW,CAAAA,SAAL,CAAe,CAAf,CAA5B,EAAsDX,IAAKC,CAAAA,QAAL,CAAc,CAAd,CAAtD,UAAkFqD,KAAlF,CACItD,IAAA,CAAOA,IAAKC,CAAAA,QAAL,CAAc,CAAd,CADX,KAGI,MAN4B,CASxC,MAAO,CAAA,CAZK,CAfpB,CA8BA,KAAMoR,eAAN,CACIxI,WAAW,CAAC8F,SAAD,CAAY,CACnB,IAAI5P,EACJ,KAAK4P,CAAAA,SAAL,CAAiBA,SAEjB,KAAKoD,CAAAA,KAAL,CADA,IAAKC,CAAAA,KACL,CADa,CAETrD,UAAUrM,CAAAA,MAAd,EACQ2P,SAEJ,CAFY,IAAKC,CAAAA,OAEjB,CAF2BvD,SAAA,CAAU,CAAV,CAE3B,CADA,IAAKqD,CAAAA,KACL,CADsD,IAAzC,IAACjT,EAAD,CAAMkT,SAAMjS,CAAAA,IAAKuD,CAAAA,IAAX,CAAgBmN,YAAhB,CAAN,GAAwD,IAAK,EAA7D,GAAiD3R,EAAjD,CAAiEA,EAAjE,CAAsEkT,SAAM9T,CAAAA,EACzF,CAAA,IAAKiB,CAAAA,KAAL;AAAa,IAAIwS,eAAJ,CAAoBK,SAAMjS,CAAAA,IAA1B,CAAgC,CAACiS,SAAMnN,CAAAA,MAAvC,CAHjB,EAMI,IAAKoN,CAAAA,OANT,CAMmB,IAAK9S,CAAAA,KANxB,CAMgC,IAXb,CAcvBmS,OAAO,CAAClT,IAAD,CAAO,CACV,IAAA,CAAO,IAAK6T,CAAAA,OAAZ,EAAuB7T,IAAKH,CAAAA,IAA5B,EAAoC,IAAK8T,CAAAA,KAAzC,CAAA,CACI,IAAKG,CAAAA,QAAL,EACJ,OAAO,KAAKD,CAAAA,OAAZ,EAAuB,IAAKA,CAAAA,OAAQhU,CAAAA,IAApC,EAA4CG,IAAKH,CAAAA,IAAjD,EAAyD,IAAK8T,CAAAA,KAA9D,EAAuE3T,IAAKF,CAAAA,EAA5E,EAAkF,IAAKiB,CAAAA,KAAMmS,CAAAA,OAAX,CAAmBlT,IAAnB,CAHxE,CAKd8T,QAAQ,EAAG,CACP,IAAIpT,EACJ,KAAKgT,CAAAA,KAAL,EACA,IAAI,IAAKA,CAAAA,KAAT,EAAkB,IAAKpD,CAAAA,SAAUrM,CAAAA,MAAjC,CACI,IAAK4P,CAAAA,OAAL,CAAe,IAAK9S,CAAAA,KAApB,CAA4B,IADhC,KAGK,CACD,IAAIgJ,KAAO,IAAK8J,CAAAA,OAAZ9J,CAAsB,IAAKuG,CAAAA,SAAL,CAAe,IAAKoD,CAAAA,KAApB,CAC1B,KAAKC,CAAAA,KAAL,CAAqD,IAAxC,IAACjT,EAAD,CAAMqJ,IAAKpI,CAAAA,IAAKuD,CAAAA,IAAV,CAAemN,YAAf,CAAN,GAAuD,IAAK,EAA5D,GAAgD3R,EAAhD,CAAgEA,EAAhE,CAAqEqJ,IAAKjK,CAAAA,EACvF,KAAKiB,CAAAA,KAAL,CAAa,IAAIwS,eAAJ,CAAoBxJ,IAAKpI,CAAAA,IAAzB;AAA+B,CAACoI,IAAKtD,CAAAA,MAArC,CAHZ,CANE,CAYX6M,UAAU,CAAC1T,GAAD,CAAMyL,MAAN,CAAc,CACpB,IAAI3K,EACJ,KAAIW,OAAS,EACb,IAAI,IAAKN,CAAAA,KAAT,CAEI,IADA,IAAKA,CAAAA,KAAMK,CAAAA,MAAOgM,CAAAA,MAAlB,CAAyBxN,GAAzB,CAA8B,CAA9B,CACSA,CAAAA,GAAAA,CAAM,IAAKmB,CAAAA,KAAMK,CAAAA,MAAOpB,CAAAA,IAAjC,CAAuCJ,GAAvC,CAA4CA,GAA5C,CAAkDA,GAAIe,CAAAA,MAAtD,CAA8D,CAC1D,IAAImJ,MAA4B,IAApB,IAACpJ,EAAD,CAAMd,GAAI+B,CAAAA,IAAV,GAAmC,IAAK,EAAxC,GAA4BjB,EAA5B,CAA4C,IAAK,EAAjD,CAAqDA,EAAGwE,CAAAA,IAAH,CAAQC,QAASgG,CAAAA,OAAjB,CACjE,IAAIrB,KAAJ,EAAaA,KAAMuB,CAAAA,MAAnB,EAA6BA,MAA7B,CACI,IAAK,IAAIhG,EAAI,IAAKqO,CAAAA,KAAlB,CAAyBrO,CAAzB,CAA6B,IAAKiL,CAAAA,SAAUrM,CAAAA,MAA5C,CAAoDoB,CAAA,EAApD,CAAyD,CACrD,IAAI0E,KAAO,IAAKuG,CAAAA,SAAL,CAAejL,CAAf,CACX,IAAI0E,IAAKlK,CAAAA,IAAT,EAAiBD,GAAIE,CAAAA,EAArB,CACI,KACAiK,KAAKpI,CAAAA,IAAT,EAAiB,IAAKkS,CAAAA,OAAQlS,CAAAA,IAA9B,EACIN,MAAOI,CAAAA,IAAP,CAAY,CACRsI,IADQ,CAERnK,IAAKA,GAAIC,CAAAA,IAATD,CAAgBmK,IAAKtD,CAAAA,MAFb,CAGRqD,KAHQ,CAAZ,CALiD,CAHH,CAiBlE,MAAOzI,OAtBa,CAhC5B,CAgJA5B,OAAQmG,CAAAA,mBAAR,CAnpD4BA,IAopD5BnG,QAAQ2L,CAAAA,WAAR;AAAsBA,WACtB3L,QAAQ0F,CAAAA,QAAR,CAAmBA,QACnB1F,QAAQ2M,CAAAA,OAAR,CAAkBA,OAClB3M,QAAQ0I,CAAAA,QAAR,CAAmBA,QACnB1I,QAAQ6R,CAAAA,MAAR,CAAiBA,MACjB7R,QAAQwF,CAAAA,IAAR,CAAeA,IACfxF,QAAQsC,CAAAA,UAAR,CAAqBA,UACrBtC,QAAQ0N,CAAAA,UAAR,CAAqBA,UACrB1N,QAAQ0K,CAAAA,YAAR,CAAuBA,YACvB1K,QAAQsU,CAAAA,UAAR,CA/YAA,QAAmB,CAACxB,IAAD,CAAO,CACtB,MAAO,CAACZ,KAAD,CAAQH,KAAR,CAAelB,SAAf,CAA0B7H,MAA1B,CAAA,EAAqC,IAAI6J,UAAJ,CAAeX,KAAf,CAAsBY,IAAtB,CAA4Bf,KAA5B,CAAmClB,SAAnC,CAA8C7H,MAA9C,CADtB,CAtxCmF;",
"sources":["node_modules/@lezer/common/dist/index.cjs"],
"sourcesContent":["shadow$provide[\"module$node_modules$$lezer$common$dist$index_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n// FIXME profile adding a per-Tree TreeNode cache, validating it by\n// parent pointer\n/// The default maximum length of a `TreeBuffer` node (1024).\nconst DefaultBufferLength = 1024;\nlet nextPropID = 0;\nclass Range {\n    constructor(from, to) {\n        this.from = from;\n        this.to = to;\n    }\n}\n/// Each [node type](#common.NodeType) or [individual tree](#common.Tree)\n/// can have metadata associated with it in props. Instances of this\n/// class represent prop names.\nclass NodeProp {\n    /// Create a new node prop type.\n    constructor(config = {}) {\n        this.id = nextPropID++;\n        this.perNode = !!config.perNode;\n        this.deserialize = config.deserialize || (() => {\n            throw new Error(\"This node type doesn't define a deserialize function\");\n        });\n    }\n    /// This is meant to be used with\n    /// [`NodeSet.extend`](#common.NodeSet.extend) or\n    /// [`LRParser.configure`](#lr.ParserConfig.props) to compute\n    /// prop values for each node type in the set. Takes a [match\n    /// object](#common.NodeType^match) or function that returns undefined\n    /// if the node type doesn't get this prop, and the prop's value if\n    /// it does.\n    add(match) {\n        if (this.perNode)\n            throw new RangeError(\"Can't add per-node props to node types\");\n        if (typeof match != \"function\")\n            match = NodeType.match(match);\n        return (type) => {\n            let result = match(type);\n            return result === undefined ? null : [this, result];\n        };\n    }\n}\n/// Prop that is used to describe matching delimiters. For opening\n/// delimiters, this holds an array of node names (written as a\n/// space-separated string when declaring this prop in a grammar)\n/// for the node types of closing delimiters that match it.\nNodeProp.closedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is\n/// attached to closing delimiters, holding an array of node names\n/// of types of matching opening delimiters.\nNodeProp.openedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// Used to assign node types to groups (for example, all node\n/// types that represent an expression could be tagged with an\n/// `\"Expression\"` group).\nNodeProp.group = new NodeProp({ deserialize: str => str.split(\" \") });\n/// The hash of the [context](#lr.ContextTracker.constructor)\n/// that the node was parsed in, if any. Used to limit reuse of\n/// contextual nodes.\nNodeProp.contextHash = new NodeProp({ perNode: true });\n/// The distance beyond the end of the node that the tokenizer\n/// looked ahead for any of the tokens inside the node. (The LR\n/// parser only stores this when it is larger than 25, for\n/// efficiency reasons.)\nNodeProp.lookAhead = new NodeProp({ perNode: true });\n/// This per-node prop is used to replace a given node, or part of a\n/// node, with another tree. This is useful to include trees from\n/// different languages.\nNodeProp.mounted = new NodeProp({ perNode: true });\n/// A mounted tree, which can be [stored](#common.NodeProp^mounted) on\n/// a tree node to indicate that parts of its content are\n/// represented by another tree.\nclass MountedTree {\n    constructor(\n    /// The inner tree.\n    tree, \n    /// If this is null, this tree replaces the entire node (it will\n    /// be included in the regular iteration instead of its host\n    /// node). If not, only the given ranges are considered to be\n    /// covered by this tree. This is used for trees that are mixed in\n    /// a way that isn't strictly hierarchical. Such mounted trees are\n    /// only entered by [`resolveInner`](#common.Tree.resolveInner)\n    /// and [`enter`](#common.SyntaxNode.enter).\n    overlay, \n    /// The parser used to create this subtree.\n    parser) {\n        this.tree = tree;\n        this.overlay = overlay;\n        this.parser = parser;\n    }\n}\nconst noProps = Object.create(null);\n/// Each node in a syntax tree has a node type associated with it.\nclass NodeType {\n    /// @internal\n    constructor(\n    /// The name of the node type. Not necessarily unique, but if the\n    /// grammar was written properly, different node types with the\n    /// same name within a node set should play the same semantic\n    /// role.\n    name, \n    /// @internal\n    props, \n    /// The id of this node in its set. Corresponds to the term ids\n    /// used in the parser.\n    id, \n    /// @internal\n    flags = 0) {\n        this.name = name;\n        this.props = props;\n        this.id = id;\n        this.flags = flags;\n    }\n    static define(spec) {\n        let props = spec.props && spec.props.length ? Object.create(null) : noProps;\n        let flags = (spec.top ? 1 /* Top */ : 0) | (spec.skipped ? 2 /* Skipped */ : 0) |\n            (spec.error ? 4 /* Error */ : 0) | (spec.name == null ? 8 /* Anonymous */ : 0);\n        let type = new NodeType(spec.name || \"\", props, spec.id, flags);\n        if (spec.props)\n            for (let src of spec.props) {\n                if (!Array.isArray(src))\n                    src = src(type);\n                if (src) {\n                    if (src[0].perNode)\n                        throw new RangeError(\"Can't store a per-node prop on a node type\");\n                    props[src[0].id] = src[1];\n                }\n            }\n        return type;\n    }\n    /// Retrieves a node prop for this type. Will return `undefined` if\n    /// the prop isn't present on this node.\n    prop(prop) { return this.props[prop.id]; }\n    /// True when this is the top node of a grammar.\n    get isTop() { return (this.flags & 1 /* Top */) > 0; }\n    /// True when this node is produced by a skip rule.\n    get isSkipped() { return (this.flags & 2 /* Skipped */) > 0; }\n    /// Indicates whether this is an error node.\n    get isError() { return (this.flags & 4 /* Error */) > 0; }\n    /// When true, this node type doesn't correspond to a user-declared\n    /// named node, for example because it is used to cache repetition.\n    get isAnonymous() { return (this.flags & 8 /* Anonymous */) > 0; }\n    /// Returns true when this node's name or one of its\n    /// [groups](#common.NodeProp^group) matches the given string.\n    is(name) {\n        if (typeof name == 'string') {\n            if (this.name == name)\n                return true;\n            let group = this.prop(NodeProp.group);\n            return group ? group.indexOf(name) > -1 : false;\n        }\n        return this.id == name;\n    }\n    /// Create a function from node types to arbitrary values by\n    /// specifying an object whose property names are node or\n    /// [group](#common.NodeProp^group) names. Often useful with\n    /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n    /// names, separated by spaces, in a single property name to map\n    /// multiple node names to a single value.\n    static match(map) {\n        let direct = Object.create(null);\n        for (let prop in map)\n            for (let name of prop.split(\" \"))\n                direct[name] = map[prop];\n        return (node) => {\n            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n                let found = direct[i < 0 ? node.name : groups[i]];\n                if (found)\n                    return found;\n            }\n        };\n    }\n}\n/// An empty dummy node type to use when no actual type is available.\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8 /* Anonymous */);\n/// A node set holds a collection of node types. It is used to\n/// compactly represent trees by storing their type ids, rather than a\n/// full pointer to the type object, in a numeric array. Each parser\n/// [has](#lr.LRParser.nodeSet) a node set, and [tree\n/// buffers](#common.TreeBuffer) can only store collections of nodes\n/// from the same set. A set can have a maximum of 2**16 (65536) node\n/// types in it, so that the ids fit into 16-bit typed array slots.\nclass NodeSet {\n    /// Create a set with the given types. The `id` property of each\n    /// type should correspond to its position within the array.\n    constructor(\n    /// The node types in this set, by id.\n    types) {\n        this.types = types;\n        for (let i = 0; i < types.length; i++)\n            if (types[i].id != i)\n                throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n    }\n    /// Create a copy of this set with some node properties added. The\n    /// arguments to this method should be created with\n    /// [`NodeProp.add`](#common.NodeProp.add).\n    extend(...props) {\n        let newTypes = [];\n        for (let type of this.types) {\n            let newProps = null;\n            for (let source of props) {\n                let add = source(type);\n                if (add) {\n                    if (!newProps)\n                        newProps = Object.assign({}, type.props);\n                    newProps[add[0].id] = add[1];\n                }\n            }\n            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n        }\n        return new NodeSet(newTypes);\n    }\n}\nconst CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();\n/// A piece of syntax tree. There are two ways to approach these\n/// trees: the way they are actually stored in memory, and the\n/// convenient way.\n///\n/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`\n/// objects. By packing detail information into `TreeBuffer` leaf\n/// nodes, the representation is made a lot more memory-efficient.\n///\n/// However, when you want to actually work with tree nodes, this\n/// representation is very awkward, so most client code will want to\n/// use the [`TreeCursor`](#common.TreeCursor) or\n/// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\n/// a view on some part of this data structure, and can be used to\n/// move around to adjacent nodes.\nclass Tree {\n    /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n    constructor(\n    /// The type of the top node.\n    type, \n    /// This node's child nodes.\n    children, \n    /// The positions (offsets relative to the start of this tree) of\n    /// the children.\n    positions, \n    /// The total length of this tree\n    length, \n    /// Per-node [node props](#common.NodeProp) to associate with this node.\n    props) {\n        this.type = type;\n        this.children = children;\n        this.positions = positions;\n        this.length = length;\n        /// @internal\n        this.props = null;\n        if (props && props.length) {\n            this.props = Object.create(null);\n            for (let [prop, value] of props)\n                this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n        }\n    }\n    /// @internal\n    toString() {\n        let mounted = this.prop(NodeProp.mounted);\n        if (mounted && !mounted.overlay)\n            return mounted.tree.toString();\n        let children = \"\";\n        for (let ch of this.children) {\n            let str = ch.toString();\n            if (str) {\n                if (children)\n                    children += \",\";\n                children += str;\n            }\n        }\n        return !this.type.name ? children :\n            (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +\n                (children.length ? \"(\" + children + \")\" : \"\");\n    }\n    /// Get a [tree cursor](#common.TreeCursor) rooted at this tree. When\n    /// `pos` is given, the cursor is [moved](#common.TreeCursor.moveTo)\n    /// to the given position and side.\n    cursor(pos, side = 0) {\n        let scope = (pos != null && CachedNode.get(this)) || this.topNode;\n        let cursor = new TreeCursor(scope);\n        if (pos != null) {\n            cursor.moveTo(pos, side);\n            CachedNode.set(this, cursor._tree);\n        }\n        return cursor;\n    }\n    /// Get a [tree cursor](#common.TreeCursor) that, unlike regular\n    /// cursors, doesn't skip through\n    /// [anonymous](#common.NodeType.isAnonymous) nodes and doesn't\n    /// automatically enter mounted nodes.\n    fullCursor() {\n        return new TreeCursor(this.topNode, 1 /* Full */);\n    }\n    /// Get a [syntax node](#common.SyntaxNode) object for the top of the\n    /// tree.\n    get topNode() {\n        return new TreeNode(this, 0, 0, null);\n    }\n    /// Get the [syntax node](#common.SyntaxNode) at the given position.\n    /// If `side` is -1, this will move into nodes that end at the\n    /// position. If 1, it'll move into nodes that start at the\n    /// position. With 0, it'll only enter nodes that cover the position\n    /// from both sides.\n    resolve(pos, side = 0) {\n        let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\n        CachedNode.set(this, node);\n        return node;\n    }\n    /// Like [`resolve`](#common.Tree.resolve), but will enter\n    /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n    /// pointing into the innermost overlaid tree at the given position\n    /// (with parent links going through all parent structure, including\n    /// the host trees).\n    resolveInner(pos, side = 0) {\n        let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\n        CachedInnerNode.set(this, node);\n        return node;\n    }\n    /// Iterate over the tree and its children, calling `enter` for any\n    /// node that touches the `from`/`to` region (if given) before\n    /// running over such a node's children, and `leave` (if given) when\n    /// leaving the node. When `enter` returns `false`, that node will\n    /// not have its children iterated over (or `leave` called).\n    iterate(spec) {\n        let { enter, leave, from = 0, to = this.length } = spec;\n        for (let c = this.cursor(), get = () => c.node;;) {\n            let mustLeave = false;\n            if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c.type, c.from, c.to, get) !== false)) {\n                if (c.firstChild())\n                    continue;\n                if (!c.type.isAnonymous)\n                    mustLeave = true;\n            }\n            for (;;) {\n                if (mustLeave && leave)\n                    leave(c.type, c.from, c.to, get);\n                mustLeave = c.type.isAnonymous;\n                if (c.nextSibling())\n                    break;\n                if (!c.parent())\n                    return;\n                mustLeave = true;\n            }\n        }\n    }\n    /// Get the value of the given [node prop](#common.NodeProp) for this\n    /// node. Works with both per-node and per-type props.\n    prop(prop) {\n        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\n    }\n    /// Returns the node's [per-node props](#common.NodeProp.perNode) in a\n    /// format that can be passed to the [`Tree`](#common.Tree)\n    /// constructor.\n    get propValues() {\n        let result = [];\n        if (this.props)\n            for (let id in this.props)\n                result.push([+id, this.props[id]]);\n        return result;\n    }\n    /// Balance the direct children of this tree, producing a copy of\n    /// which may have children grouped into subtrees with type\n    /// [`NodeType.none`](#common.NodeType^none).\n    balance(config = {}) {\n        return this.children.length <= 8 /* BranchFactor */ ? this :\n            balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));\n    }\n    /// Build a tree from a postfix-ordered buffer of node information,\n    /// or a cursor over such a buffer.\n    static build(data) { return buildTree(data); }\n}\n/// The empty tree\nTree.empty = new Tree(NodeType.none, [], [], 0);\nclass FlatBufferCursor {\n    constructor(buffer, index) {\n        this.buffer = buffer;\n        this.index = index;\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    get pos() { return this.index; }\n    next() { this.index -= 4; }\n    fork() { return new FlatBufferCursor(this.buffer, this.index); }\n}\n/// Tree buffers contain (type, start, end, endIndex) quads for each\n/// node. In such a buffer, nodes are stored in prefix order (parents\n/// before children, with the endIndex of the parent indicating which\n/// children belong to it)\nclass TreeBuffer {\n    /// Create a tree buffer.\n    constructor(\n    /// The buffer's content.\n    buffer, \n    /// The total length of the group of nodes in the buffer.\n    length, \n    /// The node set used in this buffer.\n    set) {\n        this.buffer = buffer;\n        this.length = length;\n        this.set = set;\n    }\n    /// @internal\n    get type() { return NodeType.none; }\n    /// @internal\n    toString() {\n        let result = [];\n        for (let index = 0; index < this.buffer.length;) {\n            result.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result.join(\",\");\n    }\n    /// @internal\n    childString(index) {\n        let id = this.buffer[index], endIndex = this.buffer[index + 3];\n        let type = this.set.types[id], result = type.name;\n        if (/\\W/.test(result) && !type.isError)\n            result = JSON.stringify(result);\n        index += 4;\n        if (endIndex == index)\n            return result;\n        let children = [];\n        while (index < endIndex) {\n            children.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result + \"(\" + children.join(\",\") + \")\";\n    }\n    /// @internal\n    findChild(startIndex, endIndex, dir, pos, side) {\n        let { buffer } = this, pick = -1;\n        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\n            if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\n                pick = i;\n                if (dir > 0)\n                    break;\n            }\n        }\n        return pick;\n    }\n    /// @internal\n    slice(startI, endI, from, to) {\n        let b = this.buffer;\n        let copy = new Uint16Array(endI - startI);\n        for (let i = startI, j = 0; i < endI;) {\n            copy[j++] = b[i++];\n            copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - startI;\n        }\n        return new TreeBuffer(copy, to - from, this.set);\n    }\n}\nfunction checkSide(side, pos, from, to) {\n    switch (side) {\n        case -2 /* Before */: return from < pos;\n        case -1 /* AtOrBefore */: return to >= pos && from < pos;\n        case 0 /* Around */: return from < pos && to > pos;\n        case 1 /* AtOrAfter */: return from <= pos && to > pos;\n        case 2 /* After */: return to > pos;\n        case 4 /* DontCare */: return true;\n    }\n}\nfunction enterUnfinishedNodesBefore(node, pos) {\n    let scan = node.childBefore(pos);\n    while (scan) {\n        let last = scan.lastChild;\n        if (!last || last.to != scan.to)\n            break;\n        if (last.type.isError && last.from == last.to) {\n            node = scan;\n            scan = last.prevSibling;\n        }\n        else {\n            scan = last;\n        }\n    }\n    return node;\n}\nfunction resolveNode(node, pos, side, overlays) {\n    var _a;\n    // Move up to a node that actually holds the position, if possible\n    while (node.from == node.to ||\n        (side < 1 ? node.from >= pos : node.from > pos) ||\n        (side > -1 ? node.to <= pos : node.to < pos)) {\n        let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\n        if (!parent)\n            return node;\n        node = parent;\n    }\n    // Must go up out of overlays when those do not overlap with pos\n    if (overlays)\n        for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {\n            if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, true)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)\n                node = parent;\n        }\n    for (;;) {\n        let inner = node.enter(pos, side, overlays);\n        if (!inner)\n            return node;\n        node = inner;\n    }\n}\nclass TreeNode {\n    constructor(node, _from, \n    // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\n    index, _parent) {\n        this.node = node;\n        this._from = _from;\n        this.index = index;\n        this._parent = _parent;\n    }\n    get type() { return this.node.type; }\n    get name() { return this.node.type.name; }\n    get from() { return this._from; }\n    get to() { return this._from + this.node.length; }\n    nextChild(i, dir, pos, side, mode = 0) {\n        for (let parent = this;;) {\n            for (let { children, positions } = parent.node, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n                let next = children[i], start = positions[i] + parent._from;\n                if (!checkSide(side, pos, start, start + next.length))\n                    continue;\n                if (next instanceof TreeBuffer) {\n                    if (mode & 2 /* NoEnterBuffer */)\n                        continue;\n                    let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\n                    if (index > -1)\n                        return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n                }\n                else if ((mode & 1 /* Full */) || (!next.type.isAnonymous || hasChild(next))) {\n                    let mounted;\n                    if (!(mode & 1 /* Full */) && next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)\n                        return new TreeNode(mounted.tree, start, i, parent);\n                    let inner = new TreeNode(next, start, i, parent);\n                    return (mode & 1 /* Full */) || !inner.type.isAnonymous ? inner\n                        : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\n                }\n            }\n            if ((mode & 1 /* Full */) || !parent.type.isAnonymous)\n                return null;\n            if (parent.index >= 0)\n                i = parent.index + dir;\n            else\n                i = dir < 0 ? -1 : parent._parent.node.children.length;\n            parent = parent._parent;\n            if (!parent)\n                return null;\n        }\n    }\n    get firstChild() { return this.nextChild(0, 1, 0, 4 /* DontCare */); }\n    get lastChild() { return this.nextChild(this.node.children.length - 1, -1, 0, 4 /* DontCare */); }\n    childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* After */); }\n    childBefore(pos) { return this.nextChild(this.node.children.length - 1, -1, pos, -2 /* Before */); }\n    enter(pos, side, overlays = true, buffers = true) {\n        let mounted;\n        if (overlays && (mounted = this.node.prop(NodeProp.mounted)) && mounted.overlay) {\n            let rPos = pos - this.from;\n            for (let { from, to } of mounted.overlay) {\n                if ((side > 0 ? from <= rPos : from < rPos) &&\n                    (side < 0 ? to >= rPos : to > rPos))\n                    return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\n            }\n        }\n        return this.nextChild(0, 1, pos, side, buffers ? 0 : 2 /* NoEnterBuffer */);\n    }\n    nextSignificantParent() {\n        let val = this;\n        while (val.type.isAnonymous && val._parent)\n            val = val._parent;\n        return val;\n    }\n    get parent() {\n        return this._parent ? this._parent.nextSignificantParent() : null;\n    }\n    get nextSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* DontCare */) : null;\n    }\n    get prevSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* DontCare */) : null;\n    }\n    get cursor() { return new TreeCursor(this); }\n    get tree() { return this.node; }\n    toTree() { return this.node; }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    /// @internal\n    toString() { return this.node.toString(); }\n}\nfunction getChildren(node, type, before, after) {\n    let cur = node.cursor, result = [];\n    if (!cur.firstChild())\n        return result;\n    if (before != null)\n        while (!cur.type.is(before))\n            if (!cur.nextSibling())\n                return result;\n    for (;;) {\n        if (after != null && cur.type.is(after))\n            return result;\n        if (cur.type.is(type))\n            result.push(cur.node);\n        if (!cur.nextSibling())\n            return after == null ? result : [];\n    }\n}\nclass BufferContext {\n    constructor(parent, buffer, index, start) {\n        this.parent = parent;\n        this.buffer = buffer;\n        this.index = index;\n        this.start = start;\n    }\n}\nclass BufferNode {\n    constructor(context, _parent, index) {\n        this.context = context;\n        this._parent = _parent;\n        this.index = index;\n        this.type = context.buffer.set.types[context.buffer.buffer[index]];\n    }\n    get name() { return this.type.name; }\n    get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }\n    get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }\n    child(dir, pos, side) {\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get firstChild() { return this.child(1, 0, 4 /* DontCare */); }\n    get lastChild() { return this.child(-1, 0, 4 /* DontCare */); }\n    childAfter(pos) { return this.child(1, pos, 2 /* After */); }\n    childBefore(pos) { return this.child(-1, pos, -2 /* Before */); }\n    enter(pos, side, overlays, buffers = true) {\n        if (!buffers)\n            return null;\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get parent() {\n        return this._parent || this.context.parent.nextSignificantParent();\n    }\n    externalSibling(dir) {\n        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* DontCare */);\n    }\n    get nextSibling() {\n        let { buffer } = this.context;\n        let after = buffer.buffer[this.index + 3];\n        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))\n            return new BufferNode(this.context, this._parent, after);\n        return this.externalSibling(1);\n    }\n    get prevSibling() {\n        let { buffer } = this.context;\n        let parentStart = this._parent ? this._parent.index + 4 : 0;\n        if (this.index == parentStart)\n            return this.externalSibling(-1);\n        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));\n    }\n    get cursor() { return new TreeCursor(this); }\n    get tree() { return null; }\n    toTree() {\n        let children = [], positions = [];\n        let { buffer } = this.context;\n        let startI = this.index + 4, endI = buffer.buffer[this.index + 3];\n        if (endI > startI) {\n            let from = buffer.buffer[this.index + 1], to = buffer.buffer[this.index + 2];\n            children.push(buffer.slice(startI, endI, from, to));\n            positions.push(0);\n        }\n        return new Tree(this.type, children, positions, this.to - this.from);\n    }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\n    /// @internal\n    toString() { return this.context.buffer.childString(this.index); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n}\n/// A tree cursor object focuses on a given node in a syntax tree, and\n/// allows you to move to adjacent nodes.\nclass TreeCursor {\n    /// @internal\n    constructor(node, \n    /// @internal\n    mode = 0) {\n        this.mode = mode;\n        this.buffer = null;\n        this.stack = [];\n        this.index = 0;\n        this.bufferNode = null;\n        if (node instanceof TreeNode) {\n            this.yieldNode(node);\n        }\n        else {\n            this._tree = node.context.parent;\n            this.buffer = node.context;\n            for (let n = node._parent; n; n = n._parent)\n                this.stack.unshift(n.index);\n            this.bufferNode = node;\n            this.yieldBuf(node.index);\n        }\n    }\n    /// Shorthand for `.type.name`.\n    get name() { return this.type.name; }\n    yieldNode(node) {\n        if (!node)\n            return false;\n        this._tree = node;\n        this.type = node.type;\n        this.from = node.from;\n        this.to = node.to;\n        return true;\n    }\n    yieldBuf(index, type) {\n        this.index = index;\n        let { start, buffer } = this.buffer;\n        this.type = type || buffer.set.types[buffer.buffer[index]];\n        this.from = start + buffer.buffer[index + 1];\n        this.to = start + buffer.buffer[index + 2];\n        return true;\n    }\n    yield(node) {\n        if (!node)\n            return false;\n        if (node instanceof TreeNode) {\n            this.buffer = null;\n            return this.yieldNode(node);\n        }\n        this.buffer = node.context;\n        return this.yieldBuf(node.index, node.type);\n    }\n    /// @internal\n    toString() {\n        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n    }\n    /// @internal\n    enterChild(dir, pos, side) {\n        if (!this.buffer)\n            return this.yield(this._tree.nextChild(dir < 0 ? this._tree.node.children.length - 1 : 0, dir, pos, side, this.mode));\n        let { buffer } = this.buffer;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\n        if (index < 0)\n            return false;\n        this.stack.push(this.index);\n        return this.yieldBuf(index);\n    }\n    /// Move the cursor to this node's first child. When this returns\n    /// false, the node has no child, and the cursor has not been moved.\n    firstChild() { return this.enterChild(1, 0, 4 /* DontCare */); }\n    /// Move the cursor to this node's last child.\n    lastChild() { return this.enterChild(-1, 0, 4 /* DontCare */); }\n    /// Move the cursor to the first child that ends after `pos`.\n    childAfter(pos) { return this.enterChild(1, pos, 2 /* After */); }\n    /// Move to the last child that starts before `pos`.\n    childBefore(pos) { return this.enterChild(-1, pos, -2 /* Before */); }\n    /// Move the cursor to the child around `pos`. If side is -1 the\n    /// child may end at that position, when 1 it may start there. This\n    /// will also enter [overlaid](#common.MountedTree.overlay)\n    /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n    /// set to false.\n    enter(pos, side, overlays = true, buffers = true) {\n        if (!this.buffer)\n            return this.yield(this._tree.enter(pos, side, overlays && !(this.mode & 1 /* Full */), buffers));\n        return buffers ? this.enterChild(1, pos, side) : false;\n    }\n    /// Move to the node's parent node, if this isn't the top node.\n    parent() {\n        if (!this.buffer)\n            return this.yieldNode((this.mode & 1 /* Full */) ? this._tree._parent : this._tree.parent);\n        if (this.stack.length)\n            return this.yieldBuf(this.stack.pop());\n        let parent = (this.mode & 1 /* Full */) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n        this.buffer = null;\n        return this.yieldNode(parent);\n    }\n    /// @internal\n    sibling(dir) {\n        if (!this.buffer)\n            return !this._tree._parent ? false\n                : this.yield(this._tree.index < 0 ? null\n                    : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* DontCare */, this.mode));\n        let { buffer } = this.buffer, d = this.stack.length - 1;\n        if (dir < 0) {\n            let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n            if (this.index != parentStart)\n                return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));\n        }\n        else {\n            let after = buffer.buffer[this.index + 3];\n            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))\n                return this.yieldBuf(after);\n        }\n        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* DontCare */, this.mode)) : false;\n    }\n    /// Move to this node's next sibling, if any.\n    nextSibling() { return this.sibling(1); }\n    /// Move to this node's previous sibling, if any.\n    prevSibling() { return this.sibling(-1); }\n    atLastNode(dir) {\n        let index, parent, { buffer } = this;\n        if (buffer) {\n            if (dir > 0) {\n                if (this.index < buffer.buffer.buffer.length)\n                    return false;\n            }\n            else {\n                for (let i = 0; i < this.index; i++)\n                    if (buffer.buffer.buffer[i + 3] < this.index)\n                        return false;\n            }\n            ({ index, parent } = buffer);\n        }\n        else {\n            ({ index, _parent: parent } = this._tree);\n        }\n        for (; parent; { index, _parent: parent } = parent) {\n            if (index > -1)\n                for (let i = index + dir, e = dir < 0 ? -1 : parent.node.children.length; i != e; i += dir) {\n                    let child = parent.node.children[i];\n                    if ((this.mode & 1 /* Full */) || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child))\n                        return false;\n                }\n        }\n        return true;\n    }\n    move(dir, enter) {\n        if (enter && this.enterChild(dir, 0, 4 /* DontCare */))\n            return true;\n        for (;;) {\n            if (this.sibling(dir))\n                return true;\n            if (this.atLastNode(dir) || !this.parent())\n                return false;\n        }\n    }\n    /// Move to the next node in a\n    /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))\n    /// traversal, going from a node to its first child or, if the\n    /// current node is empty or `enter` is false, its next sibling or\n    /// the next sibling of the first parent node that has one.\n    next(enter = true) { return this.move(1, enter); }\n    /// Move to the next node in a last-to-first pre-order traveral. A\n    /// node is followed by its last child or, if it has none, its\n    /// previous sibling or the previous sibling of the first parent\n    /// node that has one.\n    prev(enter = true) { return this.move(-1, enter); }\n    /// Move the cursor to the innermost node that covers `pos`. If\n    /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n    /// it will enter nodes that start at `pos`.\n    moveTo(pos, side = 0) {\n        // Move up to a node that actually holds the position, if possible\n        while (this.from == this.to ||\n            (side < 1 ? this.from >= pos : this.from > pos) ||\n            (side > -1 ? this.to <= pos : this.to < pos))\n            if (!this.parent())\n                break;\n        // Then scan down into child nodes as far as possible\n        while (this.enterChild(1, pos, side)) { }\n        return this;\n    }\n    /// Get a [syntax node](#common.SyntaxNode) at the cursor's current\n    /// position.\n    get node() {\n        if (!this.buffer)\n            return this._tree;\n        let cache = this.bufferNode, result = null, depth = 0;\n        if (cache && cache.context == this.buffer) {\n            scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\n                for (let c = cache; c; c = c._parent)\n                    if (c.index == index) {\n                        if (index == this.index)\n                            return c;\n                        result = c;\n                        depth = d + 1;\n                        break scan;\n                    }\n                index = this.stack[--d];\n            }\n        }\n        for (let i = depth; i < this.stack.length; i++)\n            result = new BufferNode(this.buffer, result, this.stack[i]);\n        return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n    }\n    /// Get the [tree](#common.Tree) that represents the current node, if\n    /// any. Will return null when the node is in a [tree\n    /// buffer](#common.TreeBuffer).\n    get tree() {\n        return this.buffer ? null : this._tree.node;\n    }\n}\nfunction hasChild(tree) {\n    return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));\n}\nfunction buildTree(data) {\n    var _a;\n    let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;\n    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n    let types = nodeSet.types;\n    let contextHash = 0, lookAhead = 0;\n    function takeNode(parentStart, minPos, children, positions, inRepeat) {\n        let { id, start, end, size } = cursor;\n        let lookAheadAtStart = lookAhead;\n        while (size < 0) {\n            cursor.next();\n            if (size == -1 /* Reuse */) {\n                let node = reused[id];\n                children.push(node);\n                positions.push(start - parentStart);\n                return;\n            }\n            else if (size == -3 /* ContextChange */) { // Context change\n                contextHash = id;\n                return;\n            }\n            else if (size == -4 /* LookAhead */) {\n                lookAhead = id;\n                return;\n            }\n            else {\n                throw new RangeError(`Unrecognized record size: ${size}`);\n            }\n        }\n        let type = types[id], node, buffer;\n        let startPos = start - parentStart;\n        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n            // Small enough for a buffer, and no reused nodes inside\n            let data = new Uint16Array(buffer.size - buffer.skip);\n            let endPos = cursor.pos - buffer.size, index = data.length;\n            while (cursor.pos > endPos)\n                index = copyToBuffer(buffer.start, data, index);\n            node = new TreeBuffer(data, end - buffer.start, nodeSet);\n            startPos = buffer.start - parentStart;\n        }\n        else { // Make it a node\n            let endPos = cursor.pos - size;\n            cursor.next();\n            let localChildren = [], localPositions = [];\n            let localInRepeat = id >= minRepeatType ? id : -1;\n            let lastGroup = 0, lastEnd = end;\n            while (cursor.pos > endPos) {\n                if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\n                    if (cursor.end <= lastEnd - maxBufferLength) {\n                        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\n                        lastGroup = localChildren.length;\n                        lastEnd = cursor.end;\n                    }\n                    cursor.next();\n                }\n                else {\n                    takeNode(start, endPos, localChildren, localPositions, localInRepeat);\n                }\n            }\n            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)\n                makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\n            localChildren.reverse();\n            localPositions.reverse();\n            if (localInRepeat > -1 && lastGroup > 0) {\n                let make = makeBalanced(type);\n                node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\n            }\n            else {\n                node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\n            }\n        }\n        children.push(node);\n        positions.push(startPos);\n    }\n    function makeBalanced(type) {\n        return (children, positions, length) => {\n            let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;\n            if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\n                if (!lastI && last.type == type && last.length == length)\n                    return last;\n                if (lookAheadProp = last.prop(NodeProp.lookAhead))\n                    lookAhead = positions[lastI] + last.length + lookAheadProp;\n            }\n            return makeTree(type, children, positions, length, lookAhead);\n        };\n    }\n    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\n        let localChildren = [], localPositions = [];\n        while (children.length > i) {\n            localChildren.push(children.pop());\n            localPositions.push(positions.pop() + base - from);\n        }\n        children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\n        positions.push(from - base);\n    }\n    function makeTree(type, children, positions, length, lookAhead = 0, props) {\n        if (contextHash) {\n            let pair = [NodeProp.contextHash, contextHash];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        if (lookAhead > 25) {\n            let pair = [NodeProp.lookAhead, lookAhead];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        return new Tree(type, children, positions, length, props);\n    }\n    function findBufferSize(maxSize, inRepeat) {\n        // Scan through the buffer to find previous siblings that fit\n        // together in a TreeBuffer, and don't contain any reused nodes\n        // (which can't be stored in a buffer).\n        // If `inRepeat` is > -1, ignore node boundaries of that type for\n        // nesting, but make sure the end falls either at the start\n        // (`maxSize`) or before such a node.\n        let fork = cursor.fork();\n        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;\n        let result = { size: 0, start: 0, skip: 0 };\n        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\n            let nodeSize = fork.size;\n            // Pretend nested repeat nodes of the same type don't exist\n            if (fork.id == inRepeat && nodeSize >= 0) {\n                // Except that we store the current state as a valid return\n                // value.\n                result.size = size;\n                result.start = start;\n                result.skip = skip;\n                skip += 4;\n                size += 4;\n                fork.next();\n                continue;\n            }\n            let startPos = fork.pos - nodeSize;\n            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)\n                break;\n            let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n            let nodeStart = fork.start;\n            fork.next();\n            while (fork.pos > startPos) {\n                if (fork.size < 0) {\n                    if (fork.size == -3 /* ContextChange */)\n                        localSkipped += 4;\n                    else\n                        break scan;\n                }\n                else if (fork.id >= minRepeatType) {\n                    localSkipped += 4;\n                }\n                fork.next();\n            }\n            start = nodeStart;\n            size += nodeSize;\n            skip += localSkipped;\n        }\n        if (inRepeat < 0 || size == maxSize) {\n            result.size = size;\n            result.start = start;\n            result.skip = skip;\n        }\n        return result.size > 4 ? result : undefined;\n    }\n    function copyToBuffer(bufferStart, buffer, index) {\n        let { id, start, end, size } = cursor;\n        cursor.next();\n        if (size >= 0 && id < minRepeatType) {\n            let startIndex = index;\n            if (size > 4) {\n                let endPos = cursor.pos - (size - 4);\n                while (cursor.pos > endPos)\n                    index = copyToBuffer(bufferStart, buffer, index);\n            }\n            buffer[--index] = startIndex;\n            buffer[--index] = end - bufferStart;\n            buffer[--index] = start - bufferStart;\n            buffer[--index] = id;\n        }\n        else if (size == -3 /* ContextChange */) {\n            contextHash = id;\n        }\n        else if (size == -4 /* LookAhead */) {\n            lookAhead = id;\n        }\n        return index;\n    }\n    let children = [], positions = [];\n    while (cursor.pos > 0)\n        takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);\n    let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);\n    return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\n}\nconst nodeSizeCache = new WeakMap;\nfunction nodeSize(balanceType, node) {\n    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)\n        return 1;\n    let size = nodeSizeCache.get(node);\n    if (size == null) {\n        size = 1;\n        for (let child of node.children) {\n            if (child.type != balanceType || !(child instanceof Tree)) {\n                size = 1;\n                break;\n            }\n            size += nodeSize(balanceType, child);\n        }\n        nodeSizeCache.set(node, size);\n    }\n    return size;\n}\nfunction balanceRange(\n// The type the balanced tree's inner nodes.\nbalanceType, \n// The direct children and their positions\nchildren, positions, \n// The index range in children/positions to use\nfrom, to, \n// The start position of the nodes, relative to their parent.\nstart, \n// Length of the outer node\nlength, \n// Function to build the top node of the balanced tree\nmkTop, \n// Function to build internal nodes for the balanced tree\nmkTree) {\n    let total = 0;\n    for (let i = from; i < to; i++)\n        total += nodeSize(balanceType, children[i]);\n    let maxChild = Math.ceil((total * 1.5) / 8 /* BranchFactor */);\n    let localChildren = [], localPositions = [];\n    function divide(children, positions, from, to, offset) {\n        for (let i = from; i < to;) {\n            let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);\n            i++;\n            for (; i < to; i++) {\n                let nextSize = nodeSize(balanceType, children[i]);\n                if (groupSize + nextSize >= maxChild)\n                    break;\n                groupSize += nextSize;\n            }\n            if (i == groupFrom + 1) {\n                if (groupSize > maxChild) {\n                    let only = children[groupFrom]; // Only trees can have a size > 1\n                    divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\n                    continue;\n                }\n                localChildren.push(children[groupFrom]);\n            }\n            else {\n                let length = positions[i - 1] + children[i - 1].length - groupStart;\n                localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\n            }\n            localPositions.push(groupStart + offset - start);\n        }\n    }\n    divide(children, positions, from, to, 0);\n    return (mkTop || mkTree)(localChildren, localPositions, length);\n}\n\n/// Tree fragments are used during [incremental\n/// parsing](#common.Parser.startParse) to track parts of old trees\n/// that can be reused in a new parse. An array of fragments is used\n/// to track regions of an old tree whose nodes might be reused in new\n/// parses. Use the static\n/// [`applyChanges`](#common.TreeFragment^applyChanges) method to\n/// update fragments for document changes.\nclass TreeFragment {\n    /// Construct a tree fragment.\n    constructor(\n    /// The start of the unchanged range pointed to by this fragment.\n    /// This refers to an offset in the _updated_ document (as opposed\n    /// to the original tree).\n    from, \n    /// The end of the unchanged range.\n    to, \n    /// The tree that this fragment is based on.\n    tree, \n    /// The offset between the fragment's tree and the document that\n    /// this fragment can be used against. Add this when going from\n    /// document to tree positions, subtract it to go from tree to\n    /// document positions.\n    offset, openStart = false, openEnd = false) {\n        this.from = from;\n        this.to = to;\n        this.tree = tree;\n        this.offset = offset;\n        this.open = (openStart ? 1 /* Start */ : 0) | (openEnd ? 2 /* End */ : 0);\n    }\n    /// Whether the start of the fragment represents the start of a\n    /// parse, or the end of a change. (In the second case, it may not\n    /// be safe to reuse some nodes at the start, depending on the\n    /// parsing algorithm.)\n    get openStart() { return (this.open & 1 /* Start */) > 0; }\n    /// Whether the end of the fragment represents the end of a\n    /// full-document parse, or the start of a change.\n    get openEnd() { return (this.open & 2 /* End */) > 0; }\n    /// Create a set of fragments from a freshly parsed tree, or update\n    /// an existing set of fragments by replacing the ones that overlap\n    /// with a tree with content from the new tree. When `partial` is\n    /// true, the parse is treated as incomplete, and the resulting\n    /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n    /// true.\n    static addTree(tree, fragments = [], partial = false) {\n        let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\n        for (let f of fragments)\n            if (f.to > tree.length)\n                result.push(f);\n        return result;\n    }\n    /// Apply a set of edits to an array of fragments, removing or\n    /// splitting fragments as necessary to remove edited ranges, and\n    /// adjusting offsets for fragments that moved.\n    static applyChanges(fragments, changes, minGap = 128) {\n        if (!changes.length)\n            return fragments;\n        let result = [];\n        let fI = 1, nextF = fragments.length ? fragments[0] : null;\n        for (let cI = 0, pos = 0, off = 0;; cI++) {\n            let nextC = cI < changes.length ? changes[cI] : null;\n            let nextPos = nextC ? nextC.fromA : 1e9;\n            if (nextPos - pos >= minGap)\n                while (nextF && nextF.from < nextPos) {\n                    let cut = nextF;\n                    if (pos >= cut.from || nextPos <= cut.to || off) {\n                        let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;\n                        cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\n                    }\n                    if (cut)\n                        result.push(cut);\n                    if (nextF.to > nextPos)\n                        break;\n                    nextF = fI < fragments.length ? fragments[fI++] : null;\n                }\n            if (!nextC)\n                break;\n            pos = nextC.toA;\n            off = nextC.toA - nextC.toB;\n        }\n        return result;\n    }\n}\n/// A superclass that parsers should extend.\nclass Parser {\n    /// Start a parse, returning a [partial parse](#common.PartialParse)\n    /// object. [`fragments`](#common.TreeFragment) can be passed in to\n    /// make the parse incremental.\n    ///\n    /// By default, the entire input is parsed. You can pass `ranges`,\n    /// which should be a sorted array of non-empty, non-overlapping\n    /// ranges, to parse only those ranges. The tree returned in that\n    /// case will start at `ranges[0].from`.\n    startParse(input, fragments, ranges) {\n        if (typeof input == \"string\")\n            input = new StringInput(input);\n        ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];\n        return this.createParse(input, fragments || [], ranges);\n    }\n    /// Run a full parse, returning the resulting tree.\n    parse(input, fragments, ranges) {\n        let parse = this.startParse(input, fragments, ranges);\n        for (;;) {\n            let done = parse.advance();\n            if (done)\n                return done;\n        }\n    }\n}\nclass StringInput {\n    constructor(string) {\n        this.string = string;\n    }\n    get length() { return this.string.length; }\n    chunk(from) { return this.string.slice(from); }\n    get lineChunks() { return false; }\n    read(from, to) { return this.string.slice(from, to); }\n}\n\n/// Create a parse wrapper that, after the inner parse completes,\n/// scans its tree for mixed language regions with the `nest`\n/// function, runs the resulting [inner parses](#common.NestedParse),\n/// and then [mounts](#common.NodeProp^mounted) their results onto the\n/// tree.\n///\n/// The nesting function is passed a cursor to provide context for a\n/// node, but _should not_ move that cursor, only inspect its\n/// properties and optionally access its\n/// [node object](#common.TreeCursor.node).\nfunction parseMixed(nest) {\n    return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);\n}\nclass InnerParse {\n    constructor(parser, parse, overlay, target, ranges) {\n        this.parser = parser;\n        this.parse = parse;\n        this.overlay = overlay;\n        this.target = target;\n        this.ranges = ranges;\n    }\n}\nclass ActiveOverlay {\n    constructor(parser, predicate, mounts, index, start, target, prev) {\n        this.parser = parser;\n        this.predicate = predicate;\n        this.mounts = mounts;\n        this.index = index;\n        this.start = start;\n        this.target = target;\n        this.prev = prev;\n        this.depth = 0;\n        this.ranges = [];\n    }\n}\nconst stoppedInner = new NodeProp({ perNode: true });\nclass MixedParse {\n    constructor(base, nest, input, fragments, ranges) {\n        this.nest = nest;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.inner = [];\n        this.innerDone = 0;\n        this.baseTree = null;\n        this.stoppedAt = null;\n        this.baseParse = base;\n    }\n    advance() {\n        if (this.baseParse) {\n            let done = this.baseParse.advance();\n            if (!done)\n                return null;\n            this.baseParse = null;\n            this.baseTree = done;\n            this.startInner();\n            if (this.stoppedAt != null)\n                for (let inner of this.inner)\n                    inner.parse.stopAt(this.stoppedAt);\n        }\n        if (this.innerDone == this.inner.length) {\n            let result = this.baseTree;\n            if (this.stoppedAt != null)\n                result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\n            return result;\n        }\n        let inner = this.inner[this.innerDone], done = inner.parse.advance();\n        if (done) {\n            this.innerDone++;\n            // This is a somewhat dodgy but super helpful hack where we\n            // patch up nodes created by the inner parse (and thus\n            // presumably not aliased anywhere else) to hold the information\n            // about the inner parse.\n            let props = Object.assign(Object.create(null), inner.target.props);\n            props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);\n            inner.target.props = props;\n        }\n        return null;\n    }\n    get parsedPos() {\n        if (this.baseParse)\n            return 0;\n        let pos = this.input.length;\n        for (let i = this.innerDone; i < this.inner.length; i++) {\n            if (this.inner[i].ranges[0].from < pos)\n                pos = Math.min(pos, this.inner[i].parse.parsedPos);\n        }\n        return pos;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n        if (this.baseParse)\n            this.baseParse.stopAt(pos);\n        else\n            for (let i = this.innerDone; i < this.inner.length; i++)\n                this.inner[i].parse.stopAt(pos);\n    }\n    startInner() {\n        let fragmentCursor = new FragmentCursor(this.fragments);\n        let overlay = null;\n        let covered = null;\n        let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), 1 /* Full */);\n        scan: for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {\n            let enter = true, range;\n            if (fragmentCursor.hasNode(cursor)) {\n                if (overlay) {\n                    let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\n                    if (match)\n                        for (let r of match.mount.overlay) {\n                            let from = r.from + match.pos, to = r.to + match.pos;\n                            if (from >= cursor.from && to <= cursor.to)\n                                overlay.ranges.push({ from, to });\n                        }\n                }\n                enter = false;\n            }\n            else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\n                enter = isCovered != 2 /* Full */;\n            }\n            else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {\n                if (!cursor.tree)\n                    materialize(cursor);\n                let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\n                if (typeof nest.overlay == \"function\") {\n                    overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\n                }\n                else {\n                    let ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);\n                    if (ranges.length)\n                        this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges));\n                    if (!nest.overlay)\n                        enter = false;\n                    else if (ranges.length)\n                        covered = { ranges, depth: 0, prev: covered };\n                }\n            }\n            else if (overlay && (range = overlay.predicate(cursor))) {\n                if (range === true)\n                    range = new Range(cursor.from, cursor.to);\n                if (range.from < range.to)\n                    overlay.ranges.push(range);\n            }\n            if (enter && cursor.firstChild()) {\n                if (overlay)\n                    overlay.depth++;\n                if (covered)\n                    covered.depth++;\n            }\n            else {\n                for (;;) {\n                    if (cursor.nextSibling())\n                        break;\n                    if (!cursor.parent())\n                        break scan;\n                    if (overlay && !--overlay.depth) {\n                        let ranges = punchRanges(this.ranges, overlay.ranges);\n                        if (ranges.length)\n                            this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges));\n                        overlay = overlay.prev;\n                    }\n                    if (covered && !--covered.depth)\n                        covered = covered.prev;\n                }\n            }\n        }\n    }\n}\nfunction checkCover(covered, from, to) {\n    for (let range of covered) {\n        if (range.from >= to)\n            break;\n        if (range.to > from)\n            return range.from <= from && range.to >= to ? 2 /* Full */ : 1 /* Partial */;\n    }\n    return 0 /* None */;\n}\n// Take a piece of buffer and convert it into a stand-alone\n// TreeBuffer.\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\n    if (startI < endI) {\n        let from = buf.buffer[startI + 1], to = buf.buffer[endI - 2];\n        nodes.push(buf.slice(startI, endI, from, to));\n        positions.push(from - off);\n    }\n}\n// This function takes a node that's in a buffer, and converts it, and\n// its parent buffer nodes, into a Tree. This is again acting on the\n// assumption that the trees and buffers have been constructed by the\n// parse that was ran via the mix parser, and thus aren't shared with\n// any other code, making violations of the immutability safe.\nfunction materialize(cursor) {\n    let { node } = cursor, depth = 0;\n    // Scan up to the nearest tree\n    do {\n        cursor.parent();\n        depth++;\n    } while (!cursor.tree);\n    // Find the index of the buffer in that tree\n    let i = 0, base = cursor.tree, off = 0;\n    for (;; i++) {\n        off = base.positions[i] + cursor.from;\n        if (off <= node.from && off + base.children[i].length >= node.to)\n            break;\n    }\n    let buf = base.children[i], b = buf.buffer;\n    // Split a level in the buffer, putting the nodes before and after\n    // the child that contains `node` into new buffers.\n    function split(startI, endI, type, innerOffset, length) {\n        let i = startI;\n        while (b[i + 2] + off <= node.from)\n            i = b[i + 3];\n        let children = [], positions = [];\n        sliceBuf(buf, startI, i, children, positions, innerOffset);\n        let from = b[i + 1], to = b[i + 2];\n        let isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;\n        children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));\n        positions.push(from - innerOffset);\n        sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);\n        return new Tree(type, children, positions, length);\n    }\n    base.children[i] = split(0, b.length, NodeType.none, 0, buf.length);\n    // Move the cursor back to the target node\n    for (let d = 0; d <= depth; d++)\n        cursor.childAfter(node.from);\n}\nclass StructureCursor {\n    constructor(root, offset) {\n        this.offset = offset;\n        this.done = false;\n        this.cursor = root.fullCursor();\n    }\n    // Move to the first node (in pre-order) that starts at or after `pos`.\n    moveTo(pos) {\n        let { cursor } = this, p = pos - this.offset;\n        while (!this.done && cursor.from < p) {\n            if (cursor.to >= pos && cursor.enter(p, 1, false, false)) ;\n            else if (!cursor.next(false))\n                this.done = true;\n        }\n    }\n    hasNode(cursor) {\n        this.moveTo(cursor.from);\n        if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\n            for (let tree = this.cursor.tree;;) {\n                if (tree == cursor.tree)\n                    return true;\n                if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)\n                    tree = tree.children[0];\n                else\n                    break;\n            }\n        }\n        return false;\n    }\n}\nclass FragmentCursor {\n    constructor(fragments) {\n        var _a;\n        this.fragments = fragments;\n        this.curTo = 0;\n        this.fragI = 0;\n        if (fragments.length) {\n            let first = this.curFrag = fragments[0];\n            this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\n            this.inner = new StructureCursor(first.tree, -first.offset);\n        }\n        else {\n            this.curFrag = this.inner = null;\n        }\n    }\n    hasNode(node) {\n        while (this.curFrag && node.from >= this.curTo)\n            this.nextFrag();\n        return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\n    }\n    nextFrag() {\n        var _a;\n        this.fragI++;\n        if (this.fragI == this.fragments.length) {\n            this.curFrag = this.inner = null;\n        }\n        else {\n            let frag = this.curFrag = this.fragments[this.fragI];\n            this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\n            this.inner = new StructureCursor(frag.tree, -frag.offset);\n        }\n    }\n    findMounts(pos, parser) {\n        var _a;\n        let result = [];\n        if (this.inner) {\n            this.inner.cursor.moveTo(pos, 1);\n            for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {\n                let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);\n                if (mount && mount.parser == parser) {\n                    for (let i = this.fragI; i < this.fragments.length; i++) {\n                        let frag = this.fragments[i];\n                        if (frag.from >= pos.to)\n                            break;\n                        if (frag.tree == this.curFrag.tree)\n                            result.push({\n                                frag,\n                                pos: pos.from - frag.offset,\n                                mount\n                            });\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\nfunction punchRanges(outer, ranges) {\n    let copy = null, current = ranges;\n    for (let i = 1, j = 0; i < outer.length; i++) {\n        let gapFrom = outer[i - 1].to, gapTo = outer[i].from;\n        for (; j < current.length; j++) {\n            let r = current[j];\n            if (r.from >= gapTo)\n                break;\n            if (r.to <= gapFrom)\n                continue;\n            if (!copy)\n                current = copy = ranges.slice();\n            if (r.from < gapFrom) {\n                copy[j] = new Range(r.from, gapFrom);\n                if (r.to > gapTo)\n                    copy.splice(j + 1, 0, new Range(gapTo, r.to));\n            }\n            else if (r.to > gapTo) {\n                copy[j--] = new Range(gapTo, r.to);\n            }\n            else {\n                copy.splice(j--, 1);\n            }\n        }\n    }\n    return current;\n}\nfunction findCoverChanges(a, b, from, to) {\n    let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;\n    let result = [];\n    for (;;) {\n        let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\n        let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\n        if (inA != inB) {\n            let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);\n            if (start < end)\n                result.push(new Range(start, end));\n        }\n        pos = Math.min(nextA, nextB);\n        if (pos == 1e9)\n            break;\n        if (nextA == pos) {\n            if (!inA)\n                inA = true;\n            else {\n                inA = false;\n                iA++;\n            }\n        }\n        if (nextB == pos) {\n            if (!inB)\n                inB = true;\n            else {\n                inB = false;\n                iB++;\n            }\n        }\n    }\n    return result;\n}\n// Given a number of fragments for the outer tree, and a set of ranges\n// to parse, find fragments for inner trees mounted around those\n// ranges, if any.\nfunction enterFragments(mounts, ranges) {\n    let result = [];\n    for (let { pos, mount, frag } of mounts) {\n        let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;\n        let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);\n        if (mount.overlay) {\n            let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));\n            let changes = findCoverChanges(ranges, overlay, from, to);\n            for (let i = 0, pos = from;; i++) {\n                let last = i == changes.length, end = last ? to : changes[i].from;\n                if (end > pos)\n                    result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos, frag.to <= end));\n                if (last)\n                    break;\n                pos = changes[i].to;\n            }\n        }\n        else {\n            result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos, frag.to <= endPos));\n        }\n    }\n    return result;\n}\n\nexports.DefaultBufferLength = DefaultBufferLength;\nexports.MountedTree = MountedTree;\nexports.NodeProp = NodeProp;\nexports.NodeSet = NodeSet;\nexports.NodeType = NodeType;\nexports.Parser = Parser;\nexports.Tree = Tree;\nexports.TreeBuffer = TreeBuffer;\nexports.TreeCursor = TreeCursor;\nexports.TreeFragment = TreeFragment;\nexports.parseMixed = parseMixed;\n\n};"],
"names":["shadow$provide","global","require","module","exports","checkSide","side","pos","from","to","enterUnfinishedNodesBefore","node","scan","childBefore","last","lastChild","type","isError","prevSibling","resolveNode","overlays","_a","parent","TreeNode","index","enter","inner","getChildren","before","after","cur","cursor","result","firstChild","is","nextSibling","push","hasChild","tree","children","some","ch","TreeBuffer","isAnonymous","buildTree","data","takeNode","parentStart","minPos","positions","inRepeat","id","start","end","size","lookAheadAtStart","lookAhead","next","reused","contextHash","RangeError","types","startPos","fork","skip","minStart","maxBufferLength","maxSize","nodeSize","localSkipped","minRepeatType","nodeStart","undefined","Uint16Array","buffer","endPos","length","copyToBuffer","nodeSet","localChildren","localPositions","localInRepeat","lastGroup","lastEnd","makeRepeatLeaf","reverse","make","makeBalanced","balanceRange","makeTree","lastI","lookAheadProp","Tree","prop","NodeProp","base","i","pop","props","pair","concat","bufferStart","startIndex","DefaultBufferLength","Array","isArray","FlatBufferCursor","topID","balanceType","nodeSizeCache","get","child","set","mkTop","mkTree","divide","offset","groupFrom","groupStart","groupSize","nextSize","maxChild","only","total","Math","ceil","checkCover","covered","range","sliceBuf","buf","startI","endI","nodes","off","slice","materialize","split","innerOffset","b","toTree","depth","NodeType","none","d","childAfter","punchRanges","outer","ranges","copy","current","j","gapFrom","gapTo","r","Range","splice","findCoverChanges","a","iA","iB","inA","inB","nextA","nextB","max","min","enterFragments","mounts","mount","frag","overlay","map","changes","TreeFragment","Object","defineProperty","value","nextPropID","constructor","config","perNode","deserialize","Error","add","match","closedBy","str","openedBy","group","mounted","MountedTree","parser","noProps","create","name","flags","define","spec","top","skipped","error","src","indexOf","direct","groups","found","NodeSet","extend","newTypes","newProps","source","assign","CachedNode","WeakMap","CachedInnerNode","toString","test","JSON","stringify","scope","topNode","TreeCursor","moveTo","_tree","fullCursor","resolve","resolveInner","iterate","leave","c","mustLeave","balance","propValues","build","empty","childString","join","endIndex","findChild","dir","pick","_from","_parent","nextChild","mode","e","BufferNode","BufferContext","buffers","rPos","nextSignificantParent","val","getChild","context","externalSibling","stack","bufferNode","yieldNode","n","unshift","yieldBuf","yield","enterChild","sibling","atLastNode","move","prev","cache","openStart","openEnd","open","addTree","fragments","partial","f","applyChanges","minGap","fI","nextF","cI","nextC","nextPos","fromA","cut","fFrom","fTo","toA","toB","Parser","startParse","input","StringInput","createParse","parse","done","advance","string","chunk","read","InnerParse","target","ActiveOverlay","predicate","stoppedInner","MixedParse","nest","innerDone","stoppedAt","baseTree","baseParse","startInner","stopAt","parsedPos","fragmentCursor","FragmentCursor","isCovered","hasNode","find","m","oldMounts","findMounts","StructureCursor","root","p","fragI","curTo","first","curFrag","nextFrag","parseMixed"]
}
