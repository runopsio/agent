shadow$provide.module$node_modules$highlight_DOT_js$lib$languages$elixir=function(global,require,module,exports){function concat(...args){return args.map(x=>{x=x?"string"===typeof x?x:x.source:null;return x}).join("")}module.exports=function(hljs){const KWS={$pattern:"[a-zA-Z_][a-zA-Z0-9_.]*(!|\\?)?",keyword:"after alias and case catch cond defstruct do else end fn for if import in not or quote raise receive require reraise rescue try unless unquote unquote_splicing use when with|0".split(" "),literal:["false",
"nil","true"]},SUBST={className:"subst",begin:/#\{/,end:/\}/,keywords:KWS},BACKSLASH_ESCAPE={match:/\\[\s\S]/,scope:"char.escape",relevance:0};var SIGIL_DELIMITER_MODES=[{begin:/"/,end:/"/},{begin:/'/,end:/'/},{begin:/\//,end:/\//},{begin:/\|/,end:/\|/},{begin:/\(/,end:/\)/},{begin:/\[/,end:/\]/},{begin:/\{/,end:/\}/},{begin:/</,end:/>/}];const escapeSigilEnd=end=>({scope:"char.escape",begin:concat(/\\/,end),relevance:0});var LOWERCASE_SIGIL={className:"string",begin:"~[a-z](?\x3d[/|([{\x3c\"'])",
contains:SIGIL_DELIMITER_MODES.map(x=>hljs.inherit(x,{contains:[escapeSigilEnd(x.end),BACKSLASH_ESCAPE,SUBST]}))};const UPCASE_SIGIL={className:"string",begin:"~[A-Z](?\x3d[/|([{\x3c\"'])",contains:SIGIL_DELIMITER_MODES.map(x=>hljs.inherit(x,{contains:[escapeSigilEnd(x.end)]}))};SIGIL_DELIMITER_MODES={className:"regex",variants:[{begin:"~r(?\x3d[/|([{\x3c\"'])",contains:SIGIL_DELIMITER_MODES.map(x=>hljs.inherit(x,{end:concat(x.end,/[uismxfU]{0,7}/),contains:[escapeSigilEnd(x.end),BACKSLASH_ESCAPE,
SUBST]}))},{begin:"~R(?\x3d[/|([{\x3c\"'])",contains:SIGIL_DELIMITER_MODES.map(x=>hljs.inherit(x,{end:concat(x.end,/[uismxfU]{0,7}/),contains:[escapeSigilEnd(x.end)]}))}]};const STRING={className:"string",contains:[hljs.BACKSLASH_ESCAPE,SUBST],variants:[{begin:/"""/,end:/"""/},{begin:/'''/,end:/'''/},{begin:/~S"""/,end:/"""/,contains:[]},{begin:/~S"/,end:/"/,contains:[]},{begin:/~S'''/,end:/'''/,contains:[]},{begin:/~S'/,end:/'/,contains:[]},{begin:/'/,end:/'/},{begin:/"/,end:/"/}]},FUNCTION={className:"function",
beginKeywords:"def defp defmacro defmacrop",end:/\B\b/,contains:[hljs.inherit(hljs.TITLE_MODE,{begin:"[a-zA-Z_][a-zA-Z0-9_.]*(!|\\?)?",endsParent:!0})]},CLASS=hljs.inherit(FUNCTION,{className:"class",beginKeywords:"defimpl defmodule defprotocol defrecord",end:/\bdo\b|$|;/});LOWERCASE_SIGIL=[STRING,SIGIL_DELIMITER_MODES,UPCASE_SIGIL,LOWERCASE_SIGIL,hljs.HASH_COMMENT_MODE,CLASS,FUNCTION,{begin:"::"},{className:"symbol",begin:":(?![\\s:])",contains:[STRING,{begin:"[a-zA-Z_]\\w*[!?\x3d]?|[-+~]@|\x3c\x3c|\x3e\x3e|\x3d~|\x3d\x3d\x3d?|\x3c\x3d\x3e|[\x3c\x3e]\x3d?|\\*\\*|[-/+%^\x26*~`|]|\\[\\]\x3d?"}],
relevance:0},{className:"symbol",begin:"[a-zA-Z_][a-zA-Z0-9_.]*(!|\\?)?:(?!:)",relevance:0},{className:"number",begin:"(\\b0o[0-7_]+)|(\\b0b[01_]+)|(\\b0x[0-9a-fA-F_]+)|(-?\\b[0-9][0-9_]*(\\.[0-9_]+([eE][-+]?[0-9]+)?)?)",relevance:0},{className:"variable",begin:"(\\$\\W)|((\\$|@@?)(\\w+))"},{begin:"-\x3e"}];SUBST.contains=LOWERCASE_SIGIL;return{name:"Elixir",aliases:["ex","exs"],keywords:KWS,contains:LOWERCASE_SIGIL}}}
//# sourceMappingURL=module$node_modules$highlight_DOT_js$lib$languages$elixir.js.map
