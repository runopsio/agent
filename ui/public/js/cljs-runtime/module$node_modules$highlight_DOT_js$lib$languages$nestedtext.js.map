{
"version":3,
"file":"module$node_modules$highlight_DOT_js$lib$languages$nestedtext.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,6DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAuF1HD,MAAOC,CAAAA,OAAP,CA9EAC,QAAmB,CAACC,IAAD,CAAO,CA8DxB,MAAO,CACLC,KAAM,aADD,CAELC,QAAS,CAAE,IAAF,CAFJ,CAGLC,SAAU,CACRH,IAAKI,CAAAA,OAAL,CAAaJ,IAAKK,CAAAA,iBAAlB,CAAqC,CACnCC,MAAO,WAD4B,CAEnCC,aAAc,CAAA,CAFqB,CAArC,CADQ,CA1BMC,CAChBC,SAAU,CACR,CACEC,MAAO,CACL,MADK,CAEL,GAFK,CAGL,KAHK,CAIL,KAJK,CADT,CADQ,CASR,CACEA,MAAO,CACL,MADK,CAEL,IAFK,CADT,CATQ,CADMF,CAiBhBG,UAAW,CACT,EAAG,QADM,CAET,EAAG,QAFM,CAjBKH,CA0BN,CAtCGI,CACbF,MAAO,CACL,MADK,CAEL,GAFK,CAGL,KAHK,CAIL,KAJK,CADME,CAObD,UAAW,CACT,EAAG,aADM,CAET,EAAG,QAFM,CAPEC,CAsCH,CAhEGC,CACbH,MAAO,CACL,YADK,CAEL,OAFK,CAGL,MAHK,CAIL,GAJK,CADMG,CAObF,UAAW,CACT,EAAG,WADM;AAET,EAAG,aAFM,CAPEE,CAgEH,CApDYC,CACtBJ,MAAO,CACL,YADK,CAEL,YAFK,CAGL,OAHK,CAIL,KAJK,CAKL,KALK,CADeI,CAQtBH,UAAW,CACT,EAAG,WADM,CAET,EAAG,aAFM,CAGT,EAAG,QAHM,CARWG,CAoDZ,CAHL,CA9DiB,CATgG;",
"sources":["node_modules/highlight_DOT_js/lib/languages/nestedtext.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$nestedtext\"] = function(global,require,module,exports) {\n/*\nLanguage: NestedText\nDescription: NestedText is a file format for holding data that is to be entered, edited, or viewed by people.\nWebsite: https://nestedtext.org/\nCategory: config\n*/\n\n/** @type LanguageFn */\nfunction nestedtext(hljs) {\n  const NESTED = {\n    match: [\n      /^\\s*(?=\\S)/, // have to look forward here to avoid polynomial backtracking\n      /[^:]+/,\n      /:\\s*/,\n      /$/\n    ],\n    className: {\n      2: \"attribute\",\n      3: \"punctuation\"\n    }\n  };\n  const DICTIONARY_ITEM = {\n    match: [\n      /^\\s*(?=\\S)/, // have to look forward here to avoid polynomial backtracking\n      /[^:]*[^: ]/,\n      /[ ]*:/,\n      /[ ]/,\n      /.*$/\n    ],\n    className: {\n      2: \"attribute\",\n      3: \"punctuation\",\n      5: \"string\"\n    }\n  };\n  const STRING = {\n    match: [\n      /^\\s*/,\n      />/,\n      /[ ]/,\n      /.*$/\n    ],\n    className: {\n      2: \"punctuation\",\n      4: \"string\"\n    }\n  };\n  const LIST_ITEM = {\n    variants: [\n      {\n        match: [\n          /^\\s*/,\n          /-/,\n          /[ ]/,\n          /.*$/\n        ]\n      },\n      {\n        match: [\n          /^\\s*/,\n          /-$/\n        ]\n      }\n    ],\n    className: {\n      2: \"bullet\",\n      4: \"string\"\n    }\n  };\n\n  return {\n    name: 'Nested Text',\n    aliases: [ 'nt' ],\n    contains: [\n      hljs.inherit(hljs.HASH_COMMENT_MODE, {\n        begin: /^\\s*(?=#)/,\n        excludeBegin: true\n      }),\n      LIST_ITEM,\n      STRING,\n      NESTED,\n      DICTIONARY_ITEM\n    ]\n  };\n}\n\nmodule.exports = nestedtext;\n\n};"],
"names":["shadow$provide","global","require","module","exports","nestedtext","hljs","name","aliases","contains","inherit","HASH_COMMENT_MODE","begin","excludeBegin","LIST_ITEM","variants","match","className","STRING","NESTED","DICTIONARY_ITEM"]
}
