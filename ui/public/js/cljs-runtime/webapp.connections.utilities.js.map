{"version":3,"sources":["webapp/connections/utilities.cljs"],"mappings":"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","names":["webapp.connections.utilities/get-config-keys","key","cljs.core.get","webapp.connections.constants/connection-configs-required","webapp.connections.utilities/config->json-stringify","configs","cljs.core.filter","p__30821","map__30822","cljs.core/--destructure-map","value","clojure.string/blank?","cljs.core.map","p__30819","map__30820","cljs.core.reduce","cljs.core/into","cljs.core/clj->js","js/JSON","webapp.connections.utilities/agent-url","reagent.core.atom","webapp.connections.utilities/empty-config?","cljs.core/empty?","webapp.connections.utilities/empty-agent-tag?","agent-tag","webapp.connections.utilities/empty-agent-token?","agent-token","webapp.connections.utilities/agent-token->script","webapp.connections.utilities/format-configs->exports","clojure.string.join","p1__30824#","cljs.core.mapv","js/webapp","js/webapp.connections","js/webapp.connections.utilities","js/webapp.connections.utilities.script-agent","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","fexpr__30825","cljs.core/MultiFn","cljs.core.symbol","webapp.connections.utilities/script-agent","cljs.core/identity","_","secret-path","agent-tag->text","export-config->text","p1__30826#","env->string-helm","p1__30827#","webapp.http.request/request","res","parse-res","cljs.core.js__GT_clj","cljs.core/reset!","cljs.core/second","cljs.core/deref","env-string-docker-local","p1__30834#"],"sourcesContent":["(ns webapp.connections.utilities\n  (:require [clojure.string :as s]\n            [reagent.core :as r]\n            [webapp.connections.constants :as constants]\n            [webapp.http.request :as request]))\n\n(defn get-config-keys\n  [key]\n  (get constants/connection-configs-required key))\n\n(defn config->json-stringify\n  [configs]\n  (->> configs\n       (filter (fn [{:keys [key value]}]\n                 (not (or (s/blank? key) (s/blank? value)))))\n       (map (fn [{:keys [key value]}] {key value}))\n       (reduce into {})\n       (clj->js)\n       (.stringify js/JSON)))\n\n(def agent-url (r/atom \"\"))\n(defn- empty-config? [configs] (empty? configs))\n(defn- empty-agent-tag? [agent-tag] (s/blank? agent-tag))\n(defn- empty-agent-token? [agent-token] (nil? agent-token))\n(defn- agent-token->script [agent-token]\n  (if (empty-agent-token? agent-token)\n    \"export AGENT_TOKEN=$(runops agents create-token -f)\\n\"\n    (str \"export AGENT_TOKEN=\" agent-token \"\\n\")))\n(defn- format-configs->exports [configs]\n  (when (not (empty-config? configs))\n    (str \"# Connection's configurations. \\n\"\n         (s/join (mapv #(str \"export \" (:key %) \"= \\n\") configs))\n         \"\\n\")))\n\n(defmulti script-agent identity)\n(defmethod script-agent :kubernetes-bash\n  [_ configs secret-path agent-tag agent-token]\n  (let [agent-tag->text (if (empty-agent-tag? agent-tag)\n                          \"\"\n                          (str \"export AGENT_TAG=\" agent-tag \"\\n\"))\n\n        export-config->text (if (empty-config? configs)\n                              \"\"\n                              (str \"export \" secret-path \"=$(cat - <<EOF\\n\"\n                                   \"{\\n\"\n                                   (s/join (mapv #(str \"  \\\"\" (:key %) \"\\\": $\" (:key %) \"\\n\") configs))\n                                   \"}\\n\"\n                                   \"EOF\\n)\\n\"))]\n    (str \"# Agent's configurations \\n\"\n         (agent-token->script agent-token)\n         agent-tag->text \"\\n\"\n\n         (format-configs->exports configs)\n\n         \"# Script to update the agent \\n\"\n         export-config->text\n         \"curl -sL https://raw.githubusercontent.com/runopsio/agent/main/setup/k8s.sh | bash\")))\n\n(defmethod script-agent :kubernetes-heml\n  [_ configs secret-path agent-tag agent-token]\n  (let [agent-tag->text (if (empty-agent-tag? agent-tag)\n                          \"\"\n                          (str \"\t--set config.tags=\" agent-tag \" \\\\\\n\"))\n        env->string-helm (if (empty-config? configs)\n                           \"\"\n                           (s/join (mapv #(str \"\t--set env_var[0].vars.\" (:key %) \"=$\" (:key %) \" \\\\\\n\") configs)))]\n    (request/request {:method \"GET\"\n                      :url \"https://api.github.com/repos/runopsio/agent/releases/latest\"\n                      :options {:header {:accept \"application/json\"\n                                         \"Content-Type\" \"application/json\"}}\n                      :on-success (fn [res]\n                                    (let [parse-res (->> res (.parse js/JSON) (js->clj))]\n                                      (reset! agent-url (-> parse-res\n                                                            (get \"assets\")\n                                                            second\n                                                            (get \"browser_download_url\")))))\n                      :on-failure (fn []\n                                    (reset! agent-url \"https://github.com/runopsio/agent/releases/download/0.15.1/agent-0.15.1.tgz\"))})\n\n    (str \"# Agent's configurations \\n\"\n         (agent-token->script agent-token) \"\\n\"\n\n         (format-configs->exports configs)\n\n         \"# Script to update the agent\\n\"\n         \"helm upgrade --install agent \" @agent-url \" \\\\\\n\"\n         \"\t--set config.token=$AGENT_TOKEN \\\\\\n\"\n         agent-tag->text\n         \"\t--set env_var[0].env=\" secret-path \" \\\\\\n\"\n         env->string-helm\n         \"\t--create-namespace \\\\\\n\"\n         \"\t--namespace runops\")))\n\n(defmethod script-agent :localhost-docker-bash\n  [_ configs secret-path agent-tag agent-token]\n  (let [agent-tag->text (if (empty-agent-tag? agent-tag)\n                          \"\"\n                          (str \"\t--tags \" agent-tag \" \\\\\\n\"))\n        env-string-docker-local (if (empty-config? configs)\n                                  \"\"\n                                  (s/join (mapv #(str \"\t--ev \" (:key %) \"=$\" (:key %) \" \\\\\\n\") configs)))]\n    (str \"# Agent's configurations \\n\"\n         (agent-token->script agent-token) \"\\n\"\n\n         (format-configs->exports configs)\n\n         \"# Script to update the agent\\n\"\n         \"runops agents docker-run \\\\\\n\"\n         agent-tag->text\n         \"\t--token $AGENT_TOKEN \\\\\\n\"\n         \"\t--envvar \" secret-path \" \\\\\\n\"\n         env-string-docker-local\n         \"\t--name agent --rm\")))\n"]}