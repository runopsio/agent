{"version":3,"sources":["webapp/dashboard/queries/panel.cljs"],"mappings":";AAcA,6DAAA,7DAAOA;AAAP,AACE,IAAMC,iBAAe,AAACC;IAChBC,sBAAoB,AAACC,gDAAO,iBAAAC,mBAAI,2DAAA,3DAACC,4CAAIL;AAAT,AAAA,oBAAAI;AAAAA;;AAAA;;;IAC5BE,gBAAc,AAACH,gDAAO,iBAAAC,mBAAI,2DAAA,3DAACC,4CAAIL;AAAT,AAAA,oBAAAI;AAAAA;;AAAA;;;IACtBG,QAAM,sDAAA,mFAAA,zIAACC;IACPC,IAAE,uBAAA,mFAAA,1GAACC;IACHC,kBAAgB,gDAAA,hDAACR;IACjBS,4BAA0B,gDAAA,hDAACT;IAC3BU,kBAAgB,WAAKC;AAAL,AACE,AAACC,sBAAOJ,gBAAgBG;;AACxB,uDAAA,hDAACC,sBAAOH;;IAC1BI,wBAAsB,WAAKC;AAAL,AACE,yGAAA,zGAACC,wIAAuCD;;AACxC,uDAAA,hDAACF,sBAAOH;;0BAZtC,tBAaMO;AAbN,AAa2B,sCAAA,2CAAA,uDAAA,MAAA,mDAAA,uCAAA,iFAAA,lTAACC,kSAEgCP,gFACAG;;AAhB5D,AAiBE;AAAA,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,gDAAA,mFAAA,mDAAA,2CAAA,wDAAA,qBAAA,oHAAA,wCAAA,oEAAA,sEAAA,4DAAA,mEAAA,4DAAA,qDAAA,6DAAA,0EAAA,4EAAA,yDAAA,+EAAA,2DAAA,qDAAA,WAAA,AAAAK,qCAAA,97BAGKC,o+BAQ0B,3DAICpB;AAJD,AACE,gDAAA,hDAACa,sBAAOH;;AACR,OAACO;GAblC,wKAAA,mFAAA,qDAAA,kEAAA,wDAAA,tZAU+B,6CAAA,AAAAE,2CAAA,xFAACE,6DAAGX,sZAOI,WAAKY;AAAL,AACE,AAACT,sBAAOb,oBAAoBsB;;AAC5B,8BAAA,mFAAA,+EAAA,2CAAA,pOAACd,qSAC0B,AAAA,mFAAOc;GApB3E,AAAAH,iCAAA,mFAAA,6DAAA,uBAAA,mFAAA,mDAAA,mHAAA,2CAAA,5dAG+BV,iZAmB1Bc,oIAAwB,4CAAA,WAAAC,vDAACC;AAAD,AACE,oDAAA,mCAAA,2CAAA,6JAAA,xRAACC,iLAAgB,AAAA,qFAAAF,wEACD,4CAAK,AAAA,qFAAAA;2BAxBpD,4DAAA,AAAAL,+BAAA,yDAAA,KAAA,mEAAA,qBAAA,sEAAA,WAAA,1VAsB6B,AAAAA,gBAGEd,oFACAD,qTAIA,WAAKuB;AAAL,AACE,uBAAA,mFAAA,+EAAA,2CAAA,pOAACnB,qSAA6CmB;;AAC9C,OAACd,sBAAOT,cAAcuB;GAhCvD,qDAAA;;;AAmCJ,uCAAA,vCAAMC;AAAN,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,mBAAA,sJAAA,mFAAA,mDAAA,2CAAA,wDAAA,uCAAA,mFAAA,mDAAA,2CAAA,wDAAA,gDAAA,iIAAA,gJAAA,mFAAA,mDAAA,2CAAA,wDAAA,gDAAA,yIAAA,/xCAEI/B,+rBAGEgC,iIACAC,yaAEAC,yIACAC","names":["webapp.dashboard.queries.panel/dashboard-connection-filter","url-params-map","webapp.utilities/get-url-params","selected-connection","reagent.core.atom","or__4253__auto__","cljs.core.get","selected-user","users","re_frame.core.subscribe","_","re-frame.core/dispatch","all-connections","connections-search-status","set-connections","connections","cljs.core/reset!","set-connections-error","e","cljs.core.println","get-all-connections","webapp.http.runops-api/request","cljs.core/deref","webapp.components.searchbox/main","cljs.core._EQ_","item","webapp.components.combobox/main","p1__30314#","cljs.core.map","cljs.core.into","u","webapp.dashboard.queries.panel/panel","webapp.dashboard.queries.running/main","webapp.dashboard.queries.waiting-review/main","webapp.dashboard.queries.status-overview/main","webapp.dashboard.queries.longer-time/main"],"sourcesContent":["(ns webapp.dashboard.queries.panel\n  (:require\n   [reagent.core :as r]\n   [re-frame.core :as rf]\n   [webapp.utilities :as utilities]\n   [webapp.http.runops-api :as runops-api]\n   [webapp.events.dashboard]\n   [webapp.components.searchbox :as searchbox]\n   [webapp.components.combobox :as combobox]\n   [webapp.dashboard.queries.status-overview :as status-overview]\n   [webapp.dashboard.queries.waiting-review :as waiting-review]\n   [webapp.dashboard.queries.longer-time :as longer-time]\n   [webapp.dashboard.queries.running :as running]))\n\n(defn- dashboard-connection-filter []\n  (let [url-params-map (utilities/get-url-params)\n        selected-connection (r/atom (or (get url-params-map \"connection\") \"\"))\n        selected-user (r/atom (or (get url-params-map \"user-email\") \"\"))\n        users (rf/subscribe [:users])\n        _ (rf/dispatch [:settings->get-users])\n        all-connections (r/atom nil)\n        connections-search-status (r/atom nil)\n        set-connections (fn [connections]\n                          (reset! all-connections connections)\n                          (reset! connections-search-status nil))\n        set-connections-error (fn [e]\n                                (println \"couldn't get all connections\" e)\n                                (reset! connections-search-status nil))\n        get-all-connections #(runops-api/request {:method \"GET\"\n                                                  :uri \"/v1/targets?limit=2000&status=active\"\n                                                  :on-success set-connections\n                                                  :on-failure set-connections-error})]\n    (fn []\n      [:div {:class \"grid grid-cols-3 gap-regular mb-large\"}\n       [:div {:class \"col-span-2\"}\n        [searchbox/main {:options @all-connections\n                         :meta-display-keys [:type]\n                         :display-key :name\n                         :searchable-keys [:name :review_type :redact :type]\n                         :placeholder \"Show data for a specific connection\"\n                         :name \"connection-search\"\n                         :clear? true\n                         :loading? (= @connections-search-status :loading)\n                         :on-focus (fn []\n                                     (reset! connections-search-status :loading)\n                                     (get-all-connections))\n                         :list-classes \"min-w-96\"\n                         :selected @selected-connection\n                         ;; TODO change to on-select\n                         :on-select-result (fn [item]\n                                             (reset! selected-connection item)\n                                             (rf/dispatch [:dashboard->filter\n                                                           {:connection (:name item)}]))}]]\n       [:div\n        [combobox/main {:options (map\n                                  #(into {} {:value (:email %)\n                                             :text (str (:email %))})\n                                  @users)\n                        :selected @selected-user\n                        :clear? true\n                        :placeholder \"Show by user email\"\n                        :list-classes \"min-w-64\"\n                        :on-change (fn [u]\n                                     (rf/dispatch [:dashboard->filter {:user-email u}])\n                                     (reset! selected-user u))\n                        :name \"select-user-email\"}]]])))\n\n(defn panel []\n  [:div {:class \"px-large\"}\n   [dashboard-connection-filter]\n   [:div {:class \"grid grid-cols-5 gap-regular\"}\n    [:div {:class \"col-span-2 grid grid-rows gap-regular\"}\n     [running/main]\n     [waiting-review/main]]\n    [:div {:class \"grid grid-rows gap-regular col-span-3\"}\n     [status-overview/main]\n     [longer-time/main]]]])\n"]}